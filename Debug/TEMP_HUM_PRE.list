
TEMP_HUM_PRE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08007fe0  08007fe0  00017fe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008424  08008424  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008424  08008424  00018424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800842c  0800842c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800842c  0800842c  0001842c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008430  08008430  00018430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008434  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000678  200001d4  08008608  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000084c  08008608  0002084c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   000124eb  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000274d  00000000  00000000  00032732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001078  00000000  00000000  00034e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c92  00000000  00000000  00035ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027c56  00000000  00000000  00036b8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012f60  00000000  00000000  0005e7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee7d2  00000000  00000000  00071740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005438  00000000  00000000  0015ff14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0016534c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007fc8 	.word	0x08007fc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08007fc8 	.word	0x08007fc8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b088      	sub	sp, #32
 8000ea8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eaa:	f107 030c 	add.w	r3, r7, #12
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]
 8000eb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eba:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <MX_GPIO_Init+0x84>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebe:	4a1a      	ldr	r2, [pc, #104]	; (8000f28 <MX_GPIO_Init+0x84>)
 8000ec0:	f043 0304 	orr.w	r3, r3, #4
 8000ec4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec6:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <MX_GPIO_Init+0x84>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eca:	f003 0304 	and.w	r3, r3, #4
 8000ece:	60bb      	str	r3, [r7, #8]
 8000ed0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <MX_GPIO_Init+0x84>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed6:	4a14      	ldr	r2, [pc, #80]	; (8000f28 <MX_GPIO_Init+0x84>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ede:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <MX_GPIO_Init+0x84>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eea:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <MX_GPIO_Init+0x84>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eee:	4a0e      	ldr	r2, [pc, #56]	; (8000f28 <MX_GPIO_Init+0x84>)
 8000ef0:	f043 0302 	orr.w	r3, r3, #2
 8000ef4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <MX_GPIO_Init+0x84>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	603b      	str	r3, [r7, #0]
 8000f00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f08:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f12:	f107 030c 	add.w	r3, r7, #12
 8000f16:	4619      	mov	r1, r3
 8000f18:	4804      	ldr	r0, [pc, #16]	; (8000f2c <MX_GPIO_Init+0x88>)
 8000f1a:	f000 fee5 	bl	8001ce8 <HAL_GPIO_Init>

}
 8000f1e:	bf00      	nop
 8000f20:	3720      	adds	r7, #32
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	48000800 	.word	0x48000800

08000f30 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f34:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <MX_I2C1_Init+0x74>)
 8000f36:	4a1c      	ldr	r2, [pc, #112]	; (8000fa8 <MX_I2C1_Init+0x78>)
 8000f38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000f3a:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <MX_I2C1_Init+0x74>)
 8000f3c:	4a1b      	ldr	r2, [pc, #108]	; (8000fac <MX_I2C1_Init+0x7c>)
 8000f3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f40:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <MX_I2C1_Init+0x74>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f46:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <MX_I2C1_Init+0x74>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f4c:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <MX_I2C1_Init+0x74>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f52:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <MX_I2C1_Init+0x74>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <MX_I2C1_Init+0x74>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <MX_I2C1_Init+0x74>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f64:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <MX_I2C1_Init+0x74>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f6a:	480e      	ldr	r0, [pc, #56]	; (8000fa4 <MX_I2C1_Init+0x74>)
 8000f6c:	f001 f866 	bl	800203c <HAL_I2C_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f76:	f000 fb50 	bl	800161a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4809      	ldr	r0, [pc, #36]	; (8000fa4 <MX_I2C1_Init+0x74>)
 8000f7e:	f001 fde9 	bl	8002b54 <HAL_I2CEx_ConfigAnalogFilter>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f88:	f000 fb47 	bl	800161a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <MX_I2C1_Init+0x74>)
 8000f90:	f001 fe2b 	bl	8002bea <HAL_I2CEx_ConfigDigitalFilter>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f9a:	f000 fb3e 	bl	800161a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200001f0 	.word	0x200001f0
 8000fa8:	40005400 	.word	0x40005400
 8000fac:	10d19ce4 	.word	0x10d19ce4

08000fb0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b0ac      	sub	sp, #176	; 0xb0
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2288      	movs	r2, #136	; 0x88
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f005 f93b 	bl	800624c <memset>
  if(i2cHandle->Instance==I2C1)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a21      	ldr	r2, [pc, #132]	; (8001060 <HAL_I2C_MspInit+0xb0>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d13b      	bne.n	8001058 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fe0:	2340      	movs	r3, #64	; 0x40
 8000fe2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	4618      	mov	r0, r3
 8000fee:	f002 fcad 	bl	800394c <HAL_RCCEx_PeriphCLKConfig>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000ff8:	f000 fb0f 	bl	800161a <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffc:	4b19      	ldr	r3, [pc, #100]	; (8001064 <HAL_I2C_MspInit+0xb4>)
 8000ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001000:	4a18      	ldr	r2, [pc, #96]	; (8001064 <HAL_I2C_MspInit+0xb4>)
 8001002:	f043 0302 	orr.w	r3, r3, #2
 8001006:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001008:	4b16      	ldr	r3, [pc, #88]	; (8001064 <HAL_I2C_MspInit+0xb4>)
 800100a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001014:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001018:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800101c:	2312      	movs	r3, #18
 800101e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001028:	2303      	movs	r3, #3
 800102a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800102e:	2304      	movs	r3, #4
 8001030:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001034:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001038:	4619      	mov	r1, r3
 800103a:	480b      	ldr	r0, [pc, #44]	; (8001068 <HAL_I2C_MspInit+0xb8>)
 800103c:	f000 fe54 	bl	8001ce8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <HAL_I2C_MspInit+0xb4>)
 8001042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001044:	4a07      	ldr	r2, [pc, #28]	; (8001064 <HAL_I2C_MspInit+0xb4>)
 8001046:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800104a:	6593      	str	r3, [r2, #88]	; 0x58
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <HAL_I2C_MspInit+0xb4>)
 800104e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001050:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001058:	bf00      	nop
 800105a:	37b0      	adds	r7, #176	; 0xb0
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40005400 	.word	0x40005400
 8001064:	40021000 	.word	0x40021000
 8001068:	48000400 	.word	0x48000400

0800106c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08c      	sub	sp, #48	; 0x30
 8001070:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
  printf("main function started\r\n");
 8001072:	4827      	ldr	r0, [pc, #156]	; (8001110 <main+0xa4>)
 8001074:	f005 f80a 	bl	800608c <puts>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001078:	f000 fcb0 	bl	80019dc <HAL_Init>

  /* USER CODE BEGIN Init */

  lps22hh_dev_ctx.write_reg = platform_write_lps22hh;
 800107c:	4b25      	ldr	r3, [pc, #148]	; (8001114 <main+0xa8>)
 800107e:	4a26      	ldr	r2, [pc, #152]	; (8001118 <main+0xac>)
 8001080:	601a      	str	r2, [r3, #0]
  lps22hh_dev_ctx.read_reg = platform_read_lps22hh;
 8001082:	4b24      	ldr	r3, [pc, #144]	; (8001114 <main+0xa8>)
 8001084:	4a25      	ldr	r2, [pc, #148]	; (800111c <main+0xb0>)
 8001086:	605a      	str	r2, [r3, #4]
  lps22hh_dev_ctx.mdelay = HAL_Delay;
 8001088:	4b22      	ldr	r3, [pc, #136]	; (8001114 <main+0xa8>)
 800108a:	4a25      	ldr	r2, [pc, #148]	; (8001120 <main+0xb4>)
 800108c:	609a      	str	r2, [r3, #8]
  lps22hh_dev_ctx.handle = &hi2c1;
 800108e:	4b21      	ldr	r3, [pc, #132]	; (8001114 <main+0xa8>)
 8001090:	4a24      	ldr	r2, [pc, #144]	; (8001124 <main+0xb8>)
 8001092:	60da      	str	r2, [r3, #12]

  //LPS22HH
  whoamI_lps22hh = 0;
 8001094:	4b24      	ldr	r3, [pc, #144]	; (8001128 <main+0xbc>)
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
  lps22hh_device_id_get(&lps22hh_dev_ctx, &whoamI_lps22hh);
 800109a:	4923      	ldr	r1, [pc, #140]	; (8001128 <main+0xbc>)
 800109c:	481d      	ldr	r0, [pc, #116]	; (8001114 <main+0xa8>)
 800109e:	f004 fa17 	bl	80054d0 <lps22hh_device_id_get>

  printf("%d\r\n", whoamI_lps22hh);
 80010a2:	4b21      	ldr	r3, [pc, #132]	; (8001128 <main+0xbc>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	4619      	mov	r1, r3
 80010a8:	4820      	ldr	r0, [pc, #128]	; (800112c <main+0xc0>)
 80010aa:	f004 ff89 	bl	8005fc0 <iprintf>
  if(whoamI_lps22hh != LPS22HH_ID)
 80010ae:	4b1e      	ldr	r3, [pc, #120]	; (8001128 <main+0xbc>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2bb3      	cmp	r3, #179	; 0xb3
 80010b4:	d000      	beq.n	80010b8 <main+0x4c>
    while (1); /*manage here device not found */
 80010b6:	e7fe      	b.n	80010b6 <main+0x4a>

  /* Restore default configuration */
  lps22hh_reset_set(&lps22hh_dev_ctx, PROPERTY_ENABLE);
 80010b8:	2101      	movs	r1, #1
 80010ba:	4816      	ldr	r0, [pc, #88]	; (8001114 <main+0xa8>)
 80010bc:	f004 fa19 	bl	80054f2 <lps22hh_reset_set>

  do {
    lps22hh_reset_get(&lps22hh_dev_ctx, &rst);
 80010c0:	491b      	ldr	r1, [pc, #108]	; (8001130 <main+0xc4>)
 80010c2:	4814      	ldr	r0, [pc, #80]	; (8001114 <main+0xa8>)
 80010c4:	f004 fa3b 	bl	800553e <lps22hh_reset_get>
  } while (rst);
 80010c8:	4b19      	ldr	r3, [pc, #100]	; (8001130 <main+0xc4>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d1f7      	bne.n	80010c0 <main+0x54>

  /* Enable Block Data Update */
  lps22hh_block_data_update_set(&lps22hh_dev_ctx, PROPERTY_ENABLE);
 80010d0:	2101      	movs	r1, #1
 80010d2:	4810      	ldr	r0, [pc, #64]	; (8001114 <main+0xa8>)
 80010d4:	f004 f93c 	bl	8005350 <lps22hh_block_data_update_set>
  /* Set Output Data Rate */
  lps22hh_data_rate_set(&lps22hh_dev_ctx, LPS22HH_10_Hz_LOW_NOISE);
 80010d8:	2112      	movs	r1, #18
 80010da:	480e      	ldr	r0, [pc, #56]	; (8001114 <main+0xa8>)
 80010dc:	f004 f95e 	bl	800539c <lps22hh_data_rate_set>

  // HTS221
  hts221_dev_ctx.write_reg = platform_write_hts221;
 80010e0:	4b14      	ldr	r3, [pc, #80]	; (8001134 <main+0xc8>)
 80010e2:	4a15      	ldr	r2, [pc, #84]	; (8001138 <main+0xcc>)
 80010e4:	601a      	str	r2, [r3, #0]
  hts221_dev_ctx.read_reg = platform_read_hts221;
 80010e6:	4b13      	ldr	r3, [pc, #76]	; (8001134 <main+0xc8>)
 80010e8:	4a14      	ldr	r2, [pc, #80]	; (800113c <main+0xd0>)
 80010ea:	605a      	str	r2, [r3, #4]
  hts221_dev_ctx.mdelay = HAL_Delay;
 80010ec:	4b11      	ldr	r3, [pc, #68]	; (8001134 <main+0xc8>)
 80010ee:	4a0c      	ldr	r2, [pc, #48]	; (8001120 <main+0xb4>)
 80010f0:	609a      	str	r2, [r3, #8]
  hts221_dev_ctx.handle = &hi2c1;
 80010f2:	4b10      	ldr	r3, [pc, #64]	; (8001134 <main+0xc8>)
 80010f4:	4a0b      	ldr	r2, [pc, #44]	; (8001124 <main+0xb8>)
 80010f6:	60da      	str	r2, [r3, #12]
  whoamI_hts221 = 0;
 80010f8:	4b11      	ldr	r3, [pc, #68]	; (8001140 <main+0xd4>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]
  hts221_device_id_get(&hts221_dev_ctx, &whoamI_hts221);
 80010fe:	4910      	ldr	r1, [pc, #64]	; (8001140 <main+0xd4>)
 8001100:	480c      	ldr	r0, [pc, #48]	; (8001134 <main+0xc8>)
 8001102:	f003 ff4c 	bl	8004f9e <hts221_device_id_get>

  if ( whoamI_hts221 != HTS221_ID )
 8001106:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <main+0xd4>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2bbc      	cmp	r3, #188	; 0xbc
 800110c:	d01a      	beq.n	8001144 <main+0xd8>
    while (1); /*manage here device not found */
 800110e:	e7fe      	b.n	800110e <main+0xa2>
 8001110:	08007fe0 	.word	0x08007fe0
 8001114:	2000064c 	.word	0x2000064c
 8001118:	080014a9 	.word	0x080014a9
 800111c:	080014e3 	.word	0x080014e3
 8001120:	08001ad5 	.word	0x08001ad5
 8001124:	200001f0 	.word	0x200001f0
 8001128:	2000066c 	.word	0x2000066c
 800112c:	08007ff8 	.word	0x08007ff8
 8001130:	2000066d 	.word	0x2000066d
 8001134:	20000244 	.word	0x20000244
 8001138:	0800151d 	.word	0x0800151d
 800113c:	0800155f 	.word	0x0800155f
 8001140:	20000260 	.word	0x20000260

  /* Read humidity calibration coefficient */
  lin_t lin_hum;
  hts221_hum_adc_point_0_get(&hts221_dev_ctx, &lin_hum.x0);
 8001144:	f107 0318 	add.w	r3, r7, #24
 8001148:	4619      	mov	r1, r3
 800114a:	4894      	ldr	r0, [pc, #592]	; (800139c <main+0x330>)
 800114c:	f004 f80d 	bl	800516a <hts221_hum_adc_point_0_get>
  hts221_hum_rh_point_0_get(&hts221_dev_ctx, &lin_hum.y0);
 8001150:	f107 0318 	add.w	r3, r7, #24
 8001154:	3304      	adds	r3, #4
 8001156:	4619      	mov	r1, r3
 8001158:	4890      	ldr	r0, [pc, #576]	; (800139c <main+0x330>)
 800115a:	f003 ff68 	bl	800502e <hts221_hum_rh_point_0_get>
  hts221_hum_adc_point_1_get(&hts221_dev_ctx, &lin_hum.x1);
 800115e:	f107 0318 	add.w	r3, r7, #24
 8001162:	3308      	adds	r3, #8
 8001164:	4619      	mov	r1, r3
 8001166:	488d      	ldr	r0, [pc, #564]	; (800139c <main+0x330>)
 8001168:	f004 f823 	bl	80051b2 <hts221_hum_adc_point_1_get>
  hts221_hum_rh_point_1_get(&hts221_dev_ctx, &lin_hum.y1);
 800116c:	f107 0318 	add.w	r3, r7, #24
 8001170:	330c      	adds	r3, #12
 8001172:	4619      	mov	r1, r3
 8001174:	4889      	ldr	r0, [pc, #548]	; (800139c <main+0x330>)
 8001176:	f003 ff78 	bl	800506a <hts221_hum_rh_point_1_get>
  /* Read temperature calibration coefficient */
  lin_t lin_temp;
  hts221_temp_adc_point_0_get(&hts221_dev_ctx, &lin_temp.x0);
 800117a:	f107 0308 	add.w	r3, r7, #8
 800117e:	4619      	mov	r1, r3
 8001180:	4886      	ldr	r0, [pc, #536]	; (800139c <main+0x330>)
 8001182:	f004 f83a 	bl	80051fa <hts221_temp_adc_point_0_get>
  hts221_temp_deg_point_0_get(&hts221_dev_ctx, &lin_temp.y0);
 8001186:	f107 0308 	add.w	r3, r7, #8
 800118a:	3304      	adds	r3, #4
 800118c:	4619      	mov	r1, r3
 800118e:	4883      	ldr	r0, [pc, #524]	; (800139c <main+0x330>)
 8001190:	f003 ff89 	bl	80050a6 <hts221_temp_deg_point_0_get>
  hts221_temp_adc_point_1_get(&hts221_dev_ctx, &lin_temp.x1);
 8001194:	f107 0308 	add.w	r3, r7, #8
 8001198:	3308      	adds	r3, #8
 800119a:	4619      	mov	r1, r3
 800119c:	487f      	ldr	r0, [pc, #508]	; (800139c <main+0x330>)
 800119e:	f004 f850 	bl	8005242 <hts221_temp_adc_point_1_get>
  hts221_temp_deg_point_1_get(&hts221_dev_ctx, &lin_temp.y1);
 80011a2:	f107 0308 	add.w	r3, r7, #8
 80011a6:	330c      	adds	r3, #12
 80011a8:	4619      	mov	r1, r3
 80011aa:	487c      	ldr	r0, [pc, #496]	; (800139c <main+0x330>)
 80011ac:	f003 ffac 	bl	8005108 <hts221_temp_deg_point_1_get>
  /* Enable Block Data Update */
  hts221_block_data_update_set(&hts221_dev_ctx, PROPERTY_ENABLE);
 80011b0:	2101      	movs	r1, #1
 80011b2:	487a      	ldr	r0, [pc, #488]	; (800139c <main+0x330>)
 80011b4:	f003 fe87 	bl	8004ec6 <hts221_block_data_update_set>
  /* Set Output Data Rate */
  hts221_data_rate_set(&hts221_dev_ctx, HTS221_ODR_1Hz);
 80011b8:	2101      	movs	r1, #1
 80011ba:	4878      	ldr	r0, [pc, #480]	; (800139c <main+0x330>)
 80011bc:	f003 fe5d 	bl	8004e7a <hts221_data_rate_set>
  /* Device power on */
  hts221_power_on_set(&hts221_dev_ctx, PROPERTY_ENABLE);
 80011c0:	2101      	movs	r1, #1
 80011c2:	4876      	ldr	r0, [pc, #472]	; (800139c <main+0x330>)
 80011c4:	f003 fefc 	bl	8004fc0 <hts221_power_on_set>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c8:	f000 f90a 	bl	80013e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011cc:	f7ff fe6a 	bl	8000ea4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80011d0:	f7ff feae 	bl	8000f30 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80011d4:	f000 fb4c 	bl	8001870 <MX_USART2_UART_Init>

    /* USER CODE BEGIN 3 */

	// LPSS22HH
	/* Read output only if new value is available */
	lps22hh_read_reg(&lps22hh_dev_ctx, LPS22HH_STATUS, (uint8_t *)&lps22hh_reg, 1);
 80011d8:	2301      	movs	r3, #1
 80011da:	4a71      	ldr	r2, [pc, #452]	; (80013a0 <main+0x334>)
 80011dc:	2127      	movs	r1, #39	; 0x27
 80011de:	4871      	ldr	r0, [pc, #452]	; (80013a4 <main+0x338>)
 80011e0:	f004 f853 	bl	800528a <lps22hh_read_reg>

	if (status.p_da) {
 80011e4:	4b70      	ldr	r3, [pc, #448]	; (80013a8 <main+0x33c>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d027      	beq.n	8001242 <main+0x1d6>
 80011f2:	4b6e      	ldr	r3, [pc, #440]	; (80013ac <main+0x340>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
	  lps22hh_pressure_raw_get(&lps22hh_dev_ctx, &data_raw_pressure);
 80011f8:	496c      	ldr	r1, [pc, #432]	; (80013ac <main+0x340>)
 80011fa:	486a      	ldr	r0, [pc, #424]	; (80013a4 <main+0x338>)
 80011fc:	f004 f91c 	bl	8005438 <lps22hh_pressure_raw_get>
	  pressure_hPa = lps22hh_from_lsb_to_hpa( data_raw_pressure);
 8001200:	4b6a      	ldr	r3, [pc, #424]	; (80013ac <main+0x340>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f004 f871 	bl	80052ec <lps22hh_from_lsb_to_hpa>
 800120a:	eef0 7a40 	vmov.f32	s15, s0
 800120e:	4b68      	ldr	r3, [pc, #416]	; (80013b0 <main+0x344>)
 8001210:	edc3 7a00 	vstr	s15, [r3]
	  printf((char *)tx_buffer, sizeof(tx_buffer), "pressure [hPa]:%6.2f\r\n", pressure_hPa);
 8001214:	4b66      	ldr	r3, [pc, #408]	; (80013b0 <main+0x344>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff f995 	bl	8000548 <__aeabi_f2d>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	e9cd 2300 	strd	r2, r3, [sp]
 8001226:	4a63      	ldr	r2, [pc, #396]	; (80013b4 <main+0x348>)
 8001228:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800122c:	4862      	ldr	r0, [pc, #392]	; (80013b8 <main+0x34c>)
 800122e:	f004 fec7 	bl	8005fc0 <iprintf>
	  printf((char *)tx_buffer, strlen( (char const *)tx_buffer ) );
 8001232:	4861      	ldr	r0, [pc, #388]	; (80013b8 <main+0x34c>)
 8001234:	f7ff f81c 	bl	8000270 <strlen>
 8001238:	4603      	mov	r3, r0
 800123a:	4619      	mov	r1, r3
 800123c:	485e      	ldr	r0, [pc, #376]	; (80013b8 <main+0x34c>)
 800123e:	f004 febf 	bl	8005fc0 <iprintf>
	}

	if (status.t_da) {
 8001242:	4b59      	ldr	r3, [pc, #356]	; (80013a8 <main+0x33c>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	b2db      	uxtb	r3, r3
 800124c:	2b00      	cmp	r3, #0
 800124e:	d028      	beq.n	80012a2 <main+0x236>
 8001250:	4b5a      	ldr	r3, [pc, #360]	; (80013bc <main+0x350>)
 8001252:	2200      	movs	r2, #0
 8001254:	801a      	strh	r2, [r3, #0]
	  memset(&data_raw_temperature, 0x00, sizeof(int16_t));
	  lps22hh_temperature_raw_get(&lps22hh_dev_ctx, &data_raw_temperature);
 8001256:	4959      	ldr	r1, [pc, #356]	; (80013bc <main+0x350>)
 8001258:	4852      	ldr	r0, [pc, #328]	; (80013a4 <main+0x338>)
 800125a:	f004 f916 	bl	800548a <lps22hh_temperature_raw_get>
	  temperature_degC = lps22hh_from_lsb_to_celsius(
 800125e:	4b57      	ldr	r3, [pc, #348]	; (80013bc <main+0x350>)
 8001260:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001264:	4618      	mov	r0, r3
 8001266:	f004 f859 	bl	800531c <lps22hh_from_lsb_to_celsius>
 800126a:	eef0 7a40 	vmov.f32	s15, s0
 800126e:	4b54      	ldr	r3, [pc, #336]	; (80013c0 <main+0x354>)
 8001270:	edc3 7a00 	vstr	s15, [r3]
	                        data_raw_temperature );
	  printf((char *)tx_buffer, sizeof(tx_buffer), "temperature [degC]:%6.2f\r\n",
 8001274:	4b52      	ldr	r3, [pc, #328]	; (80013c0 <main+0x354>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff f965 	bl	8000548 <__aeabi_f2d>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	e9cd 2300 	strd	r2, r3, [sp]
 8001286:	4a4f      	ldr	r2, [pc, #316]	; (80013c4 <main+0x358>)
 8001288:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800128c:	484a      	ldr	r0, [pc, #296]	; (80013b8 <main+0x34c>)
 800128e:	f004 fe97 	bl	8005fc0 <iprintf>
	          temperature_degC );
	  printf((char *)tx_buffer, strlen( (char const *)tx_buffer ) );
 8001292:	4849      	ldr	r0, [pc, #292]	; (80013b8 <main+0x34c>)
 8001294:	f7fe ffec 	bl	8000270 <strlen>
 8001298:	4603      	mov	r3, r0
 800129a:	4619      	mov	r1, r3
 800129c:	4846      	ldr	r0, [pc, #280]	; (80013b8 <main+0x34c>)
 800129e:	f004 fe8f 	bl	8005fc0 <iprintf>
	}
	// HTS221
	hts221_status_reg_t status;
	    hts221_status_get(&hts221_dev_ctx, &status);
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	4619      	mov	r1, r3
 80012a6:	483d      	ldr	r0, [pc, #244]	; (800139c <main+0x330>)
 80012a8:	f003 feb0 	bl	800500c <hts221_status_get>

	    if (status.h_da) {
 80012ac:	793b      	ldrb	r3, [r7, #4]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d03f      	beq.n	8001338 <main+0x2cc>
 80012b8:	4b43      	ldr	r3, [pc, #268]	; (80013c8 <main+0x35c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	801a      	strh	r2, [r3, #0]
	      /* Read humidity data */
	      memset(&data_raw_humidity, 0x00, sizeof(int16_t));
	      hts221_humidity_raw_get(&hts221_dev_ctx, &data_raw_humidity);
 80012be:	4942      	ldr	r1, [pc, #264]	; (80013c8 <main+0x35c>)
 80012c0:	4836      	ldr	r0, [pc, #216]	; (800139c <main+0x330>)
 80012c2:	f003 fe26 	bl	8004f12 <hts221_humidity_raw_get>
	      humidity_perc = linear_interpolation(&lin_hum, data_raw_humidity);
 80012c6:	4b40      	ldr	r3, [pc, #256]	; (80013c8 <main+0x35c>)
 80012c8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012cc:	f107 0318 	add.w	r3, r7, #24
 80012d0:	4611      	mov	r1, r2
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 f964 	bl	80015a0 <linear_interpolation>
 80012d8:	eef0 7a40 	vmov.f32	s15, s0
 80012dc:	4b3b      	ldr	r3, [pc, #236]	; (80013cc <main+0x360>)
 80012de:	edc3 7a00 	vstr	s15, [r3]

	      if (humidity_perc < 0) {
 80012e2:	4b3a      	ldr	r3, [pc, #232]	; (80013cc <main+0x360>)
 80012e4:	edd3 7a00 	vldr	s15, [r3]
 80012e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f0:	d503      	bpl.n	80012fa <main+0x28e>
	        humidity_perc = 0;
 80012f2:	4b36      	ldr	r3, [pc, #216]	; (80013cc <main+0x360>)
 80012f4:	f04f 0200 	mov.w	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
	      }

	      if (humidity_perc > 100) {
 80012fa:	4b34      	ldr	r3, [pc, #208]	; (80013cc <main+0x360>)
 80012fc:	edd3 7a00 	vldr	s15, [r3]
 8001300:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80013d0 <main+0x364>
 8001304:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130c:	dd02      	ble.n	8001314 <main+0x2a8>
	        humidity_perc = 100;
 800130e:	4b2f      	ldr	r3, [pc, #188]	; (80013cc <main+0x360>)
 8001310:	4a30      	ldr	r2, [pc, #192]	; (80013d4 <main+0x368>)
 8001312:	601a      	str	r2, [r3, #0]
	      }

	      printf((char *)tx_buffer, sizeof(tx_buffer), "Humidity [%%]:%3.2f\r\n", humidity_perc);
 8001314:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <main+0x360>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f915 	bl	8000548 <__aeabi_f2d>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	e9cd 2300 	strd	r2, r3, [sp]
 8001326:	4a2c      	ldr	r2, [pc, #176]	; (80013d8 <main+0x36c>)
 8001328:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800132c:	4822      	ldr	r0, [pc, #136]	; (80013b8 <main+0x34c>)
 800132e:	f004 fe47 	bl	8005fc0 <iprintf>
	      printf((char *)tx_buffer);
 8001332:	4821      	ldr	r0, [pc, #132]	; (80013b8 <main+0x34c>)
 8001334:	f004 fe44 	bl	8005fc0 <iprintf>
	    }

	    if (status.t_da) {
 8001338:	793b      	ldrb	r3, [r7, #4]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b00      	cmp	r3, #0
 8001342:	d026      	beq.n	8001392 <main+0x326>
 8001344:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <main+0x350>)
 8001346:	2200      	movs	r2, #0
 8001348:	801a      	strh	r2, [r3, #0]
	      /* Read temperature data */
	      memset(&data_raw_temperature, 0x00, sizeof(int16_t));
	      hts221_temperature_raw_get(&hts221_dev_ctx, &data_raw_temperature);
 800134a:	491c      	ldr	r1, [pc, #112]	; (80013bc <main+0x350>)
 800134c:	4813      	ldr	r0, [pc, #76]	; (800139c <main+0x330>)
 800134e:	f003 fe03 	bl	8004f58 <hts221_temperature_raw_get>
	      temperature_degC = linear_interpolation(&lin_temp,
 8001352:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <main+0x350>)
 8001354:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001358:	f107 0308 	add.w	r3, r7, #8
 800135c:	4611      	mov	r1, r2
 800135e:	4618      	mov	r0, r3
 8001360:	f000 f91e 	bl	80015a0 <linear_interpolation>
 8001364:	eef0 7a40 	vmov.f32	s15, s0
 8001368:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <main+0x354>)
 800136a:	edc3 7a00 	vstr	s15, [r3]
	                                              data_raw_temperature);
	      printf((char *)tx_buffer, sizeof(tx_buffer), "Temperature [degC]:%6.2f\r\n",
 800136e:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <main+0x354>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff f8e8 	bl	8000548 <__aeabi_f2d>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	e9cd 2300 	strd	r2, r3, [sp]
 8001380:	4a16      	ldr	r2, [pc, #88]	; (80013dc <main+0x370>)
 8001382:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001386:	480c      	ldr	r0, [pc, #48]	; (80013b8 <main+0x34c>)
 8001388:	f004 fe1a 	bl	8005fc0 <iprintf>
	              temperature_degC );
	      printf((char *)tx_buffer);
 800138c:	480a      	ldr	r0, [pc, #40]	; (80013b8 <main+0x34c>)
 800138e:	f004 fe17 	bl	8005fc0 <iprintf>
	    }

	    HAL_Delay(1000); // 1s for the debug
 8001392:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001396:	f000 fb9d 	bl	8001ad4 <HAL_Delay>
  {
 800139a:	e71d      	b.n	80011d8 <main+0x16c>
 800139c:	20000244 	.word	0x20000244
 80013a0:	2000065c 	.word	0x2000065c
 80013a4:	2000064c 	.word	0x2000064c
 80013a8:	20000660 	.word	0x20000660
 80013ac:	20000664 	.word	0x20000664
 80013b0:	20000668 	.word	0x20000668
 80013b4:	08008000 	.word	0x08008000
 80013b8:	20000264 	.word	0x20000264
 80013bc:	20000256 	.word	0x20000256
 80013c0:	2000025c 	.word	0x2000025c
 80013c4:	08008018 	.word	0x08008018
 80013c8:	20000254 	.word	0x20000254
 80013cc:	20000258 	.word	0x20000258
 80013d0:	42c80000 	.word	0x42c80000
 80013d4:	42c80000 	.word	0x42c80000
 80013d8:	08008034 	.word	0x08008034
 80013dc:	0800804c 	.word	0x0800804c

080013e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b096      	sub	sp, #88	; 0x58
 80013e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	2244      	movs	r2, #68	; 0x44
 80013ec:	2100      	movs	r1, #0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f004 ff2c 	bl	800624c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f4:	463b      	mov	r3, r7
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
 8001400:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001402:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001406:	f001 fc4b 	bl	8002ca0 <HAL_PWREx_ControlVoltageScaling>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001410:	f000 f903 	bl	800161a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001414:	2302      	movs	r3, #2
 8001416:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001418:	f44f 7380 	mov.w	r3, #256	; 0x100
 800141c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800141e:	2310      	movs	r3, #16
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001422:	2302      	movs	r3, #2
 8001424:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001426:	2302      	movs	r3, #2
 8001428:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800142a:	2301      	movs	r3, #1
 800142c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800142e:	230a      	movs	r3, #10
 8001430:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001432:	2307      	movs	r3, #7
 8001434:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001436:	2302      	movs	r3, #2
 8001438:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800143a:	2302      	movs	r3, #2
 800143c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	4618      	mov	r0, r3
 8001444:	f001 fc82 	bl	8002d4c <HAL_RCC_OscConfig>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800144e:	f000 f8e4 	bl	800161a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001452:	230f      	movs	r3, #15
 8001454:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001456:	2303      	movs	r3, #3
 8001458:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800145a:	2300      	movs	r3, #0
 800145c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001466:	463b      	mov	r3, r7
 8001468:	2104      	movs	r1, #4
 800146a:	4618      	mov	r0, r3
 800146c:	f002 f84a 	bl	8003504 <HAL_RCC_ClockConfig>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001476:	f000 f8d0 	bl	800161a <Error_Handler>
  }
}
 800147a:	bf00      	nop
 800147c:	3758      	adds	r7, #88	; 0x58
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART2 and Loop until the end
	of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 100);
 800148c:	1d39      	adds	r1, r7, #4
 800148e:	2364      	movs	r3, #100	; 0x64
 8001490:	2201      	movs	r2, #1
 8001492:	4804      	ldr	r0, [pc, #16]	; (80014a4 <__io_putchar+0x20>)
 8001494:	f002 ff64 	bl	8004360 <HAL_UART_Transmit>
	return ch;
 8001498:	687b      	ldr	r3, [r7, #4]
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000674 	.word	0x20000674

080014a8 <platform_write_lps22hh>:

// LPS22HH
static int32_t platform_write_lps22hh(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af04      	add	r7, sp, #16
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	607a      	str	r2, [r7, #4]
 80014b2:	461a      	mov	r2, r3
 80014b4:	460b      	mov	r3, r1
 80014b6:	72fb      	strb	r3, [r7, #11]
 80014b8:	4613      	mov	r3, r2
 80014ba:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LPS22HH_ID, reg,
 80014bc:	7afb      	ldrb	r3, [r7, #11]
 80014be:	b29a      	uxth	r2, r3
 80014c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c4:	9302      	str	r3, [sp, #8]
 80014c6:	893b      	ldrh	r3, [r7, #8]
 80014c8:	9301      	str	r3, [sp, #4]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	2301      	movs	r3, #1
 80014d0:	21b3      	movs	r1, #179	; 0xb3
 80014d2:	68f8      	ldr	r0, [r7, #12]
 80014d4:	f000 fe4e 	bl	8002174 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
  return 0;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <platform_read_lps22hh>:
static int32_t platform_read_lps22hh(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len){
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b088      	sub	sp, #32
 80014e6:	af04      	add	r7, sp, #16
 80014e8:	60f8      	str	r0, [r7, #12]
 80014ea:	607a      	str	r2, [r7, #4]
 80014ec:	461a      	mov	r2, r3
 80014ee:	460b      	mov	r3, r1
 80014f0:	72fb      	strb	r3, [r7, #11]
 80014f2:	4613      	mov	r3, r2
 80014f4:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_ID, reg,
 80014f6:	7afb      	ldrb	r3, [r7, #11]
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014fe:	9302      	str	r3, [sp, #8]
 8001500:	893b      	ldrh	r3, [r7, #8]
 8001502:	9301      	str	r3, [sp, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	2301      	movs	r3, #1
 800150a:	21b3      	movs	r1, #179	; 0xb3
 800150c:	68f8      	ldr	r0, [r7, #12]
 800150e:	f000 ff45 	bl	800239c <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 8001512:	2300      	movs	r3, #0
}
 8001514:	4618      	mov	r0, r3
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <platform_write_hts221>:
// HTS221
static int32_t platform_write_hts221(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len){
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af04      	add	r7, sp, #16
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	607a      	str	r2, [r7, #4]
 8001526:	461a      	mov	r2, r3
 8001528:	460b      	mov	r3, r1
 800152a:	72fb      	strb	r3, [r7, #11]
 800152c:	4613      	mov	r3, r2
 800152e:	813b      	strh	r3, [r7, #8]
  /* Write multiple command */
  reg |= 0x80;
 8001530:	7afb      	ldrb	r3, [r7, #11]
 8001532:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001536:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Write(handle, HTS221_ID, reg,
 8001538:	7afb      	ldrb	r3, [r7, #11]
 800153a:	b29a      	uxth	r2, r3
 800153c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001540:	9302      	str	r3, [sp, #8]
 8001542:	893b      	ldrh	r3, [r7, #8]
 8001544:	9301      	str	r3, [sp, #4]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	9300      	str	r3, [sp, #0]
 800154a:	2301      	movs	r3, #1
 800154c:	21bc      	movs	r1, #188	; 0xbc
 800154e:	68f8      	ldr	r0, [r7, #12]
 8001550:	f000 fe10 	bl	8002174 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
  return 0;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <platform_read_hts221>:

static int32_t platform_read_hts221(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len){
 800155e:	b580      	push	{r7, lr}
 8001560:	b088      	sub	sp, #32
 8001562:	af04      	add	r7, sp, #16
 8001564:	60f8      	str	r0, [r7, #12]
 8001566:	607a      	str	r2, [r7, #4]
 8001568:	461a      	mov	r2, r3
 800156a:	460b      	mov	r3, r1
 800156c:	72fb      	strb	r3, [r7, #11]
 800156e:	4613      	mov	r3, r2
 8001570:	813b      	strh	r3, [r7, #8]
  /* Read multiple command */
  reg |= 0x80;
 8001572:	7afb      	ldrb	r3, [r7, #11]
 8001574:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001578:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Read(handle, HTS221_ID, reg,
 800157a:	7afb      	ldrb	r3, [r7, #11]
 800157c:	b29a      	uxth	r2, r3
 800157e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001582:	9302      	str	r3, [sp, #8]
 8001584:	893b      	ldrh	r3, [r7, #8]
 8001586:	9301      	str	r3, [sp, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	2301      	movs	r3, #1
 800158e:	21bc      	movs	r1, #188	; 0xbc
 8001590:	68f8      	ldr	r0, [r7, #12]
 8001592:	f000 ff03 	bl	800239c <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <linear_interpolation>:

static float linear_interpolation(lin_t *lin, int16_t x)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	807b      	strh	r3, [r7, #2]
  return ((lin->y1 - lin->y0) * x + ((lin->x1 * lin->y0) -
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	ed93 7a03 	vldr	s14, [r3, #12]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80015b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80015c0:	ee07 3a90 	vmov	s15, r3
 80015c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	edd3 6a02 	vldr	s13, [r3, #8]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80015d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
                                     (lin->x0 * lin->y1)))
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	ed93 6a00 	vldr	s12, [r3]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80015e8:	ee66 7a27 	vmul.f32	s15, s12, s15
  return ((lin->y1 - lin->y0) * x + ((lin->x1 * lin->y0) -
 80015ec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80015f0:	ee37 7a27 	vadd.f32	s14, s14, s15
         / (lin->x1 - lin->x0);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	edd3 6a02 	vldr	s13, [r3, #8]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	edd3 7a00 	vldr	s15, [r3]
 8001600:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001604:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001608:	eef0 7a66 	vmov.f32	s15, s13
}
 800160c:	eeb0 0a67 	vmov.f32	s0, s15
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800161e:	b672      	cpsid	i
}
 8001620:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001622:	e7fe      	b.n	8001622 <Error_Handler+0x8>

08001624 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162a:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <HAL_MspInit+0x44>)
 800162c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800162e:	4a0e      	ldr	r2, [pc, #56]	; (8001668 <HAL_MspInit+0x44>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	6613      	str	r3, [r2, #96]	; 0x60
 8001636:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <HAL_MspInit+0x44>)
 8001638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	607b      	str	r3, [r7, #4]
 8001640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <HAL_MspInit+0x44>)
 8001644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001646:	4a08      	ldr	r2, [pc, #32]	; (8001668 <HAL_MspInit+0x44>)
 8001648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800164c:	6593      	str	r3, [r2, #88]	; 0x58
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_MspInit+0x44>)
 8001650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001656:	603b      	str	r3, [r7, #0]
 8001658:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	40021000 	.word	0x40021000

0800166c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001670:	e7fe      	b.n	8001670 <NMI_Handler+0x4>

08001672 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001676:	e7fe      	b.n	8001676 <HardFault_Handler+0x4>

08001678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800167c:	e7fe      	b.n	800167c <MemManage_Handler+0x4>

0800167e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001682:	e7fe      	b.n	8001682 <BusFault_Handler+0x4>

08001684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001688:	e7fe      	b.n	8001688 <UsageFault_Handler+0x4>

0800168a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b8:	f000 f9ec 	bl	8001a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}

080016c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return 1;
 80016c4:	2301      	movs	r3, #1
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <_kill>:

int _kill(int pid, int sig)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016da:	f004 fe09 	bl	80062f0 <__errno>
 80016de:	4603      	mov	r3, r0
 80016e0:	2216      	movs	r2, #22
 80016e2:	601a      	str	r2, [r3, #0]
  return -1;
 80016e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <_exit>:

void _exit (int status)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016f8:	f04f 31ff 	mov.w	r1, #4294967295
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff ffe7 	bl	80016d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001702:	e7fe      	b.n	8001702 <_exit+0x12>

08001704 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
 8001714:	e00a      	b.n	800172c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001716:	f3af 8000 	nop.w
 800171a:	4601      	mov	r1, r0
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	1c5a      	adds	r2, r3, #1
 8001720:	60ba      	str	r2, [r7, #8]
 8001722:	b2ca      	uxtb	r2, r1
 8001724:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	3301      	adds	r3, #1
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	697a      	ldr	r2, [r7, #20]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	429a      	cmp	r2, r3
 8001732:	dbf0      	blt.n	8001716 <_read+0x12>
  }

  return len;
 8001734:	687b      	ldr	r3, [r7, #4]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b086      	sub	sp, #24
 8001742:	af00      	add	r7, sp, #0
 8001744:	60f8      	str	r0, [r7, #12]
 8001746:	60b9      	str	r1, [r7, #8]
 8001748:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
 800174e:	e009      	b.n	8001764 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	1c5a      	adds	r2, r3, #1
 8001754:	60ba      	str	r2, [r7, #8]
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fe93 	bl	8001484 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	3301      	adds	r3, #1
 8001762:	617b      	str	r3, [r7, #20]
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	429a      	cmp	r2, r3
 800176a:	dbf1      	blt.n	8001750 <_write+0x12>
  }
  return len;
 800176c:	687b      	ldr	r3, [r7, #4]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <_close>:

int _close(int file)
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800177e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001782:	4618      	mov	r0, r3
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
 8001796:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800179e:	605a      	str	r2, [r3, #4]
  return 0;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <_isatty>:

int _isatty(int file)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b083      	sub	sp, #12
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017b6:	2301      	movs	r3, #1
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
	...

080017e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017e8:	4a14      	ldr	r2, [pc, #80]	; (800183c <_sbrk+0x5c>)
 80017ea:	4b15      	ldr	r3, [pc, #84]	; (8001840 <_sbrk+0x60>)
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017f4:	4b13      	ldr	r3, [pc, #76]	; (8001844 <_sbrk+0x64>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d102      	bne.n	8001802 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017fc:	4b11      	ldr	r3, [pc, #68]	; (8001844 <_sbrk+0x64>)
 80017fe:	4a12      	ldr	r2, [pc, #72]	; (8001848 <_sbrk+0x68>)
 8001800:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001802:	4b10      	ldr	r3, [pc, #64]	; (8001844 <_sbrk+0x64>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	429a      	cmp	r2, r3
 800180e:	d207      	bcs.n	8001820 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001810:	f004 fd6e 	bl	80062f0 <__errno>
 8001814:	4603      	mov	r3, r0
 8001816:	220c      	movs	r2, #12
 8001818:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800181a:	f04f 33ff 	mov.w	r3, #4294967295
 800181e:	e009      	b.n	8001834 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001820:	4b08      	ldr	r3, [pc, #32]	; (8001844 <_sbrk+0x64>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001826:	4b07      	ldr	r3, [pc, #28]	; (8001844 <_sbrk+0x64>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	4a05      	ldr	r2, [pc, #20]	; (8001844 <_sbrk+0x64>)
 8001830:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001832:	68fb      	ldr	r3, [r7, #12]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20018000 	.word	0x20018000
 8001840:	00000400 	.word	0x00000400
 8001844:	20000670 	.word	0x20000670
 8001848:	20000850 	.word	0x20000850

0800184c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <SystemInit+0x20>)
 8001852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001856:	4a05      	ldr	r2, [pc, #20]	; (800186c <SystemInit+0x20>)
 8001858:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800185c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001874:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <MX_USART2_UART_Init+0x58>)
 8001876:	4a15      	ldr	r2, [pc, #84]	; (80018cc <MX_USART2_UART_Init+0x5c>)
 8001878:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800187a:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <MX_USART2_UART_Init+0x58>)
 800187c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001880:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001882:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <MX_USART2_UART_Init+0x58>)
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001888:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <MX_USART2_UART_Init+0x58>)
 800188a:	2200      	movs	r2, #0
 800188c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800188e:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <MX_USART2_UART_Init+0x58>)
 8001890:	2200      	movs	r2, #0
 8001892:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <MX_USART2_UART_Init+0x58>)
 8001896:	220c      	movs	r2, #12
 8001898:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800189a:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <MX_USART2_UART_Init+0x58>)
 800189c:	2200      	movs	r2, #0
 800189e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <MX_USART2_UART_Init+0x58>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018a6:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <MX_USART2_UART_Init+0x58>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <MX_USART2_UART_Init+0x58>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018b2:	4805      	ldr	r0, [pc, #20]	; (80018c8 <MX_USART2_UART_Init+0x58>)
 80018b4:	f002 fd06 	bl	80042c4 <HAL_UART_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80018be:	f7ff feac 	bl	800161a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000674 	.word	0x20000674
 80018cc:	40004400 	.word	0x40004400

080018d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b0ac      	sub	sp, #176	; 0xb0
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	2288      	movs	r2, #136	; 0x88
 80018ee:	2100      	movs	r1, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f004 fcab 	bl	800624c <memset>
  if(uartHandle->Instance==USART2)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a21      	ldr	r2, [pc, #132]	; (8001980 <HAL_UART_MspInit+0xb0>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d13b      	bne.n	8001978 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001900:	2302      	movs	r3, #2
 8001902:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001904:	2300      	movs	r3, #0
 8001906:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001908:	f107 0314 	add.w	r3, r7, #20
 800190c:	4618      	mov	r0, r3
 800190e:	f002 f81d 	bl	800394c <HAL_RCCEx_PeriphCLKConfig>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001918:	f7ff fe7f 	bl	800161a <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800191c:	4b19      	ldr	r3, [pc, #100]	; (8001984 <HAL_UART_MspInit+0xb4>)
 800191e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001920:	4a18      	ldr	r2, [pc, #96]	; (8001984 <HAL_UART_MspInit+0xb4>)
 8001922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001926:	6593      	str	r3, [r2, #88]	; 0x58
 8001928:	4b16      	ldr	r3, [pc, #88]	; (8001984 <HAL_UART_MspInit+0xb4>)
 800192a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001934:	4b13      	ldr	r3, [pc, #76]	; (8001984 <HAL_UART_MspInit+0xb4>)
 8001936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001938:	4a12      	ldr	r2, [pc, #72]	; (8001984 <HAL_UART_MspInit+0xb4>)
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001940:	4b10      	ldr	r3, [pc, #64]	; (8001984 <HAL_UART_MspInit+0xb4>)
 8001942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800194c:	230c      	movs	r3, #12
 800194e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001952:	2302      	movs	r3, #2
 8001954:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195e:	2303      	movs	r3, #3
 8001960:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001964:	2307      	movs	r3, #7
 8001966:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800196e:	4619      	mov	r1, r3
 8001970:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001974:	f000 f9b8 	bl	8001ce8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001978:	bf00      	nop
 800197a:	37b0      	adds	r7, #176	; 0xb0
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40004400 	.word	0x40004400
 8001984:	40021000 	.word	0x40021000

08001988 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001988:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800198c:	f7ff ff5e 	bl	800184c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001990:	480c      	ldr	r0, [pc, #48]	; (80019c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001992:	490d      	ldr	r1, [pc, #52]	; (80019c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001994:	4a0d      	ldr	r2, [pc, #52]	; (80019cc <LoopForever+0xe>)
  movs r3, #0
 8001996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001998:	e002      	b.n	80019a0 <LoopCopyDataInit>

0800199a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800199a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800199c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800199e:	3304      	adds	r3, #4

080019a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a4:	d3f9      	bcc.n	800199a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019a6:	4a0a      	ldr	r2, [pc, #40]	; (80019d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019a8:	4c0a      	ldr	r4, [pc, #40]	; (80019d4 <LoopForever+0x16>)
  movs r3, #0
 80019aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019ac:	e001      	b.n	80019b2 <LoopFillZerobss>

080019ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019b0:	3204      	adds	r2, #4

080019b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b4:	d3fb      	bcc.n	80019ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019b6:	f004 fca1 	bl	80062fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019ba:	f7ff fb57 	bl	800106c <main>

080019be <LoopForever>:

LoopForever:
    b LoopForever
 80019be:	e7fe      	b.n	80019be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80019c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80019cc:	08008434 	.word	0x08008434
  ldr r2, =_sbss
 80019d0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80019d4:	2000084c 	.word	0x2000084c

080019d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019d8:	e7fe      	b.n	80019d8 <ADC1_2_IRQHandler>
	...

080019dc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019e2:	2300      	movs	r3, #0
 80019e4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019e6:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <HAL_Init+0x3c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a0b      	ldr	r2, [pc, #44]	; (8001a18 <HAL_Init+0x3c>)
 80019ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f2:	2003      	movs	r0, #3
 80019f4:	f000 f944 	bl	8001c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019f8:	2000      	movs	r0, #0
 80019fa:	f000 f80f 	bl	8001a1c <HAL_InitTick>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d002      	beq.n	8001a0a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	71fb      	strb	r3, [r7, #7]
 8001a08:	e001      	b.n	8001a0e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a0a:	f7ff fe0b 	bl	8001624 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40022000 	.word	0x40022000

08001a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a24:	2300      	movs	r3, #0
 8001a26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a28:	4b17      	ldr	r3, [pc, #92]	; (8001a88 <HAL_InitTick+0x6c>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d023      	beq.n	8001a78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a30:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <HAL_InitTick+0x70>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <HAL_InitTick+0x6c>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 f941 	bl	8001cce <HAL_SYSTICK_Config>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10f      	bne.n	8001a72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b0f      	cmp	r3, #15
 8001a56:	d809      	bhi.n	8001a6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a60:	f000 f919 	bl	8001c96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a64:	4a0a      	ldr	r2, [pc, #40]	; (8001a90 <HAL_InitTick+0x74>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	e007      	b.n	8001a7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	73fb      	strb	r3, [r7, #15]
 8001a70:	e004      	b.n	8001a7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	73fb      	strb	r3, [r7, #15]
 8001a76:	e001      	b.n	8001a7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000008 	.word	0x20000008
 8001a8c:	20000000 	.word	0x20000000
 8001a90:	20000004 	.word	0x20000004

08001a94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <HAL_IncTick+0x20>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <HAL_IncTick+0x24>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	4a04      	ldr	r2, [pc, #16]	; (8001ab8 <HAL_IncTick+0x24>)
 8001aa6:	6013      	str	r3, [r2, #0]
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	20000008 	.word	0x20000008
 8001ab8:	200006fc 	.word	0x200006fc

08001abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac0:	4b03      	ldr	r3, [pc, #12]	; (8001ad0 <HAL_GetTick+0x14>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	200006fc 	.word	0x200006fc

08001ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001adc:	f7ff ffee 	bl	8001abc <HAL_GetTick>
 8001ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aec:	d005      	beq.n	8001afa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001aee:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <HAL_Delay+0x44>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	461a      	mov	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4413      	add	r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001afa:	bf00      	nop
 8001afc:	f7ff ffde 	bl	8001abc <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d8f7      	bhi.n	8001afc <HAL_Delay+0x28>
  {
  }
}
 8001b0c:	bf00      	nop
 8001b0e:	bf00      	nop
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000008 	.word	0x20000008

08001b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <__NVIC_SetPriorityGrouping+0x44>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b38:	4013      	ands	r3, r2
 8001b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b4e:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <__NVIC_SetPriorityGrouping+0x44>)
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	60d3      	str	r3, [r2, #12]
}
 8001b54:	bf00      	nop
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b68:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <__NVIC_GetPriorityGrouping+0x18>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	0a1b      	lsrs	r3, r3, #8
 8001b6e:	f003 0307 	and.w	r3, r3, #7
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	6039      	str	r1, [r7, #0]
 8001b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	db0a      	blt.n	8001baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	490c      	ldr	r1, [pc, #48]	; (8001bcc <__NVIC_SetPriority+0x4c>)
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	0112      	lsls	r2, r2, #4
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ba8:	e00a      	b.n	8001bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	4908      	ldr	r1, [pc, #32]	; (8001bd0 <__NVIC_SetPriority+0x50>)
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	3b04      	subs	r3, #4
 8001bb8:	0112      	lsls	r2, r2, #4
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	761a      	strb	r2, [r3, #24]
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	e000e100 	.word	0xe000e100
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b089      	sub	sp, #36	; 0x24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f1c3 0307 	rsb	r3, r3, #7
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	bf28      	it	cs
 8001bf2:	2304      	movcs	r3, #4
 8001bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	2b06      	cmp	r3, #6
 8001bfc:	d902      	bls.n	8001c04 <NVIC_EncodePriority+0x30>
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	3b03      	subs	r3, #3
 8001c02:	e000      	b.n	8001c06 <NVIC_EncodePriority+0x32>
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c08:	f04f 32ff 	mov.w	r2, #4294967295
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43da      	mvns	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	401a      	ands	r2, r3
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	fa01 f303 	lsl.w	r3, r1, r3
 8001c26:	43d9      	mvns	r1, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c2c:	4313      	orrs	r3, r2
         );
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3724      	adds	r7, #36	; 0x24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
	...

08001c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c4c:	d301      	bcc.n	8001c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e00f      	b.n	8001c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c52:	4a0a      	ldr	r2, [pc, #40]	; (8001c7c <SysTick_Config+0x40>)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c5a:	210f      	movs	r1, #15
 8001c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c60:	f7ff ff8e 	bl	8001b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c64:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <SysTick_Config+0x40>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c6a:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <SysTick_Config+0x40>)
 8001c6c:	2207      	movs	r2, #7
 8001c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	e000e010 	.word	0xe000e010

08001c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff ff47 	bl	8001b1c <__NVIC_SetPriorityGrouping>
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b086      	sub	sp, #24
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	607a      	str	r2, [r7, #4]
 8001ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca8:	f7ff ff5c 	bl	8001b64 <__NVIC_GetPriorityGrouping>
 8001cac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	68b9      	ldr	r1, [r7, #8]
 8001cb2:	6978      	ldr	r0, [r7, #20]
 8001cb4:	f7ff ff8e 	bl	8001bd4 <NVIC_EncodePriority>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff5d 	bl	8001b80 <__NVIC_SetPriority>
}
 8001cc6:	bf00      	nop
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff ffb0 	bl	8001c3c <SysTick_Config>
 8001cdc:	4603      	mov	r3, r0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b087      	sub	sp, #28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cf6:	e17f      	b.n	8001ff8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	fa01 f303 	lsl.w	r3, r1, r3
 8001d04:	4013      	ands	r3, r2
 8001d06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 8171 	beq.w	8001ff2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 0303 	and.w	r3, r3, #3
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d005      	beq.n	8001d28 <HAL_GPIO_Init+0x40>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d130      	bne.n	8001d8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	2203      	movs	r2, #3
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	68da      	ldr	r2, [r3, #12]
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d5e:	2201      	movs	r2, #1
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43db      	mvns	r3, r3
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	091b      	lsrs	r3, r3, #4
 8001d74:	f003 0201 	and.w	r2, r3, #1
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	2b03      	cmp	r3, #3
 8001d94:	d118      	bne.n	8001dc8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	4013      	ands	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	08db      	lsrs	r3, r3, #3
 8001db2:	f003 0201 	and.w	r2, r3, #1
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	2b03      	cmp	r3, #3
 8001dd2:	d017      	beq.n	8001e04 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	2203      	movs	r2, #3
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	4013      	ands	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d123      	bne.n	8001e58 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	08da      	lsrs	r2, r3, #3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3208      	adds	r2, #8
 8001e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	220f      	movs	r2, #15
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	4013      	ands	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	691a      	ldr	r2, [r3, #16]
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	08da      	lsrs	r2, r3, #3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	3208      	adds	r2, #8
 8001e52:	6939      	ldr	r1, [r7, #16]
 8001e54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	2203      	movs	r2, #3
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 0203 	and.w	r2, r3, #3
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f000 80ac 	beq.w	8001ff2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e9a:	4b5f      	ldr	r3, [pc, #380]	; (8002018 <HAL_GPIO_Init+0x330>)
 8001e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e9e:	4a5e      	ldr	r2, [pc, #376]	; (8002018 <HAL_GPIO_Init+0x330>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ea6:	4b5c      	ldr	r3, [pc, #368]	; (8002018 <HAL_GPIO_Init+0x330>)
 8001ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	60bb      	str	r3, [r7, #8]
 8001eb0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001eb2:	4a5a      	ldr	r2, [pc, #360]	; (800201c <HAL_GPIO_Init+0x334>)
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	089b      	lsrs	r3, r3, #2
 8001eb8:	3302      	adds	r3, #2
 8001eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	220f      	movs	r2, #15
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001edc:	d025      	beq.n	8001f2a <HAL_GPIO_Init+0x242>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a4f      	ldr	r2, [pc, #316]	; (8002020 <HAL_GPIO_Init+0x338>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d01f      	beq.n	8001f26 <HAL_GPIO_Init+0x23e>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a4e      	ldr	r2, [pc, #312]	; (8002024 <HAL_GPIO_Init+0x33c>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d019      	beq.n	8001f22 <HAL_GPIO_Init+0x23a>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a4d      	ldr	r2, [pc, #308]	; (8002028 <HAL_GPIO_Init+0x340>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d013      	beq.n	8001f1e <HAL_GPIO_Init+0x236>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a4c      	ldr	r2, [pc, #304]	; (800202c <HAL_GPIO_Init+0x344>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d00d      	beq.n	8001f1a <HAL_GPIO_Init+0x232>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a4b      	ldr	r2, [pc, #300]	; (8002030 <HAL_GPIO_Init+0x348>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d007      	beq.n	8001f16 <HAL_GPIO_Init+0x22e>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a4a      	ldr	r2, [pc, #296]	; (8002034 <HAL_GPIO_Init+0x34c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d101      	bne.n	8001f12 <HAL_GPIO_Init+0x22a>
 8001f0e:	2306      	movs	r3, #6
 8001f10:	e00c      	b.n	8001f2c <HAL_GPIO_Init+0x244>
 8001f12:	2307      	movs	r3, #7
 8001f14:	e00a      	b.n	8001f2c <HAL_GPIO_Init+0x244>
 8001f16:	2305      	movs	r3, #5
 8001f18:	e008      	b.n	8001f2c <HAL_GPIO_Init+0x244>
 8001f1a:	2304      	movs	r3, #4
 8001f1c:	e006      	b.n	8001f2c <HAL_GPIO_Init+0x244>
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e004      	b.n	8001f2c <HAL_GPIO_Init+0x244>
 8001f22:	2302      	movs	r3, #2
 8001f24:	e002      	b.n	8001f2c <HAL_GPIO_Init+0x244>
 8001f26:	2301      	movs	r3, #1
 8001f28:	e000      	b.n	8001f2c <HAL_GPIO_Init+0x244>
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	f002 0203 	and.w	r2, r2, #3
 8001f32:	0092      	lsls	r2, r2, #2
 8001f34:	4093      	lsls	r3, r2
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f3c:	4937      	ldr	r1, [pc, #220]	; (800201c <HAL_GPIO_Init+0x334>)
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	089b      	lsrs	r3, r3, #2
 8001f42:	3302      	adds	r3, #2
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f4a:	4b3b      	ldr	r3, [pc, #236]	; (8002038 <HAL_GPIO_Init+0x350>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	43db      	mvns	r3, r3
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4013      	ands	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f6e:	4a32      	ldr	r2, [pc, #200]	; (8002038 <HAL_GPIO_Init+0x350>)
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f74:	4b30      	ldr	r3, [pc, #192]	; (8002038 <HAL_GPIO_Init+0x350>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4013      	ands	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f98:	4a27      	ldr	r2, [pc, #156]	; (8002038 <HAL_GPIO_Init+0x350>)
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f9e:	4b26      	ldr	r3, [pc, #152]	; (8002038 <HAL_GPIO_Init+0x350>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4013      	ands	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fc2:	4a1d      	ldr	r2, [pc, #116]	; (8002038 <HAL_GPIO_Init+0x350>)
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001fc8:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <HAL_GPIO_Init+0x350>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fec:	4a12      	ldr	r2, [pc, #72]	; (8002038 <HAL_GPIO_Init+0x350>)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	f47f ae78 	bne.w	8001cf8 <HAL_GPIO_Init+0x10>
  }
}
 8002008:	bf00      	nop
 800200a:	bf00      	nop
 800200c:	371c      	adds	r7, #28
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	40021000 	.word	0x40021000
 800201c:	40010000 	.word	0x40010000
 8002020:	48000400 	.word	0x48000400
 8002024:	48000800 	.word	0x48000800
 8002028:	48000c00 	.word	0x48000c00
 800202c:	48001000 	.word	0x48001000
 8002030:	48001400 	.word	0x48001400
 8002034:	48001800 	.word	0x48001800
 8002038:	40010400 	.word	0x40010400

0800203c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e08d      	b.n	800216a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d106      	bne.n	8002068 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7fe ffa4 	bl	8000fb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2224      	movs	r2, #36	; 0x24
 800206c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 0201 	bic.w	r2, r2, #1
 800207e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800208c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800209c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d107      	bne.n	80020b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	e006      	b.n	80020c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80020c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d108      	bne.n	80020de <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020da:	605a      	str	r2, [r3, #4]
 80020dc:	e007      	b.n	80020ee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002100:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68da      	ldr	r2, [r3, #12]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002110:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691a      	ldr	r2, [r3, #16]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69d9      	ldr	r1, [r3, #28]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a1a      	ldr	r2, [r3, #32]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0201 	orr.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2220      	movs	r2, #32
 8002156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b088      	sub	sp, #32
 8002178:	af02      	add	r7, sp, #8
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	4608      	mov	r0, r1
 800217e:	4611      	mov	r1, r2
 8002180:	461a      	mov	r2, r3
 8002182:	4603      	mov	r3, r0
 8002184:	817b      	strh	r3, [r7, #10]
 8002186:	460b      	mov	r3, r1
 8002188:	813b      	strh	r3, [r7, #8]
 800218a:	4613      	mov	r3, r2
 800218c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b20      	cmp	r3, #32
 8002198:	f040 80f9 	bne.w	800238e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800219c:	6a3b      	ldr	r3, [r7, #32]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d002      	beq.n	80021a8 <HAL_I2C_Mem_Write+0x34>
 80021a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d105      	bne.n	80021b4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021ae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e0ed      	b.n	8002390 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d101      	bne.n	80021c2 <HAL_I2C_Mem_Write+0x4e>
 80021be:	2302      	movs	r3, #2
 80021c0:	e0e6      	b.n	8002390 <HAL_I2C_Mem_Write+0x21c>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021ca:	f7ff fc77 	bl	8001abc <HAL_GetTick>
 80021ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	2319      	movs	r3, #25
 80021d6:	2201      	movs	r2, #1
 80021d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f000 fac3 	bl	8002768 <I2C_WaitOnFlagUntilTimeout>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e0d1      	b.n	8002390 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2221      	movs	r2, #33	; 0x21
 80021f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2240      	movs	r2, #64	; 0x40
 80021f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6a3a      	ldr	r2, [r7, #32]
 8002206:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800220c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002214:	88f8      	ldrh	r0, [r7, #6]
 8002216:	893a      	ldrh	r2, [r7, #8]
 8002218:	8979      	ldrh	r1, [r7, #10]
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	9301      	str	r3, [sp, #4]
 800221e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	4603      	mov	r3, r0
 8002224:	68f8      	ldr	r0, [r7, #12]
 8002226:	f000 f9d3 	bl	80025d0 <I2C_RequestMemoryWrite>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d005      	beq.n	800223c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e0a9      	b.n	8002390 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002240:	b29b      	uxth	r3, r3
 8002242:	2bff      	cmp	r3, #255	; 0xff
 8002244:	d90e      	bls.n	8002264 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	22ff      	movs	r2, #255	; 0xff
 800224a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002250:	b2da      	uxtb	r2, r3
 8002252:	8979      	ldrh	r1, [r7, #10]
 8002254:	2300      	movs	r3, #0
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f000 fc47 	bl	8002af0 <I2C_TransferConfig>
 8002262:	e00f      	b.n	8002284 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002268:	b29a      	uxth	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002272:	b2da      	uxtb	r2, r3
 8002274:	8979      	ldrh	r1, [r7, #10]
 8002276:	2300      	movs	r3, #0
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 fc36 	bl	8002af0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f000 fac6 	bl	800281a <I2C_WaitOnTXISFlagUntilTimeout>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e07b      	b.n	8002390 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	781a      	ldrb	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	1c5a      	adds	r2, r3, #1
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	3b01      	subs	r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c0:	3b01      	subs	r3, #1
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d034      	beq.n	800233c <HAL_I2C_Mem_Write+0x1c8>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d130      	bne.n	800233c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e0:	2200      	movs	r2, #0
 80022e2:	2180      	movs	r1, #128	; 0x80
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f000 fa3f 	bl	8002768 <I2C_WaitOnFlagUntilTimeout>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e04d      	b.n	8002390 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	2bff      	cmp	r3, #255	; 0xff
 80022fc:	d90e      	bls.n	800231c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	22ff      	movs	r2, #255	; 0xff
 8002302:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002308:	b2da      	uxtb	r2, r3
 800230a:	8979      	ldrh	r1, [r7, #10]
 800230c:	2300      	movs	r3, #0
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f000 fbeb 	bl	8002af0 <I2C_TransferConfig>
 800231a:	e00f      	b.n	800233c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002320:	b29a      	uxth	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232a:	b2da      	uxtb	r2, r3
 800232c:	8979      	ldrh	r1, [r7, #10]
 800232e:	2300      	movs	r3, #0
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 fbda 	bl	8002af0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002340:	b29b      	uxth	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d19e      	bne.n	8002284 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 faac 	bl	80028a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e01a      	b.n	8002390 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2220      	movs	r2, #32
 8002360:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6859      	ldr	r1, [r3, #4]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	4b0a      	ldr	r3, [pc, #40]	; (8002398 <HAL_I2C_Mem_Write+0x224>)
 800236e:	400b      	ands	r3, r1
 8002370:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2220      	movs	r2, #32
 8002376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	e000      	b.n	8002390 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800238e:	2302      	movs	r3, #2
  }
}
 8002390:	4618      	mov	r0, r3
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	fe00e800 	.word	0xfe00e800

0800239c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b088      	sub	sp, #32
 80023a0:	af02      	add	r7, sp, #8
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	4608      	mov	r0, r1
 80023a6:	4611      	mov	r1, r2
 80023a8:	461a      	mov	r2, r3
 80023aa:	4603      	mov	r3, r0
 80023ac:	817b      	strh	r3, [r7, #10]
 80023ae:	460b      	mov	r3, r1
 80023b0:	813b      	strh	r3, [r7, #8]
 80023b2:	4613      	mov	r3, r2
 80023b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b20      	cmp	r3, #32
 80023c0:	f040 80fd 	bne.w	80025be <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d002      	beq.n	80023d0 <HAL_I2C_Mem_Read+0x34>
 80023ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d105      	bne.n	80023dc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023d6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e0f1      	b.n	80025c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d101      	bne.n	80023ea <HAL_I2C_Mem_Read+0x4e>
 80023e6:	2302      	movs	r3, #2
 80023e8:	e0ea      	b.n	80025c0 <HAL_I2C_Mem_Read+0x224>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023f2:	f7ff fb63 	bl	8001abc <HAL_GetTick>
 80023f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	2319      	movs	r3, #25
 80023fe:	2201      	movs	r2, #1
 8002400:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f000 f9af 	bl	8002768 <I2C_WaitOnFlagUntilTimeout>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e0d5      	b.n	80025c0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2222      	movs	r2, #34	; 0x22
 8002418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2240      	movs	r2, #64	; 0x40
 8002420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6a3a      	ldr	r2, [r7, #32]
 800242e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002434:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800243c:	88f8      	ldrh	r0, [r7, #6]
 800243e:	893a      	ldrh	r2, [r7, #8]
 8002440:	8979      	ldrh	r1, [r7, #10]
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	9301      	str	r3, [sp, #4]
 8002446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	4603      	mov	r3, r0
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f000 f913 	bl	8002678 <I2C_RequestMemoryRead>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d005      	beq.n	8002464 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e0ad      	b.n	80025c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002468:	b29b      	uxth	r3, r3
 800246a:	2bff      	cmp	r3, #255	; 0xff
 800246c:	d90e      	bls.n	800248c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2201      	movs	r2, #1
 8002472:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002478:	b2da      	uxtb	r2, r3
 800247a:	8979      	ldrh	r1, [r7, #10]
 800247c:	4b52      	ldr	r3, [pc, #328]	; (80025c8 <HAL_I2C_Mem_Read+0x22c>)
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f000 fb33 	bl	8002af0 <I2C_TransferConfig>
 800248a:	e00f      	b.n	80024ac <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002490:	b29a      	uxth	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800249a:	b2da      	uxtb	r2, r3
 800249c:	8979      	ldrh	r1, [r7, #10]
 800249e:	4b4a      	ldr	r3, [pc, #296]	; (80025c8 <HAL_I2C_Mem_Read+0x22c>)
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 fb22 	bl	8002af0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b2:	2200      	movs	r2, #0
 80024b4:	2104      	movs	r1, #4
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 f956 	bl	8002768 <I2C_WaitOnFlagUntilTimeout>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e07c      	b.n	80025c0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	1c5a      	adds	r2, r3, #1
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e2:	3b01      	subs	r3, #1
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d034      	beq.n	800256c <HAL_I2C_Mem_Read+0x1d0>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002506:	2b00      	cmp	r3, #0
 8002508:	d130      	bne.n	800256c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002510:	2200      	movs	r2, #0
 8002512:	2180      	movs	r1, #128	; 0x80
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 f927 	bl	8002768 <I2C_WaitOnFlagUntilTimeout>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e04d      	b.n	80025c0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002528:	b29b      	uxth	r3, r3
 800252a:	2bff      	cmp	r3, #255	; 0xff
 800252c:	d90e      	bls.n	800254c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2201      	movs	r2, #1
 8002532:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002538:	b2da      	uxtb	r2, r3
 800253a:	8979      	ldrh	r1, [r7, #10]
 800253c:	2300      	movs	r3, #0
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 fad3 	bl	8002af0 <I2C_TransferConfig>
 800254a:	e00f      	b.n	800256c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002550:	b29a      	uxth	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800255a:	b2da      	uxtb	r2, r3
 800255c:	8979      	ldrh	r1, [r7, #10]
 800255e:	2300      	movs	r3, #0
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 fac2 	bl	8002af0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002570:	b29b      	uxth	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d19a      	bne.n	80024ac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 f994 	bl	80028a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e01a      	b.n	80025c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2220      	movs	r2, #32
 8002590:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6859      	ldr	r1, [r3, #4]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <HAL_I2C_Mem_Read+0x230>)
 800259e:	400b      	ands	r3, r1
 80025a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2220      	movs	r2, #32
 80025a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	e000      	b.n	80025c0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80025be:	2302      	movs	r3, #2
  }
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	80002400 	.word	0x80002400
 80025cc:	fe00e800 	.word	0xfe00e800

080025d0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af02      	add	r7, sp, #8
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	4608      	mov	r0, r1
 80025da:	4611      	mov	r1, r2
 80025dc:	461a      	mov	r2, r3
 80025de:	4603      	mov	r3, r0
 80025e0:	817b      	strh	r3, [r7, #10]
 80025e2:	460b      	mov	r3, r1
 80025e4:	813b      	strh	r3, [r7, #8]
 80025e6:	4613      	mov	r3, r2
 80025e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80025ea:	88fb      	ldrh	r3, [r7, #6]
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	8979      	ldrh	r1, [r7, #10]
 80025f0:	4b20      	ldr	r3, [pc, #128]	; (8002674 <I2C_RequestMemoryWrite+0xa4>)
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f000 fa79 	bl	8002af0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025fe:	69fa      	ldr	r2, [r7, #28]
 8002600:	69b9      	ldr	r1, [r7, #24]
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 f909 	bl	800281a <I2C_WaitOnTXISFlagUntilTimeout>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e02c      	b.n	800266c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002612:	88fb      	ldrh	r3, [r7, #6]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d105      	bne.n	8002624 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002618:	893b      	ldrh	r3, [r7, #8]
 800261a:	b2da      	uxtb	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	629a      	str	r2, [r3, #40]	; 0x28
 8002622:	e015      	b.n	8002650 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002624:	893b      	ldrh	r3, [r7, #8]
 8002626:	0a1b      	lsrs	r3, r3, #8
 8002628:	b29b      	uxth	r3, r3
 800262a:	b2da      	uxtb	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002632:	69fa      	ldr	r2, [r7, #28]
 8002634:	69b9      	ldr	r1, [r7, #24]
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 f8ef 	bl	800281a <I2C_WaitOnTXISFlagUntilTimeout>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e012      	b.n	800266c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002646:	893b      	ldrh	r3, [r7, #8]
 8002648:	b2da      	uxtb	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	2200      	movs	r2, #0
 8002658:	2180      	movs	r1, #128	; 0x80
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f000 f884 	bl	8002768 <I2C_WaitOnFlagUntilTimeout>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	80002000 	.word	0x80002000

08002678 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af02      	add	r7, sp, #8
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	4608      	mov	r0, r1
 8002682:	4611      	mov	r1, r2
 8002684:	461a      	mov	r2, r3
 8002686:	4603      	mov	r3, r0
 8002688:	817b      	strh	r3, [r7, #10]
 800268a:	460b      	mov	r3, r1
 800268c:	813b      	strh	r3, [r7, #8]
 800268e:	4613      	mov	r3, r2
 8002690:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002692:	88fb      	ldrh	r3, [r7, #6]
 8002694:	b2da      	uxtb	r2, r3
 8002696:	8979      	ldrh	r1, [r7, #10]
 8002698:	4b20      	ldr	r3, [pc, #128]	; (800271c <I2C_RequestMemoryRead+0xa4>)
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	2300      	movs	r3, #0
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 fa26 	bl	8002af0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026a4:	69fa      	ldr	r2, [r7, #28]
 80026a6:	69b9      	ldr	r1, [r7, #24]
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f000 f8b6 	bl	800281a <I2C_WaitOnTXISFlagUntilTimeout>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e02c      	b.n	8002712 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026b8:	88fb      	ldrh	r3, [r7, #6]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d105      	bne.n	80026ca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80026be:	893b      	ldrh	r3, [r7, #8]
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	629a      	str	r2, [r3, #40]	; 0x28
 80026c8:	e015      	b.n	80026f6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80026ca:	893b      	ldrh	r3, [r7, #8]
 80026cc:	0a1b      	lsrs	r3, r3, #8
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026d8:	69fa      	ldr	r2, [r7, #28]
 80026da:	69b9      	ldr	r1, [r7, #24]
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f000 f89c 	bl	800281a <I2C_WaitOnTXISFlagUntilTimeout>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e012      	b.n	8002712 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80026ec:	893b      	ldrh	r3, [r7, #8]
 80026ee:	b2da      	uxtb	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	2200      	movs	r2, #0
 80026fe:	2140      	movs	r1, #64	; 0x40
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f000 f831 	bl	8002768 <I2C_WaitOnFlagUntilTimeout>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e000      	b.n	8002712 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	80002000 	.word	0x80002000

08002720 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b02      	cmp	r3, #2
 8002734:	d103      	bne.n	800273e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2200      	movs	r2, #0
 800273c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b01      	cmp	r3, #1
 800274a:	d007      	beq.n	800275c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	699a      	ldr	r2, [r3, #24]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0201 	orr.w	r2, r2, #1
 800275a:	619a      	str	r2, [r3, #24]
  }
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	603b      	str	r3, [r7, #0]
 8002774:	4613      	mov	r3, r2
 8002776:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002778:	e03b      	b.n	80027f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	6839      	ldr	r1, [r7, #0]
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 f8d6 	bl	8002930 <I2C_IsErrorOccurred>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e041      	b.n	8002812 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002794:	d02d      	beq.n	80027f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002796:	f7ff f991 	bl	8001abc <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d302      	bcc.n	80027ac <I2C_WaitOnFlagUntilTimeout+0x44>
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d122      	bne.n	80027f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	699a      	ldr	r2, [r3, #24]
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	4013      	ands	r3, r2
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	bf0c      	ite	eq
 80027bc:	2301      	moveq	r3, #1
 80027be:	2300      	movne	r3, #0
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	461a      	mov	r2, r3
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d113      	bne.n	80027f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ce:	f043 0220 	orr.w	r2, r3, #32
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2220      	movs	r2, #32
 80027da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e00f      	b.n	8002812 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	699a      	ldr	r2, [r3, #24]
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	4013      	ands	r3, r2
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	429a      	cmp	r2, r3
 8002800:	bf0c      	ite	eq
 8002802:	2301      	moveq	r3, #1
 8002804:	2300      	movne	r3, #0
 8002806:	b2db      	uxtb	r3, r3
 8002808:	461a      	mov	r2, r3
 800280a:	79fb      	ldrb	r3, [r7, #7]
 800280c:	429a      	cmp	r2, r3
 800280e:	d0b4      	beq.n	800277a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b084      	sub	sp, #16
 800281e:	af00      	add	r7, sp, #0
 8002820:	60f8      	str	r0, [r7, #12]
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002826:	e033      	b.n	8002890 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	68b9      	ldr	r1, [r7, #8]
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f000 f87f 	bl	8002930 <I2C_IsErrorOccurred>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e031      	b.n	80028a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002842:	d025      	beq.n	8002890 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002844:	f7ff f93a 	bl	8001abc <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	429a      	cmp	r2, r3
 8002852:	d302      	bcc.n	800285a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d11a      	bne.n	8002890 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b02      	cmp	r3, #2
 8002866:	d013      	beq.n	8002890 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286c:	f043 0220 	orr.w	r2, r3, #32
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2220      	movs	r2, #32
 8002878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e007      	b.n	80028a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b02      	cmp	r3, #2
 800289c:	d1c4      	bne.n	8002828 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028b4:	e02f      	b.n	8002916 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	68b9      	ldr	r1, [r7, #8]
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f000 f838 	bl	8002930 <I2C_IsErrorOccurred>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e02d      	b.n	8002926 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ca:	f7ff f8f7 	bl	8001abc <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	68ba      	ldr	r2, [r7, #8]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d302      	bcc.n	80028e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d11a      	bne.n	8002916 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	f003 0320 	and.w	r3, r3, #32
 80028ea:	2b20      	cmp	r3, #32
 80028ec:	d013      	beq.n	8002916 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f2:	f043 0220 	orr.w	r2, r3, #32
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2220      	movs	r2, #32
 80028fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e007      	b.n	8002926 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	f003 0320 	and.w	r3, r3, #32
 8002920:	2b20      	cmp	r3, #32
 8002922:	d1c8      	bne.n	80028b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
	...

08002930 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b08a      	sub	sp, #40	; 0x28
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800293c:	2300      	movs	r3, #0
 800293e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800294a:	2300      	movs	r3, #0
 800294c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	f003 0310 	and.w	r3, r3, #16
 8002958:	2b00      	cmp	r3, #0
 800295a:	d068      	beq.n	8002a2e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2210      	movs	r2, #16
 8002962:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002964:	e049      	b.n	80029fa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296c:	d045      	beq.n	80029fa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800296e:	f7ff f8a5 	bl	8001abc <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	68ba      	ldr	r2, [r7, #8]
 800297a:	429a      	cmp	r2, r3
 800297c:	d302      	bcc.n	8002984 <I2C_IsErrorOccurred+0x54>
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d13a      	bne.n	80029fa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800298e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002996:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029a6:	d121      	bne.n	80029ec <I2C_IsErrorOccurred+0xbc>
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029ae:	d01d      	beq.n	80029ec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80029b0:	7cfb      	ldrb	r3, [r7, #19]
 80029b2:	2b20      	cmp	r3, #32
 80029b4:	d01a      	beq.n	80029ec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029c4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80029c6:	f7ff f879 	bl	8001abc <HAL_GetTick>
 80029ca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029cc:	e00e      	b.n	80029ec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80029ce:	f7ff f875 	bl	8001abc <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b19      	cmp	r3, #25
 80029da:	d907      	bls.n	80029ec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	f043 0320 	orr.w	r3, r3, #32
 80029e2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80029ea:	e006      	b.n	80029fa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	f003 0320 	and.w	r3, r3, #32
 80029f6:	2b20      	cmp	r3, #32
 80029f8:	d1e9      	bne.n	80029ce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	f003 0320 	and.w	r3, r3, #32
 8002a04:	2b20      	cmp	r3, #32
 8002a06:	d003      	beq.n	8002a10 <I2C_IsErrorOccurred+0xe0>
 8002a08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0aa      	beq.n	8002966 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002a10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d103      	bne.n	8002a20 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2220      	movs	r2, #32
 8002a1e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002a20:	6a3b      	ldr	r3, [r7, #32]
 8002a22:	f043 0304 	orr.w	r3, r3, #4
 8002a26:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00b      	beq.n	8002a58 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002a40:	6a3b      	ldr	r3, [r7, #32]
 8002a42:	f043 0301 	orr.w	r3, r3, #1
 8002a46:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00b      	beq.n	8002a7a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002a62:	6a3b      	ldr	r3, [r7, #32]
 8002a64:	f043 0308 	orr.w	r3, r3, #8
 8002a68:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a72:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00b      	beq.n	8002a9c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a84:	6a3b      	ldr	r3, [r7, #32]
 8002a86:	f043 0302 	orr.w	r3, r3, #2
 8002a8a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d01c      	beq.n	8002ade <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f7ff fe3b 	bl	8002720 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6859      	ldr	r1, [r3, #4]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	4b0d      	ldr	r3, [pc, #52]	; (8002aec <I2C_IsErrorOccurred+0x1bc>)
 8002ab6:	400b      	ands	r3, r1
 8002ab8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002abe:	6a3b      	ldr	r3, [r7, #32]
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2220      	movs	r2, #32
 8002aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002ade:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3728      	adds	r7, #40	; 0x28
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	fe00e800 	.word	0xfe00e800

08002af0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b087      	sub	sp, #28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	607b      	str	r3, [r7, #4]
 8002afa:	460b      	mov	r3, r1
 8002afc:	817b      	strh	r3, [r7, #10]
 8002afe:	4613      	mov	r3, r2
 8002b00:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b02:	897b      	ldrh	r3, [r7, #10]
 8002b04:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b08:	7a7b      	ldrb	r3, [r7, #9]
 8002b0a:	041b      	lsls	r3, r3, #16
 8002b0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b10:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b1e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	0d5b      	lsrs	r3, r3, #21
 8002b2a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002b2e:	4b08      	ldr	r3, [pc, #32]	; (8002b50 <I2C_TransferConfig+0x60>)
 8002b30:	430b      	orrs	r3, r1
 8002b32:	43db      	mvns	r3, r3
 8002b34:	ea02 0103 	and.w	r1, r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002b42:	bf00      	nop
 8002b44:	371c      	adds	r7, #28
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	03ff63ff 	.word	0x03ff63ff

08002b54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b20      	cmp	r3, #32
 8002b68:	d138      	bne.n	8002bdc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d101      	bne.n	8002b78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b74:	2302      	movs	r3, #2
 8002b76:	e032      	b.n	8002bde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2224      	movs	r2, #36	; 0x24
 8002b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0201 	bic.w	r2, r2, #1
 8002b96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ba6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6819      	ldr	r1, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0201 	orr.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	e000      	b.n	8002bde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002bdc:	2302      	movs	r3, #2
  }
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b085      	sub	sp, #20
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
 8002bf2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b20      	cmp	r3, #32
 8002bfe:	d139      	bne.n	8002c74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d101      	bne.n	8002c0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	e033      	b.n	8002c76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2224      	movs	r2, #36	; 0x24
 8002c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 0201 	bic.w	r2, r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	021b      	lsls	r3, r3, #8
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0201 	orr.w	r2, r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2220      	movs	r2, #32
 8002c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c70:	2300      	movs	r3, #0
 8002c72:	e000      	b.n	8002c76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c74:	2302      	movs	r3, #2
  }
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3714      	adds	r7, #20
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
	...

08002c84 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c88:	4b04      	ldr	r3, [pc, #16]	; (8002c9c <HAL_PWREx_GetVoltageRange+0x18>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40007000 	.word	0x40007000

08002ca0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cae:	d130      	bne.n	8002d12 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cb0:	4b23      	ldr	r3, [pc, #140]	; (8002d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cbc:	d038      	beq.n	8002d30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cbe:	4b20      	ldr	r3, [pc, #128]	; (8002d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cc6:	4a1e      	ldr	r2, [pc, #120]	; (8002d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ccc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cce:	4b1d      	ldr	r3, [pc, #116]	; (8002d44 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2232      	movs	r2, #50	; 0x32
 8002cd4:	fb02 f303 	mul.w	r3, r2, r3
 8002cd8:	4a1b      	ldr	r2, [pc, #108]	; (8002d48 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002cda:	fba2 2303 	umull	r2, r3, r2, r3
 8002cde:	0c9b      	lsrs	r3, r3, #18
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ce4:	e002      	b.n	8002cec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cec:	4b14      	ldr	r3, [pc, #80]	; (8002d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf8:	d102      	bne.n	8002d00 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1f2      	bne.n	8002ce6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d00:	4b0f      	ldr	r3, [pc, #60]	; (8002d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d0c:	d110      	bne.n	8002d30 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e00f      	b.n	8002d32 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d12:	4b0b      	ldr	r3, [pc, #44]	; (8002d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d1e:	d007      	beq.n	8002d30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d20:	4b07      	ldr	r3, [pc, #28]	; (8002d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d28:	4a05      	ldr	r2, [pc, #20]	; (8002d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d2e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40007000 	.word	0x40007000
 8002d44:	20000000 	.word	0x20000000
 8002d48:	431bde83 	.word	0x431bde83

08002d4c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b088      	sub	sp, #32
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e3ca      	b.n	80034f4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d5e:	4b97      	ldr	r3, [pc, #604]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 030c 	and.w	r3, r3, #12
 8002d66:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d68:	4b94      	ldr	r3, [pc, #592]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	f003 0303 	and.w	r3, r3, #3
 8002d70:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0310 	and.w	r3, r3, #16
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 80e4 	beq.w	8002f48 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d007      	beq.n	8002d96 <HAL_RCC_OscConfig+0x4a>
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	2b0c      	cmp	r3, #12
 8002d8a:	f040 808b 	bne.w	8002ea4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	f040 8087 	bne.w	8002ea4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d96:	4b89      	ldr	r3, [pc, #548]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d005      	beq.n	8002dae <HAL_RCC_OscConfig+0x62>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e3a2      	b.n	80034f4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a1a      	ldr	r2, [r3, #32]
 8002db2:	4b82      	ldr	r3, [pc, #520]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0308 	and.w	r3, r3, #8
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d004      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x7c>
 8002dbe:	4b7f      	ldr	r3, [pc, #508]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dc6:	e005      	b.n	8002dd4 <HAL_RCC_OscConfig+0x88>
 8002dc8:	4b7c      	ldr	r3, [pc, #496]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dce:	091b      	lsrs	r3, r3, #4
 8002dd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d223      	bcs.n	8002e20 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 fd55 	bl	800388c <RCC_SetFlashLatencyFromMSIRange>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e383      	b.n	80034f4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dec:	4b73      	ldr	r3, [pc, #460]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a72      	ldr	r2, [pc, #456]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002df2:	f043 0308 	orr.w	r3, r3, #8
 8002df6:	6013      	str	r3, [r2, #0]
 8002df8:	4b70      	ldr	r3, [pc, #448]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	496d      	ldr	r1, [pc, #436]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e0a:	4b6c      	ldr	r3, [pc, #432]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	021b      	lsls	r3, r3, #8
 8002e18:	4968      	ldr	r1, [pc, #416]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	604b      	str	r3, [r1, #4]
 8002e1e:	e025      	b.n	8002e6c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e20:	4b66      	ldr	r3, [pc, #408]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a65      	ldr	r2, [pc, #404]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002e26:	f043 0308 	orr.w	r3, r3, #8
 8002e2a:	6013      	str	r3, [r2, #0]
 8002e2c:	4b63      	ldr	r3, [pc, #396]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	4960      	ldr	r1, [pc, #384]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e3e:	4b5f      	ldr	r3, [pc, #380]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	021b      	lsls	r3, r3, #8
 8002e4c:	495b      	ldr	r1, [pc, #364]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d109      	bne.n	8002e6c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f000 fd15 	bl	800388c <RCC_SetFlashLatencyFromMSIRange>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e343      	b.n	80034f4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e6c:	f000 fc4a 	bl	8003704 <HAL_RCC_GetSysClockFreq>
 8002e70:	4602      	mov	r2, r0
 8002e72:	4b52      	ldr	r3, [pc, #328]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	091b      	lsrs	r3, r3, #4
 8002e78:	f003 030f 	and.w	r3, r3, #15
 8002e7c:	4950      	ldr	r1, [pc, #320]	; (8002fc0 <HAL_RCC_OscConfig+0x274>)
 8002e7e:	5ccb      	ldrb	r3, [r1, r3]
 8002e80:	f003 031f 	and.w	r3, r3, #31
 8002e84:	fa22 f303 	lsr.w	r3, r2, r3
 8002e88:	4a4e      	ldr	r2, [pc, #312]	; (8002fc4 <HAL_RCC_OscConfig+0x278>)
 8002e8a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e8c:	4b4e      	ldr	r3, [pc, #312]	; (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7fe fdc3 	bl	8001a1c <HAL_InitTick>
 8002e96:	4603      	mov	r3, r0
 8002e98:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d052      	beq.n	8002f46 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
 8002ea2:	e327      	b.n	80034f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d032      	beq.n	8002f12 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002eac:	4b43      	ldr	r3, [pc, #268]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a42      	ldr	r2, [pc, #264]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002eb2:	f043 0301 	orr.w	r3, r3, #1
 8002eb6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002eb8:	f7fe fe00 	bl	8001abc <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ec0:	f7fe fdfc 	bl	8001abc <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e310      	b.n	80034f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ed2:	4b3a      	ldr	r3, [pc, #232]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0f0      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ede:	4b37      	ldr	r3, [pc, #220]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a36      	ldr	r2, [pc, #216]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002ee4:	f043 0308 	orr.w	r3, r3, #8
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	4b34      	ldr	r3, [pc, #208]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	4931      	ldr	r1, [pc, #196]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002efc:	4b2f      	ldr	r3, [pc, #188]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	021b      	lsls	r3, r3, #8
 8002f0a:	492c      	ldr	r1, [pc, #176]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	604b      	str	r3, [r1, #4]
 8002f10:	e01a      	b.n	8002f48 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f12:	4b2a      	ldr	r3, [pc, #168]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a29      	ldr	r2, [pc, #164]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002f18:	f023 0301 	bic.w	r3, r3, #1
 8002f1c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f1e:	f7fe fdcd 	bl	8001abc <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f26:	f7fe fdc9 	bl	8001abc <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e2dd      	b.n	80034f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f38:	4b20      	ldr	r3, [pc, #128]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1f0      	bne.n	8002f26 <HAL_RCC_OscConfig+0x1da>
 8002f44:	e000      	b.n	8002f48 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f46:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d074      	beq.n	800303e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	2b08      	cmp	r3, #8
 8002f58:	d005      	beq.n	8002f66 <HAL_RCC_OscConfig+0x21a>
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	2b0c      	cmp	r3, #12
 8002f5e:	d10e      	bne.n	8002f7e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	2b03      	cmp	r3, #3
 8002f64:	d10b      	bne.n	8002f7e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f66:	4b15      	ldr	r3, [pc, #84]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d064      	beq.n	800303c <HAL_RCC_OscConfig+0x2f0>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d160      	bne.n	800303c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e2ba      	b.n	80034f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f86:	d106      	bne.n	8002f96 <HAL_RCC_OscConfig+0x24a>
 8002f88:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a0b      	ldr	r2, [pc, #44]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002f8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f92:	6013      	str	r3, [r2, #0]
 8002f94:	e026      	b.n	8002fe4 <HAL_RCC_OscConfig+0x298>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f9e:	d115      	bne.n	8002fcc <HAL_RCC_OscConfig+0x280>
 8002fa0:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a05      	ldr	r2, [pc, #20]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002fa6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002faa:	6013      	str	r3, [r2, #0]
 8002fac:	4b03      	ldr	r3, [pc, #12]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a02      	ldr	r2, [pc, #8]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb6:	6013      	str	r3, [r2, #0]
 8002fb8:	e014      	b.n	8002fe4 <HAL_RCC_OscConfig+0x298>
 8002fba:	bf00      	nop
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	08008068 	.word	0x08008068
 8002fc4:	20000000 	.word	0x20000000
 8002fc8:	20000004 	.word	0x20000004
 8002fcc:	4ba0      	ldr	r3, [pc, #640]	; (8003250 <HAL_RCC_OscConfig+0x504>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a9f      	ldr	r2, [pc, #636]	; (8003250 <HAL_RCC_OscConfig+0x504>)
 8002fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fd6:	6013      	str	r3, [r2, #0]
 8002fd8:	4b9d      	ldr	r3, [pc, #628]	; (8003250 <HAL_RCC_OscConfig+0x504>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a9c      	ldr	r2, [pc, #624]	; (8003250 <HAL_RCC_OscConfig+0x504>)
 8002fde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fe2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d013      	beq.n	8003014 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fec:	f7fe fd66 	bl	8001abc <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ff4:	f7fe fd62 	bl	8001abc <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b64      	cmp	r3, #100	; 0x64
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e276      	b.n	80034f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003006:	4b92      	ldr	r3, [pc, #584]	; (8003250 <HAL_RCC_OscConfig+0x504>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0f0      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x2a8>
 8003012:	e014      	b.n	800303e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003014:	f7fe fd52 	bl	8001abc <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800301c:	f7fe fd4e 	bl	8001abc <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b64      	cmp	r3, #100	; 0x64
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e262      	b.n	80034f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800302e:	4b88      	ldr	r3, [pc, #544]	; (8003250 <HAL_RCC_OscConfig+0x504>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f0      	bne.n	800301c <HAL_RCC_OscConfig+0x2d0>
 800303a:	e000      	b.n	800303e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800303c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d060      	beq.n	800310c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	2b04      	cmp	r3, #4
 800304e:	d005      	beq.n	800305c <HAL_RCC_OscConfig+0x310>
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	2b0c      	cmp	r3, #12
 8003054:	d119      	bne.n	800308a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2b02      	cmp	r3, #2
 800305a:	d116      	bne.n	800308a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800305c:	4b7c      	ldr	r3, [pc, #496]	; (8003250 <HAL_RCC_OscConfig+0x504>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <HAL_RCC_OscConfig+0x328>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e23f      	b.n	80034f4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003074:	4b76      	ldr	r3, [pc, #472]	; (8003250 <HAL_RCC_OscConfig+0x504>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	061b      	lsls	r3, r3, #24
 8003082:	4973      	ldr	r1, [pc, #460]	; (8003250 <HAL_RCC_OscConfig+0x504>)
 8003084:	4313      	orrs	r3, r2
 8003086:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003088:	e040      	b.n	800310c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d023      	beq.n	80030da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003092:	4b6f      	ldr	r3, [pc, #444]	; (8003250 <HAL_RCC_OscConfig+0x504>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a6e      	ldr	r2, [pc, #440]	; (8003250 <HAL_RCC_OscConfig+0x504>)
 8003098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800309c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309e:	f7fe fd0d 	bl	8001abc <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030a4:	e008      	b.n	80030b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a6:	f7fe fd09 	bl	8001abc <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e21d      	b.n	80034f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030b8:	4b65      	ldr	r3, [pc, #404]	; (8003250 <HAL_RCC_OscConfig+0x504>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0f0      	beq.n	80030a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c4:	4b62      	ldr	r3, [pc, #392]	; (8003250 <HAL_RCC_OscConfig+0x504>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	061b      	lsls	r3, r3, #24
 80030d2:	495f      	ldr	r1, [pc, #380]	; (8003250 <HAL_RCC_OscConfig+0x504>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	604b      	str	r3, [r1, #4]
 80030d8:	e018      	b.n	800310c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030da:	4b5d      	ldr	r3, [pc, #372]	; (8003250 <HAL_RCC_OscConfig+0x504>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a5c      	ldr	r2, [pc, #368]	; (8003250 <HAL_RCC_OscConfig+0x504>)
 80030e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e6:	f7fe fce9 	bl	8001abc <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ee:	f7fe fce5 	bl	8001abc <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e1f9      	b.n	80034f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003100:	4b53      	ldr	r3, [pc, #332]	; (8003250 <HAL_RCC_OscConfig+0x504>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1f0      	bne.n	80030ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0308 	and.w	r3, r3, #8
 8003114:	2b00      	cmp	r3, #0
 8003116:	d03c      	beq.n	8003192 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d01c      	beq.n	800315a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003120:	4b4b      	ldr	r3, [pc, #300]	; (8003250 <HAL_RCC_OscConfig+0x504>)
 8003122:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003126:	4a4a      	ldr	r2, [pc, #296]	; (8003250 <HAL_RCC_OscConfig+0x504>)
 8003128:	f043 0301 	orr.w	r3, r3, #1
 800312c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003130:	f7fe fcc4 	bl	8001abc <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003138:	f7fe fcc0 	bl	8001abc <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e1d4      	b.n	80034f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800314a:	4b41      	ldr	r3, [pc, #260]	; (8003250 <HAL_RCC_OscConfig+0x504>)
 800314c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0ef      	beq.n	8003138 <HAL_RCC_OscConfig+0x3ec>
 8003158:	e01b      	b.n	8003192 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800315a:	4b3d      	ldr	r3, [pc, #244]	; (8003250 <HAL_RCC_OscConfig+0x504>)
 800315c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003160:	4a3b      	ldr	r2, [pc, #236]	; (8003250 <HAL_RCC_OscConfig+0x504>)
 8003162:	f023 0301 	bic.w	r3, r3, #1
 8003166:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800316a:	f7fe fca7 	bl	8001abc <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003172:	f7fe fca3 	bl	8001abc <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e1b7      	b.n	80034f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003184:	4b32      	ldr	r3, [pc, #200]	; (8003250 <HAL_RCC_OscConfig+0x504>)
 8003186:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1ef      	bne.n	8003172 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0304 	and.w	r3, r3, #4
 800319a:	2b00      	cmp	r3, #0
 800319c:	f000 80a6 	beq.w	80032ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031a0:	2300      	movs	r3, #0
 80031a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031a4:	4b2a      	ldr	r3, [pc, #168]	; (8003250 <HAL_RCC_OscConfig+0x504>)
 80031a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10d      	bne.n	80031cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031b0:	4b27      	ldr	r3, [pc, #156]	; (8003250 <HAL_RCC_OscConfig+0x504>)
 80031b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b4:	4a26      	ldr	r2, [pc, #152]	; (8003250 <HAL_RCC_OscConfig+0x504>)
 80031b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ba:	6593      	str	r3, [r2, #88]	; 0x58
 80031bc:	4b24      	ldr	r3, [pc, #144]	; (8003250 <HAL_RCC_OscConfig+0x504>)
 80031be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c4:	60bb      	str	r3, [r7, #8]
 80031c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031c8:	2301      	movs	r3, #1
 80031ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031cc:	4b21      	ldr	r3, [pc, #132]	; (8003254 <HAL_RCC_OscConfig+0x508>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d118      	bne.n	800320a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031d8:	4b1e      	ldr	r3, [pc, #120]	; (8003254 <HAL_RCC_OscConfig+0x508>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a1d      	ldr	r2, [pc, #116]	; (8003254 <HAL_RCC_OscConfig+0x508>)
 80031de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031e4:	f7fe fc6a 	bl	8001abc <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ec:	f7fe fc66 	bl	8001abc <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e17a      	b.n	80034f4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031fe:	4b15      	ldr	r3, [pc, #84]	; (8003254 <HAL_RCC_OscConfig+0x508>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0f0      	beq.n	80031ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d108      	bne.n	8003224 <HAL_RCC_OscConfig+0x4d8>
 8003212:	4b0f      	ldr	r3, [pc, #60]	; (8003250 <HAL_RCC_OscConfig+0x504>)
 8003214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003218:	4a0d      	ldr	r2, [pc, #52]	; (8003250 <HAL_RCC_OscConfig+0x504>)
 800321a:	f043 0301 	orr.w	r3, r3, #1
 800321e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003222:	e029      	b.n	8003278 <HAL_RCC_OscConfig+0x52c>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	2b05      	cmp	r3, #5
 800322a:	d115      	bne.n	8003258 <HAL_RCC_OscConfig+0x50c>
 800322c:	4b08      	ldr	r3, [pc, #32]	; (8003250 <HAL_RCC_OscConfig+0x504>)
 800322e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003232:	4a07      	ldr	r2, [pc, #28]	; (8003250 <HAL_RCC_OscConfig+0x504>)
 8003234:	f043 0304 	orr.w	r3, r3, #4
 8003238:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800323c:	4b04      	ldr	r3, [pc, #16]	; (8003250 <HAL_RCC_OscConfig+0x504>)
 800323e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003242:	4a03      	ldr	r2, [pc, #12]	; (8003250 <HAL_RCC_OscConfig+0x504>)
 8003244:	f043 0301 	orr.w	r3, r3, #1
 8003248:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800324c:	e014      	b.n	8003278 <HAL_RCC_OscConfig+0x52c>
 800324e:	bf00      	nop
 8003250:	40021000 	.word	0x40021000
 8003254:	40007000 	.word	0x40007000
 8003258:	4b9c      	ldr	r3, [pc, #624]	; (80034cc <HAL_RCC_OscConfig+0x780>)
 800325a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800325e:	4a9b      	ldr	r2, [pc, #620]	; (80034cc <HAL_RCC_OscConfig+0x780>)
 8003260:	f023 0301 	bic.w	r3, r3, #1
 8003264:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003268:	4b98      	ldr	r3, [pc, #608]	; (80034cc <HAL_RCC_OscConfig+0x780>)
 800326a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326e:	4a97      	ldr	r2, [pc, #604]	; (80034cc <HAL_RCC_OscConfig+0x780>)
 8003270:	f023 0304 	bic.w	r3, r3, #4
 8003274:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d016      	beq.n	80032ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003280:	f7fe fc1c 	bl	8001abc <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003286:	e00a      	b.n	800329e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003288:	f7fe fc18 	bl	8001abc <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	f241 3288 	movw	r2, #5000	; 0x1388
 8003296:	4293      	cmp	r3, r2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e12a      	b.n	80034f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800329e:	4b8b      	ldr	r3, [pc, #556]	; (80034cc <HAL_RCC_OscConfig+0x780>)
 80032a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0ed      	beq.n	8003288 <HAL_RCC_OscConfig+0x53c>
 80032ac:	e015      	b.n	80032da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ae:	f7fe fc05 	bl	8001abc <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032b4:	e00a      	b.n	80032cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032b6:	f7fe fc01 	bl	8001abc <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e113      	b.n	80034f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032cc:	4b7f      	ldr	r3, [pc, #508]	; (80034cc <HAL_RCC_OscConfig+0x780>)
 80032ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1ed      	bne.n	80032b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032da:	7ffb      	ldrb	r3, [r7, #31]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d105      	bne.n	80032ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032e0:	4b7a      	ldr	r3, [pc, #488]	; (80034cc <HAL_RCC_OscConfig+0x780>)
 80032e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e4:	4a79      	ldr	r2, [pc, #484]	; (80034cc <HAL_RCC_OscConfig+0x780>)
 80032e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ea:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f000 80fe 	beq.w	80034f2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	f040 80d0 	bne.w	80034a0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003300:	4b72      	ldr	r3, [pc, #456]	; (80034cc <HAL_RCC_OscConfig+0x780>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	f003 0203 	and.w	r2, r3, #3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003310:	429a      	cmp	r2, r3
 8003312:	d130      	bne.n	8003376 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	3b01      	subs	r3, #1
 8003320:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003322:	429a      	cmp	r2, r3
 8003324:	d127      	bne.n	8003376 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003330:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003332:	429a      	cmp	r2, r3
 8003334:	d11f      	bne.n	8003376 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003340:	2a07      	cmp	r2, #7
 8003342:	bf14      	ite	ne
 8003344:	2201      	movne	r2, #1
 8003346:	2200      	moveq	r2, #0
 8003348:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800334a:	4293      	cmp	r3, r2
 800334c:	d113      	bne.n	8003376 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003358:	085b      	lsrs	r3, r3, #1
 800335a:	3b01      	subs	r3, #1
 800335c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800335e:	429a      	cmp	r2, r3
 8003360:	d109      	bne.n	8003376 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336c:	085b      	lsrs	r3, r3, #1
 800336e:	3b01      	subs	r3, #1
 8003370:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003372:	429a      	cmp	r2, r3
 8003374:	d06e      	beq.n	8003454 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	2b0c      	cmp	r3, #12
 800337a:	d069      	beq.n	8003450 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800337c:	4b53      	ldr	r3, [pc, #332]	; (80034cc <HAL_RCC_OscConfig+0x780>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d105      	bne.n	8003394 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003388:	4b50      	ldr	r3, [pc, #320]	; (80034cc <HAL_RCC_OscConfig+0x780>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e0ad      	b.n	80034f4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003398:	4b4c      	ldr	r3, [pc, #304]	; (80034cc <HAL_RCC_OscConfig+0x780>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a4b      	ldr	r2, [pc, #300]	; (80034cc <HAL_RCC_OscConfig+0x780>)
 800339e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033a2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033a4:	f7fe fb8a 	bl	8001abc <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ac:	f7fe fb86 	bl	8001abc <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e09a      	b.n	80034f4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033be:	4b43      	ldr	r3, [pc, #268]	; (80034cc <HAL_RCC_OscConfig+0x780>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1f0      	bne.n	80033ac <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033ca:	4b40      	ldr	r3, [pc, #256]	; (80034cc <HAL_RCC_OscConfig+0x780>)
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	4b40      	ldr	r3, [pc, #256]	; (80034d0 <HAL_RCC_OscConfig+0x784>)
 80033d0:	4013      	ands	r3, r2
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80033da:	3a01      	subs	r2, #1
 80033dc:	0112      	lsls	r2, r2, #4
 80033de:	4311      	orrs	r1, r2
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033e4:	0212      	lsls	r2, r2, #8
 80033e6:	4311      	orrs	r1, r2
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033ec:	0852      	lsrs	r2, r2, #1
 80033ee:	3a01      	subs	r2, #1
 80033f0:	0552      	lsls	r2, r2, #21
 80033f2:	4311      	orrs	r1, r2
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033f8:	0852      	lsrs	r2, r2, #1
 80033fa:	3a01      	subs	r2, #1
 80033fc:	0652      	lsls	r2, r2, #25
 80033fe:	4311      	orrs	r1, r2
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003404:	0912      	lsrs	r2, r2, #4
 8003406:	0452      	lsls	r2, r2, #17
 8003408:	430a      	orrs	r2, r1
 800340a:	4930      	ldr	r1, [pc, #192]	; (80034cc <HAL_RCC_OscConfig+0x780>)
 800340c:	4313      	orrs	r3, r2
 800340e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003410:	4b2e      	ldr	r3, [pc, #184]	; (80034cc <HAL_RCC_OscConfig+0x780>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a2d      	ldr	r2, [pc, #180]	; (80034cc <HAL_RCC_OscConfig+0x780>)
 8003416:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800341a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800341c:	4b2b      	ldr	r3, [pc, #172]	; (80034cc <HAL_RCC_OscConfig+0x780>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	4a2a      	ldr	r2, [pc, #168]	; (80034cc <HAL_RCC_OscConfig+0x780>)
 8003422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003426:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003428:	f7fe fb48 	bl	8001abc <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003430:	f7fe fb44 	bl	8001abc <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e058      	b.n	80034f4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003442:	4b22      	ldr	r3, [pc, #136]	; (80034cc <HAL_RCC_OscConfig+0x780>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0f0      	beq.n	8003430 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800344e:	e050      	b.n	80034f2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e04f      	b.n	80034f4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003454:	4b1d      	ldr	r3, [pc, #116]	; (80034cc <HAL_RCC_OscConfig+0x780>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d148      	bne.n	80034f2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003460:	4b1a      	ldr	r3, [pc, #104]	; (80034cc <HAL_RCC_OscConfig+0x780>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a19      	ldr	r2, [pc, #100]	; (80034cc <HAL_RCC_OscConfig+0x780>)
 8003466:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800346a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800346c:	4b17      	ldr	r3, [pc, #92]	; (80034cc <HAL_RCC_OscConfig+0x780>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	4a16      	ldr	r2, [pc, #88]	; (80034cc <HAL_RCC_OscConfig+0x780>)
 8003472:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003476:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003478:	f7fe fb20 	bl	8001abc <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003480:	f7fe fb1c 	bl	8001abc <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e030      	b.n	80034f4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003492:	4b0e      	ldr	r3, [pc, #56]	; (80034cc <HAL_RCC_OscConfig+0x780>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d0f0      	beq.n	8003480 <HAL_RCC_OscConfig+0x734>
 800349e:	e028      	b.n	80034f2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	2b0c      	cmp	r3, #12
 80034a4:	d023      	beq.n	80034ee <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034a6:	4b09      	ldr	r3, [pc, #36]	; (80034cc <HAL_RCC_OscConfig+0x780>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a08      	ldr	r2, [pc, #32]	; (80034cc <HAL_RCC_OscConfig+0x780>)
 80034ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b2:	f7fe fb03 	bl	8001abc <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034b8:	e00c      	b.n	80034d4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ba:	f7fe faff 	bl	8001abc <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d905      	bls.n	80034d4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e013      	b.n	80034f4 <HAL_RCC_OscConfig+0x7a8>
 80034cc:	40021000 	.word	0x40021000
 80034d0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034d4:	4b09      	ldr	r3, [pc, #36]	; (80034fc <HAL_RCC_OscConfig+0x7b0>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1ec      	bne.n	80034ba <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80034e0:	4b06      	ldr	r3, [pc, #24]	; (80034fc <HAL_RCC_OscConfig+0x7b0>)
 80034e2:	68da      	ldr	r2, [r3, #12]
 80034e4:	4905      	ldr	r1, [pc, #20]	; (80034fc <HAL_RCC_OscConfig+0x7b0>)
 80034e6:	4b06      	ldr	r3, [pc, #24]	; (8003500 <HAL_RCC_OscConfig+0x7b4>)
 80034e8:	4013      	ands	r3, r2
 80034ea:	60cb      	str	r3, [r1, #12]
 80034ec:	e001      	b.n	80034f2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e000      	b.n	80034f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3720      	adds	r7, #32
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40021000 	.word	0x40021000
 8003500:	feeefffc 	.word	0xfeeefffc

08003504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e0e7      	b.n	80036e8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003518:	4b75      	ldr	r3, [pc, #468]	; (80036f0 <HAL_RCC_ClockConfig+0x1ec>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0307 	and.w	r3, r3, #7
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	429a      	cmp	r2, r3
 8003524:	d910      	bls.n	8003548 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003526:	4b72      	ldr	r3, [pc, #456]	; (80036f0 <HAL_RCC_ClockConfig+0x1ec>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f023 0207 	bic.w	r2, r3, #7
 800352e:	4970      	ldr	r1, [pc, #448]	; (80036f0 <HAL_RCC_ClockConfig+0x1ec>)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	4313      	orrs	r3, r2
 8003534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003536:	4b6e      	ldr	r3, [pc, #440]	; (80036f0 <HAL_RCC_ClockConfig+0x1ec>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	429a      	cmp	r2, r3
 8003542:	d001      	beq.n	8003548 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e0cf      	b.n	80036e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d010      	beq.n	8003576 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	4b66      	ldr	r3, [pc, #408]	; (80036f4 <HAL_RCC_ClockConfig+0x1f0>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003560:	429a      	cmp	r2, r3
 8003562:	d908      	bls.n	8003576 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003564:	4b63      	ldr	r3, [pc, #396]	; (80036f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	4960      	ldr	r1, [pc, #384]	; (80036f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003572:	4313      	orrs	r3, r2
 8003574:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d04c      	beq.n	800361c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b03      	cmp	r3, #3
 8003588:	d107      	bne.n	800359a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800358a:	4b5a      	ldr	r3, [pc, #360]	; (80036f4 <HAL_RCC_ClockConfig+0x1f0>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d121      	bne.n	80035da <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e0a6      	b.n	80036e8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d107      	bne.n	80035b2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035a2:	4b54      	ldr	r3, [pc, #336]	; (80036f4 <HAL_RCC_ClockConfig+0x1f0>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d115      	bne.n	80035da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e09a      	b.n	80036e8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d107      	bne.n	80035ca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035ba:	4b4e      	ldr	r3, [pc, #312]	; (80036f4 <HAL_RCC_ClockConfig+0x1f0>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d109      	bne.n	80035da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e08e      	b.n	80036e8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035ca:	4b4a      	ldr	r3, [pc, #296]	; (80036f4 <HAL_RCC_ClockConfig+0x1f0>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e086      	b.n	80036e8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035da:	4b46      	ldr	r3, [pc, #280]	; (80036f4 <HAL_RCC_ClockConfig+0x1f0>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f023 0203 	bic.w	r2, r3, #3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	4943      	ldr	r1, [pc, #268]	; (80036f4 <HAL_RCC_ClockConfig+0x1f0>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035ec:	f7fe fa66 	bl	8001abc <HAL_GetTick>
 80035f0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f2:	e00a      	b.n	800360a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f4:	f7fe fa62 	bl	8001abc <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003602:	4293      	cmp	r3, r2
 8003604:	d901      	bls.n	800360a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e06e      	b.n	80036e8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360a:	4b3a      	ldr	r3, [pc, #232]	; (80036f4 <HAL_RCC_ClockConfig+0x1f0>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 020c 	and.w	r2, r3, #12
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	429a      	cmp	r2, r3
 800361a:	d1eb      	bne.n	80035f4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d010      	beq.n	800364a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	4b31      	ldr	r3, [pc, #196]	; (80036f4 <HAL_RCC_ClockConfig+0x1f0>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003634:	429a      	cmp	r2, r3
 8003636:	d208      	bcs.n	800364a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003638:	4b2e      	ldr	r3, [pc, #184]	; (80036f4 <HAL_RCC_ClockConfig+0x1f0>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	492b      	ldr	r1, [pc, #172]	; (80036f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003646:	4313      	orrs	r3, r2
 8003648:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800364a:	4b29      	ldr	r3, [pc, #164]	; (80036f0 <HAL_RCC_ClockConfig+0x1ec>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	429a      	cmp	r2, r3
 8003656:	d210      	bcs.n	800367a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003658:	4b25      	ldr	r3, [pc, #148]	; (80036f0 <HAL_RCC_ClockConfig+0x1ec>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f023 0207 	bic.w	r2, r3, #7
 8003660:	4923      	ldr	r1, [pc, #140]	; (80036f0 <HAL_RCC_ClockConfig+0x1ec>)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	4313      	orrs	r3, r2
 8003666:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003668:	4b21      	ldr	r3, [pc, #132]	; (80036f0 <HAL_RCC_ClockConfig+0x1ec>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	429a      	cmp	r2, r3
 8003674:	d001      	beq.n	800367a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e036      	b.n	80036e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0304 	and.w	r3, r3, #4
 8003682:	2b00      	cmp	r3, #0
 8003684:	d008      	beq.n	8003698 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003686:	4b1b      	ldr	r3, [pc, #108]	; (80036f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	4918      	ldr	r1, [pc, #96]	; (80036f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003694:	4313      	orrs	r3, r2
 8003696:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0308 	and.w	r3, r3, #8
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d009      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036a4:	4b13      	ldr	r3, [pc, #76]	; (80036f4 <HAL_RCC_ClockConfig+0x1f0>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	4910      	ldr	r1, [pc, #64]	; (80036f4 <HAL_RCC_ClockConfig+0x1f0>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036b8:	f000 f824 	bl	8003704 <HAL_RCC_GetSysClockFreq>
 80036bc:	4602      	mov	r2, r0
 80036be:	4b0d      	ldr	r3, [pc, #52]	; (80036f4 <HAL_RCC_ClockConfig+0x1f0>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	091b      	lsrs	r3, r3, #4
 80036c4:	f003 030f 	and.w	r3, r3, #15
 80036c8:	490b      	ldr	r1, [pc, #44]	; (80036f8 <HAL_RCC_ClockConfig+0x1f4>)
 80036ca:	5ccb      	ldrb	r3, [r1, r3]
 80036cc:	f003 031f 	and.w	r3, r3, #31
 80036d0:	fa22 f303 	lsr.w	r3, r2, r3
 80036d4:	4a09      	ldr	r2, [pc, #36]	; (80036fc <HAL_RCC_ClockConfig+0x1f8>)
 80036d6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80036d8:	4b09      	ldr	r3, [pc, #36]	; (8003700 <HAL_RCC_ClockConfig+0x1fc>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4618      	mov	r0, r3
 80036de:	f7fe f99d 	bl	8001a1c <HAL_InitTick>
 80036e2:	4603      	mov	r3, r0
 80036e4:	72fb      	strb	r3, [r7, #11]

  return status;
 80036e6:	7afb      	ldrb	r3, [r7, #11]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40022000 	.word	0x40022000
 80036f4:	40021000 	.word	0x40021000
 80036f8:	08008068 	.word	0x08008068
 80036fc:	20000000 	.word	0x20000000
 8003700:	20000004 	.word	0x20000004

08003704 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003704:	b480      	push	{r7}
 8003706:	b089      	sub	sp, #36	; 0x24
 8003708:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800370a:	2300      	movs	r3, #0
 800370c:	61fb      	str	r3, [r7, #28]
 800370e:	2300      	movs	r3, #0
 8003710:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003712:	4b3e      	ldr	r3, [pc, #248]	; (800380c <HAL_RCC_GetSysClockFreq+0x108>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f003 030c 	and.w	r3, r3, #12
 800371a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800371c:	4b3b      	ldr	r3, [pc, #236]	; (800380c <HAL_RCC_GetSysClockFreq+0x108>)
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f003 0303 	and.w	r3, r3, #3
 8003724:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d005      	beq.n	8003738 <HAL_RCC_GetSysClockFreq+0x34>
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	2b0c      	cmp	r3, #12
 8003730:	d121      	bne.n	8003776 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d11e      	bne.n	8003776 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003738:	4b34      	ldr	r3, [pc, #208]	; (800380c <HAL_RCC_GetSysClockFreq+0x108>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0308 	and.w	r3, r3, #8
 8003740:	2b00      	cmp	r3, #0
 8003742:	d107      	bne.n	8003754 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003744:	4b31      	ldr	r3, [pc, #196]	; (800380c <HAL_RCC_GetSysClockFreq+0x108>)
 8003746:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800374a:	0a1b      	lsrs	r3, r3, #8
 800374c:	f003 030f 	and.w	r3, r3, #15
 8003750:	61fb      	str	r3, [r7, #28]
 8003752:	e005      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003754:	4b2d      	ldr	r3, [pc, #180]	; (800380c <HAL_RCC_GetSysClockFreq+0x108>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	091b      	lsrs	r3, r3, #4
 800375a:	f003 030f 	and.w	r3, r3, #15
 800375e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003760:	4a2b      	ldr	r2, [pc, #172]	; (8003810 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003768:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10d      	bne.n	800378c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003774:	e00a      	b.n	800378c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	2b04      	cmp	r3, #4
 800377a:	d102      	bne.n	8003782 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800377c:	4b25      	ldr	r3, [pc, #148]	; (8003814 <HAL_RCC_GetSysClockFreq+0x110>)
 800377e:	61bb      	str	r3, [r7, #24]
 8003780:	e004      	b.n	800378c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	2b08      	cmp	r3, #8
 8003786:	d101      	bne.n	800378c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003788:	4b23      	ldr	r3, [pc, #140]	; (8003818 <HAL_RCC_GetSysClockFreq+0x114>)
 800378a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	2b0c      	cmp	r3, #12
 8003790:	d134      	bne.n	80037fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003792:	4b1e      	ldr	r3, [pc, #120]	; (800380c <HAL_RCC_GetSysClockFreq+0x108>)
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d003      	beq.n	80037aa <HAL_RCC_GetSysClockFreq+0xa6>
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	2b03      	cmp	r3, #3
 80037a6:	d003      	beq.n	80037b0 <HAL_RCC_GetSysClockFreq+0xac>
 80037a8:	e005      	b.n	80037b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80037aa:	4b1a      	ldr	r3, [pc, #104]	; (8003814 <HAL_RCC_GetSysClockFreq+0x110>)
 80037ac:	617b      	str	r3, [r7, #20]
      break;
 80037ae:	e005      	b.n	80037bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80037b0:	4b19      	ldr	r3, [pc, #100]	; (8003818 <HAL_RCC_GetSysClockFreq+0x114>)
 80037b2:	617b      	str	r3, [r7, #20]
      break;
 80037b4:	e002      	b.n	80037bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	617b      	str	r3, [r7, #20]
      break;
 80037ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037bc:	4b13      	ldr	r3, [pc, #76]	; (800380c <HAL_RCC_GetSysClockFreq+0x108>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	091b      	lsrs	r3, r3, #4
 80037c2:	f003 0307 	and.w	r3, r3, #7
 80037c6:	3301      	adds	r3, #1
 80037c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80037ca:	4b10      	ldr	r3, [pc, #64]	; (800380c <HAL_RCC_GetSysClockFreq+0x108>)
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	0a1b      	lsrs	r3, r3, #8
 80037d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	fb03 f202 	mul.w	r2, r3, r2
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037e2:	4b0a      	ldr	r3, [pc, #40]	; (800380c <HAL_RCC_GetSysClockFreq+0x108>)
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	0e5b      	lsrs	r3, r3, #25
 80037e8:	f003 0303 	and.w	r3, r3, #3
 80037ec:	3301      	adds	r3, #1
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80037fc:	69bb      	ldr	r3, [r7, #24]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3724      	adds	r7, #36	; 0x24
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	40021000 	.word	0x40021000
 8003810:	08008080 	.word	0x08008080
 8003814:	00f42400 	.word	0x00f42400
 8003818:	007a1200 	.word	0x007a1200

0800381c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003820:	4b03      	ldr	r3, [pc, #12]	; (8003830 <HAL_RCC_GetHCLKFreq+0x14>)
 8003822:	681b      	ldr	r3, [r3, #0]
}
 8003824:	4618      	mov	r0, r3
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	20000000 	.word	0x20000000

08003834 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003838:	f7ff fff0 	bl	800381c <HAL_RCC_GetHCLKFreq>
 800383c:	4602      	mov	r2, r0
 800383e:	4b06      	ldr	r3, [pc, #24]	; (8003858 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	0a1b      	lsrs	r3, r3, #8
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	4904      	ldr	r1, [pc, #16]	; (800385c <HAL_RCC_GetPCLK1Freq+0x28>)
 800384a:	5ccb      	ldrb	r3, [r1, r3]
 800384c:	f003 031f 	and.w	r3, r3, #31
 8003850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003854:	4618      	mov	r0, r3
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40021000 	.word	0x40021000
 800385c:	08008078 	.word	0x08008078

08003860 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003864:	f7ff ffda 	bl	800381c <HAL_RCC_GetHCLKFreq>
 8003868:	4602      	mov	r2, r0
 800386a:	4b06      	ldr	r3, [pc, #24]	; (8003884 <HAL_RCC_GetPCLK2Freq+0x24>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	0adb      	lsrs	r3, r3, #11
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	4904      	ldr	r1, [pc, #16]	; (8003888 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003876:	5ccb      	ldrb	r3, [r1, r3]
 8003878:	f003 031f 	and.w	r3, r3, #31
 800387c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003880:	4618      	mov	r0, r3
 8003882:	bd80      	pop	{r7, pc}
 8003884:	40021000 	.word	0x40021000
 8003888:	08008078 	.word	0x08008078

0800388c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003894:	2300      	movs	r3, #0
 8003896:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003898:	4b2a      	ldr	r3, [pc, #168]	; (8003944 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800389a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038a4:	f7ff f9ee 	bl	8002c84 <HAL_PWREx_GetVoltageRange>
 80038a8:	6178      	str	r0, [r7, #20]
 80038aa:	e014      	b.n	80038d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038ac:	4b25      	ldr	r3, [pc, #148]	; (8003944 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b0:	4a24      	ldr	r2, [pc, #144]	; (8003944 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038b6:	6593      	str	r3, [r2, #88]	; 0x58
 80038b8:	4b22      	ldr	r3, [pc, #136]	; (8003944 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c0:	60fb      	str	r3, [r7, #12]
 80038c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038c4:	f7ff f9de 	bl	8002c84 <HAL_PWREx_GetVoltageRange>
 80038c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80038ca:	4b1e      	ldr	r3, [pc, #120]	; (8003944 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ce:	4a1d      	ldr	r2, [pc, #116]	; (8003944 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038dc:	d10b      	bne.n	80038f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2b80      	cmp	r3, #128	; 0x80
 80038e2:	d919      	bls.n	8003918 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2ba0      	cmp	r3, #160	; 0xa0
 80038e8:	d902      	bls.n	80038f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038ea:	2302      	movs	r3, #2
 80038ec:	613b      	str	r3, [r7, #16]
 80038ee:	e013      	b.n	8003918 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038f0:	2301      	movs	r3, #1
 80038f2:	613b      	str	r3, [r7, #16]
 80038f4:	e010      	b.n	8003918 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b80      	cmp	r3, #128	; 0x80
 80038fa:	d902      	bls.n	8003902 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80038fc:	2303      	movs	r3, #3
 80038fe:	613b      	str	r3, [r7, #16]
 8003900:	e00a      	b.n	8003918 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b80      	cmp	r3, #128	; 0x80
 8003906:	d102      	bne.n	800390e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003908:	2302      	movs	r3, #2
 800390a:	613b      	str	r3, [r7, #16]
 800390c:	e004      	b.n	8003918 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b70      	cmp	r3, #112	; 0x70
 8003912:	d101      	bne.n	8003918 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003914:	2301      	movs	r3, #1
 8003916:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003918:	4b0b      	ldr	r3, [pc, #44]	; (8003948 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f023 0207 	bic.w	r2, r3, #7
 8003920:	4909      	ldr	r1, [pc, #36]	; (8003948 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	4313      	orrs	r3, r2
 8003926:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003928:	4b07      	ldr	r3, [pc, #28]	; (8003948 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	429a      	cmp	r2, r3
 8003934:	d001      	beq.n	800393a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e000      	b.n	800393c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3718      	adds	r7, #24
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	40021000 	.word	0x40021000
 8003948:	40022000 	.word	0x40022000

0800394c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003954:	2300      	movs	r3, #0
 8003956:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003958:	2300      	movs	r3, #0
 800395a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003964:	2b00      	cmp	r3, #0
 8003966:	d041      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800396c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003970:	d02a      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003972:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003976:	d824      	bhi.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003978:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800397c:	d008      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800397e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003982:	d81e      	bhi.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00a      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003988:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800398c:	d010      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800398e:	e018      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003990:	4b86      	ldr	r3, [pc, #536]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	4a85      	ldr	r2, [pc, #532]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800399a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800399c:	e015      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	3304      	adds	r3, #4
 80039a2:	2100      	movs	r1, #0
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 fabb 	bl	8003f20 <RCCEx_PLLSAI1_Config>
 80039aa:	4603      	mov	r3, r0
 80039ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039ae:	e00c      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	3320      	adds	r3, #32
 80039b4:	2100      	movs	r1, #0
 80039b6:	4618      	mov	r0, r3
 80039b8:	f000 fba6 	bl	8004108 <RCCEx_PLLSAI2_Config>
 80039bc:	4603      	mov	r3, r0
 80039be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039c0:	e003      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	74fb      	strb	r3, [r7, #19]
      break;
 80039c6:	e000      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80039c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039ca:	7cfb      	ldrb	r3, [r7, #19]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10b      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039d0:	4b76      	ldr	r3, [pc, #472]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039de:	4973      	ldr	r1, [pc, #460]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80039e6:	e001      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e8:	7cfb      	ldrb	r3, [r7, #19]
 80039ea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d041      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a00:	d02a      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003a02:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a06:	d824      	bhi.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a0c:	d008      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a12:	d81e      	bhi.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00a      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003a18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a1c:	d010      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a1e:	e018      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a20:	4b62      	ldr	r3, [pc, #392]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	4a61      	ldr	r2, [pc, #388]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a2a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a2c:	e015      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	3304      	adds	r3, #4
 8003a32:	2100      	movs	r1, #0
 8003a34:	4618      	mov	r0, r3
 8003a36:	f000 fa73 	bl	8003f20 <RCCEx_PLLSAI1_Config>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a3e:	e00c      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3320      	adds	r3, #32
 8003a44:	2100      	movs	r1, #0
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 fb5e 	bl	8004108 <RCCEx_PLLSAI2_Config>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a50:	e003      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	74fb      	strb	r3, [r7, #19]
      break;
 8003a56:	e000      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003a58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a5a:	7cfb      	ldrb	r3, [r7, #19]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d10b      	bne.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a60:	4b52      	ldr	r3, [pc, #328]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a66:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a6e:	494f      	ldr	r1, [pc, #316]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a76:	e001      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a78:	7cfb      	ldrb	r3, [r7, #19]
 8003a7a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f000 80a0 	beq.w	8003bca <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a8e:	4b47      	ldr	r3, [pc, #284]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e000      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00d      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aa4:	4b41      	ldr	r3, [pc, #260]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa8:	4a40      	ldr	r2, [pc, #256]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aae:	6593      	str	r3, [r2, #88]	; 0x58
 8003ab0:	4b3e      	ldr	r3, [pc, #248]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab8:	60bb      	str	r3, [r7, #8]
 8003aba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003abc:	2301      	movs	r3, #1
 8003abe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ac0:	4b3b      	ldr	r3, [pc, #236]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a3a      	ldr	r2, [pc, #232]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003acc:	f7fd fff6 	bl	8001abc <HAL_GetTick>
 8003ad0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ad2:	e009      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad4:	f7fd fff2 	bl	8001abc <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d902      	bls.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	74fb      	strb	r3, [r7, #19]
        break;
 8003ae6:	e005      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ae8:	4b31      	ldr	r3, [pc, #196]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0ef      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003af4:	7cfb      	ldrb	r3, [r7, #19]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d15c      	bne.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003afa:	4b2c      	ldr	r3, [pc, #176]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b04:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d01f      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d019      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b18:	4b24      	ldr	r3, [pc, #144]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b24:	4b21      	ldr	r3, [pc, #132]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2a:	4a20      	ldr	r2, [pc, #128]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b34:	4b1d      	ldr	r3, [pc, #116]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3a:	4a1c      	ldr	r2, [pc, #112]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b44:	4a19      	ldr	r2, [pc, #100]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d016      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b56:	f7fd ffb1 	bl	8001abc <HAL_GetTick>
 8003b5a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b5c:	e00b      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b5e:	f7fd ffad 	bl	8001abc <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d902      	bls.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	74fb      	strb	r3, [r7, #19]
            break;
 8003b74:	e006      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b76:	4b0d      	ldr	r3, [pc, #52]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d0ec      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003b84:	7cfb      	ldrb	r3, [r7, #19]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10c      	bne.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b8a:	4b08      	ldr	r3, [pc, #32]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b9a:	4904      	ldr	r1, [pc, #16]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ba2:	e009      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ba4:	7cfb      	ldrb	r3, [r7, #19]
 8003ba6:	74bb      	strb	r3, [r7, #18]
 8003ba8:	e006      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003baa:	bf00      	nop
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bb4:	7cfb      	ldrb	r3, [r7, #19]
 8003bb6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bb8:	7c7b      	ldrb	r3, [r7, #17]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d105      	bne.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bbe:	4b9e      	ldr	r3, [pc, #632]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc2:	4a9d      	ldr	r2, [pc, #628]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bc8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00a      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bd6:	4b98      	ldr	r3, [pc, #608]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bdc:	f023 0203 	bic.w	r2, r3, #3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be4:	4994      	ldr	r1, [pc, #592]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00a      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bf8:	4b8f      	ldr	r3, [pc, #572]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfe:	f023 020c 	bic.w	r2, r3, #12
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c06:	498c      	ldr	r1, [pc, #560]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0304 	and.w	r3, r3, #4
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00a      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c1a:	4b87      	ldr	r3, [pc, #540]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c20:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	4983      	ldr	r1, [pc, #524]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0308 	and.w	r3, r3, #8
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00a      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c3c:	4b7e      	ldr	r3, [pc, #504]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4a:	497b      	ldr	r1, [pc, #492]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0310 	and.w	r3, r3, #16
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00a      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c5e:	4b76      	ldr	r3, [pc, #472]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c6c:	4972      	ldr	r1, [pc, #456]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0320 	and.w	r3, r3, #32
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00a      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c80:	4b6d      	ldr	r3, [pc, #436]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c8e:	496a      	ldr	r1, [pc, #424]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ca2:	4b65      	ldr	r3, [pc, #404]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb0:	4961      	ldr	r1, [pc, #388]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00a      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003cc4:	4b5c      	ldr	r3, [pc, #368]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cd2:	4959      	ldr	r1, [pc, #356]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00a      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ce6:	4b54      	ldr	r3, [pc, #336]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf4:	4950      	ldr	r1, [pc, #320]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00a      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d08:	4b4b      	ldr	r3, [pc, #300]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d16:	4948      	ldr	r1, [pc, #288]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00a      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d2a:	4b43      	ldr	r3, [pc, #268]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d38:	493f      	ldr	r1, [pc, #252]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d028      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d4c:	4b3a      	ldr	r3, [pc, #232]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d5a:	4937      	ldr	r1, [pc, #220]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d6a:	d106      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d6c:	4b32      	ldr	r3, [pc, #200]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	4a31      	ldr	r2, [pc, #196]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d76:	60d3      	str	r3, [r2, #12]
 8003d78:	e011      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d82:	d10c      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	3304      	adds	r3, #4
 8003d88:	2101      	movs	r1, #1
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 f8c8 	bl	8003f20 <RCCEx_PLLSAI1_Config>
 8003d90:	4603      	mov	r3, r0
 8003d92:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d94:	7cfb      	ldrb	r3, [r7, #19]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003d9a:	7cfb      	ldrb	r3, [r7, #19]
 8003d9c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d028      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003daa:	4b23      	ldr	r3, [pc, #140]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db8:	491f      	ldr	r1, [pc, #124]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dc8:	d106      	bne.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dca:	4b1b      	ldr	r3, [pc, #108]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	4a1a      	ldr	r2, [pc, #104]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dd4:	60d3      	str	r3, [r2, #12]
 8003dd6:	e011      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ddc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003de0:	d10c      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	3304      	adds	r3, #4
 8003de6:	2101      	movs	r1, #1
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 f899 	bl	8003f20 <RCCEx_PLLSAI1_Config>
 8003dee:	4603      	mov	r3, r0
 8003df0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003df2:	7cfb      	ldrb	r3, [r7, #19]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003df8:	7cfb      	ldrb	r3, [r7, #19]
 8003dfa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d02b      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e08:	4b0b      	ldr	r3, [pc, #44]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e16:	4908      	ldr	r1, [pc, #32]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e26:	d109      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e28:	4b03      	ldr	r3, [pc, #12]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	4a02      	ldr	r2, [pc, #8]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e32:	60d3      	str	r3, [r2, #12]
 8003e34:	e014      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003e36:	bf00      	nop
 8003e38:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e44:	d10c      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	3304      	adds	r3, #4
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 f867 	bl	8003f20 <RCCEx_PLLSAI1_Config>
 8003e52:	4603      	mov	r3, r0
 8003e54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e56:	7cfb      	ldrb	r3, [r7, #19]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003e5c:	7cfb      	ldrb	r3, [r7, #19]
 8003e5e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d02f      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e6c:	4b2b      	ldr	r3, [pc, #172]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e72:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e7a:	4928      	ldr	r1, [pc, #160]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e8a:	d10d      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3304      	adds	r3, #4
 8003e90:	2102      	movs	r1, #2
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 f844 	bl	8003f20 <RCCEx_PLLSAI1_Config>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e9c:	7cfb      	ldrb	r3, [r7, #19]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d014      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ea2:	7cfb      	ldrb	r3, [r7, #19]
 8003ea4:	74bb      	strb	r3, [r7, #18]
 8003ea6:	e011      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eb0:	d10c      	bne.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	3320      	adds	r3, #32
 8003eb6:	2102      	movs	r1, #2
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f000 f925 	bl	8004108 <RCCEx_PLLSAI2_Config>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ec2:	7cfb      	ldrb	r3, [r7, #19]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ec8:	7cfb      	ldrb	r3, [r7, #19]
 8003eca:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00a      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ed8:	4b10      	ldr	r3, [pc, #64]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ede:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ee6:	490d      	ldr	r1, [pc, #52]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00b      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003efa:	4b08      	ldr	r3, [pc, #32]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f00:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f0a:	4904      	ldr	r1, [pc, #16]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f12:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3718      	adds	r7, #24
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	40021000 	.word	0x40021000

08003f20 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f2e:	4b75      	ldr	r3, [pc, #468]	; (8004104 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	f003 0303 	and.w	r3, r3, #3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d018      	beq.n	8003f6c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f3a:	4b72      	ldr	r3, [pc, #456]	; (8004104 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	f003 0203 	and.w	r2, r3, #3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d10d      	bne.n	8003f66 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
       ||
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d009      	beq.n	8003f66 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f52:	4b6c      	ldr	r3, [pc, #432]	; (8004104 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	091b      	lsrs	r3, r3, #4
 8003f58:	f003 0307 	and.w	r3, r3, #7
 8003f5c:	1c5a      	adds	r2, r3, #1
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
       ||
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d047      	beq.n	8003ff6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	73fb      	strb	r3, [r7, #15]
 8003f6a:	e044      	b.n	8003ff6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2b03      	cmp	r3, #3
 8003f72:	d018      	beq.n	8003fa6 <RCCEx_PLLSAI1_Config+0x86>
 8003f74:	2b03      	cmp	r3, #3
 8003f76:	d825      	bhi.n	8003fc4 <RCCEx_PLLSAI1_Config+0xa4>
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d002      	beq.n	8003f82 <RCCEx_PLLSAI1_Config+0x62>
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d009      	beq.n	8003f94 <RCCEx_PLLSAI1_Config+0x74>
 8003f80:	e020      	b.n	8003fc4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f82:	4b60      	ldr	r3, [pc, #384]	; (8004104 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d11d      	bne.n	8003fca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f92:	e01a      	b.n	8003fca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f94:	4b5b      	ldr	r3, [pc, #364]	; (8004104 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d116      	bne.n	8003fce <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fa4:	e013      	b.n	8003fce <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fa6:	4b57      	ldr	r3, [pc, #348]	; (8004104 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10f      	bne.n	8003fd2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003fb2:	4b54      	ldr	r3, [pc, #336]	; (8004104 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d109      	bne.n	8003fd2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003fc2:	e006      	b.n	8003fd2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8003fc8:	e004      	b.n	8003fd4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fca:	bf00      	nop
 8003fcc:	e002      	b.n	8003fd4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fce:	bf00      	nop
 8003fd0:	e000      	b.n	8003fd4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fd2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003fd4:	7bfb      	ldrb	r3, [r7, #15]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10d      	bne.n	8003ff6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003fda:	4b4a      	ldr	r3, [pc, #296]	; (8004104 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6819      	ldr	r1, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	3b01      	subs	r3, #1
 8003fec:	011b      	lsls	r3, r3, #4
 8003fee:	430b      	orrs	r3, r1
 8003ff0:	4944      	ldr	r1, [pc, #272]	; (8004104 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ff6:	7bfb      	ldrb	r3, [r7, #15]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d17d      	bne.n	80040f8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ffc:	4b41      	ldr	r3, [pc, #260]	; (8004104 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a40      	ldr	r2, [pc, #256]	; (8004104 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004002:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004006:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004008:	f7fd fd58 	bl	8001abc <HAL_GetTick>
 800400c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800400e:	e009      	b.n	8004024 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004010:	f7fd fd54 	bl	8001abc <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d902      	bls.n	8004024 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	73fb      	strb	r3, [r7, #15]
        break;
 8004022:	e005      	b.n	8004030 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004024:	4b37      	ldr	r3, [pc, #220]	; (8004104 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1ef      	bne.n	8004010 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004030:	7bfb      	ldrb	r3, [r7, #15]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d160      	bne.n	80040f8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d111      	bne.n	8004060 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800403c:	4b31      	ldr	r3, [pc, #196]	; (8004104 <RCCEx_PLLSAI1_Config+0x1e4>)
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	6892      	ldr	r2, [r2, #8]
 800404c:	0211      	lsls	r1, r2, #8
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	68d2      	ldr	r2, [r2, #12]
 8004052:	0912      	lsrs	r2, r2, #4
 8004054:	0452      	lsls	r2, r2, #17
 8004056:	430a      	orrs	r2, r1
 8004058:	492a      	ldr	r1, [pc, #168]	; (8004104 <RCCEx_PLLSAI1_Config+0x1e4>)
 800405a:	4313      	orrs	r3, r2
 800405c:	610b      	str	r3, [r1, #16]
 800405e:	e027      	b.n	80040b0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d112      	bne.n	800408c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004066:	4b27      	ldr	r3, [pc, #156]	; (8004104 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800406e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	6892      	ldr	r2, [r2, #8]
 8004076:	0211      	lsls	r1, r2, #8
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	6912      	ldr	r2, [r2, #16]
 800407c:	0852      	lsrs	r2, r2, #1
 800407e:	3a01      	subs	r2, #1
 8004080:	0552      	lsls	r2, r2, #21
 8004082:	430a      	orrs	r2, r1
 8004084:	491f      	ldr	r1, [pc, #124]	; (8004104 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004086:	4313      	orrs	r3, r2
 8004088:	610b      	str	r3, [r1, #16]
 800408a:	e011      	b.n	80040b0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800408c:	4b1d      	ldr	r3, [pc, #116]	; (8004104 <RCCEx_PLLSAI1_Config+0x1e4>)
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004094:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	6892      	ldr	r2, [r2, #8]
 800409c:	0211      	lsls	r1, r2, #8
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	6952      	ldr	r2, [r2, #20]
 80040a2:	0852      	lsrs	r2, r2, #1
 80040a4:	3a01      	subs	r2, #1
 80040a6:	0652      	lsls	r2, r2, #25
 80040a8:	430a      	orrs	r2, r1
 80040aa:	4916      	ldr	r1, [pc, #88]	; (8004104 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80040b0:	4b14      	ldr	r3, [pc, #80]	; (8004104 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a13      	ldr	r2, [pc, #76]	; (8004104 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040bc:	f7fd fcfe 	bl	8001abc <HAL_GetTick>
 80040c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040c2:	e009      	b.n	80040d8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040c4:	f7fd fcfa 	bl	8001abc <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d902      	bls.n	80040d8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	73fb      	strb	r3, [r7, #15]
          break;
 80040d6:	e005      	b.n	80040e4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040d8:	4b0a      	ldr	r3, [pc, #40]	; (8004104 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d0ef      	beq.n	80040c4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80040e4:	7bfb      	ldrb	r3, [r7, #15]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d106      	bne.n	80040f8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80040ea:	4b06      	ldr	r3, [pc, #24]	; (8004104 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ec:	691a      	ldr	r2, [r3, #16]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	4904      	ldr	r1, [pc, #16]	; (8004104 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	40021000 	.word	0x40021000

08004108 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004112:	2300      	movs	r3, #0
 8004114:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004116:	4b6a      	ldr	r3, [pc, #424]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f003 0303 	and.w	r3, r3, #3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d018      	beq.n	8004154 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004122:	4b67      	ldr	r3, [pc, #412]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	f003 0203 	and.w	r2, r3, #3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	429a      	cmp	r2, r3
 8004130:	d10d      	bne.n	800414e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
       ||
 8004136:	2b00      	cmp	r3, #0
 8004138:	d009      	beq.n	800414e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800413a:	4b61      	ldr	r3, [pc, #388]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	091b      	lsrs	r3, r3, #4
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	1c5a      	adds	r2, r3, #1
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
       ||
 800414a:	429a      	cmp	r2, r3
 800414c:	d047      	beq.n	80041de <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	73fb      	strb	r3, [r7, #15]
 8004152:	e044      	b.n	80041de <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b03      	cmp	r3, #3
 800415a:	d018      	beq.n	800418e <RCCEx_PLLSAI2_Config+0x86>
 800415c:	2b03      	cmp	r3, #3
 800415e:	d825      	bhi.n	80041ac <RCCEx_PLLSAI2_Config+0xa4>
 8004160:	2b01      	cmp	r3, #1
 8004162:	d002      	beq.n	800416a <RCCEx_PLLSAI2_Config+0x62>
 8004164:	2b02      	cmp	r3, #2
 8004166:	d009      	beq.n	800417c <RCCEx_PLLSAI2_Config+0x74>
 8004168:	e020      	b.n	80041ac <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800416a:	4b55      	ldr	r3, [pc, #340]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d11d      	bne.n	80041b2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800417a:	e01a      	b.n	80041b2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800417c:	4b50      	ldr	r3, [pc, #320]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004184:	2b00      	cmp	r3, #0
 8004186:	d116      	bne.n	80041b6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800418c:	e013      	b.n	80041b6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800418e:	4b4c      	ldr	r3, [pc, #304]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10f      	bne.n	80041ba <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800419a:	4b49      	ldr	r3, [pc, #292]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d109      	bne.n	80041ba <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041aa:	e006      	b.n	80041ba <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	73fb      	strb	r3, [r7, #15]
      break;
 80041b0:	e004      	b.n	80041bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041b2:	bf00      	nop
 80041b4:	e002      	b.n	80041bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041b6:	bf00      	nop
 80041b8:	e000      	b.n	80041bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80041bc:	7bfb      	ldrb	r3, [r7, #15]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10d      	bne.n	80041de <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041c2:	4b3f      	ldr	r3, [pc, #252]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6819      	ldr	r1, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	3b01      	subs	r3, #1
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	430b      	orrs	r3, r1
 80041d8:	4939      	ldr	r1, [pc, #228]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041de:	7bfb      	ldrb	r3, [r7, #15]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d167      	bne.n	80042b4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80041e4:	4b36      	ldr	r3, [pc, #216]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a35      	ldr	r2, [pc, #212]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041f0:	f7fd fc64 	bl	8001abc <HAL_GetTick>
 80041f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80041f6:	e009      	b.n	800420c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80041f8:	f7fd fc60 	bl	8001abc <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d902      	bls.n	800420c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	73fb      	strb	r3, [r7, #15]
        break;
 800420a:	e005      	b.n	8004218 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800420c:	4b2c      	ldr	r3, [pc, #176]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1ef      	bne.n	80041f8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004218:	7bfb      	ldrb	r3, [r7, #15]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d14a      	bne.n	80042b4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d111      	bne.n	8004248 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004224:	4b26      	ldr	r3, [pc, #152]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800422c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6892      	ldr	r2, [r2, #8]
 8004234:	0211      	lsls	r1, r2, #8
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	68d2      	ldr	r2, [r2, #12]
 800423a:	0912      	lsrs	r2, r2, #4
 800423c:	0452      	lsls	r2, r2, #17
 800423e:	430a      	orrs	r2, r1
 8004240:	491f      	ldr	r1, [pc, #124]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004242:	4313      	orrs	r3, r2
 8004244:	614b      	str	r3, [r1, #20]
 8004246:	e011      	b.n	800426c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004248:	4b1d      	ldr	r3, [pc, #116]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004250:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6892      	ldr	r2, [r2, #8]
 8004258:	0211      	lsls	r1, r2, #8
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	6912      	ldr	r2, [r2, #16]
 800425e:	0852      	lsrs	r2, r2, #1
 8004260:	3a01      	subs	r2, #1
 8004262:	0652      	lsls	r2, r2, #25
 8004264:	430a      	orrs	r2, r1
 8004266:	4916      	ldr	r1, [pc, #88]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004268:	4313      	orrs	r3, r2
 800426a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800426c:	4b14      	ldr	r3, [pc, #80]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a13      	ldr	r2, [pc, #76]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004276:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004278:	f7fd fc20 	bl	8001abc <HAL_GetTick>
 800427c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800427e:	e009      	b.n	8004294 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004280:	f7fd fc1c 	bl	8001abc <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d902      	bls.n	8004294 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	73fb      	strb	r3, [r7, #15]
          break;
 8004292:	e005      	b.n	80042a0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004294:	4b0a      	ldr	r3, [pc, #40]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0ef      	beq.n	8004280 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80042a0:	7bfb      	ldrb	r3, [r7, #15]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d106      	bne.n	80042b4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80042a6:	4b06      	ldr	r3, [pc, #24]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042a8:	695a      	ldr	r2, [r3, #20]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	4904      	ldr	r1, [pc, #16]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80042b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	40021000 	.word	0x40021000

080042c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e040      	b.n	8004358 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d106      	bne.n	80042ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7fd faf2 	bl	80018d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2224      	movs	r2, #36	; 0x24
 80042f0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f022 0201 	bic.w	r2, r2, #1
 8004300:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004306:	2b00      	cmp	r3, #0
 8004308:	d002      	beq.n	8004310 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 fb6a 	bl	80049e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 f8af 	bl	8004474 <UART_SetConfig>
 8004316:	4603      	mov	r3, r0
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e01b      	b.n	8004358 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800432e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689a      	ldr	r2, [r3, #8]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800433e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0201 	orr.w	r2, r2, #1
 800434e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 fbe9 	bl	8004b28 <UART_CheckIdleState>
 8004356:	4603      	mov	r3, r0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3708      	adds	r7, #8
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b08a      	sub	sp, #40	; 0x28
 8004364:	af02      	add	r7, sp, #8
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	603b      	str	r3, [r7, #0]
 800436c:	4613      	mov	r3, r2
 800436e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004374:	2b20      	cmp	r3, #32
 8004376:	d178      	bne.n	800446a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d002      	beq.n	8004384 <HAL_UART_Transmit+0x24>
 800437e:	88fb      	ldrh	r3, [r7, #6]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d101      	bne.n	8004388 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e071      	b.n	800446c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2221      	movs	r2, #33	; 0x21
 8004394:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004396:	f7fd fb91 	bl	8001abc <HAL_GetTick>
 800439a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	88fa      	ldrh	r2, [r7, #6]
 80043a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	88fa      	ldrh	r2, [r7, #6]
 80043a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b4:	d108      	bne.n	80043c8 <HAL_UART_Transmit+0x68>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d104      	bne.n	80043c8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80043be:	2300      	movs	r3, #0
 80043c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	61bb      	str	r3, [r7, #24]
 80043c6:	e003      	b.n	80043d0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043cc:	2300      	movs	r3, #0
 80043ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80043d0:	e030      	b.n	8004434 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2200      	movs	r2, #0
 80043da:	2180      	movs	r1, #128	; 0x80
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f000 fc4b 	bl	8004c78 <UART_WaitOnFlagUntilTimeout>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d004      	beq.n	80043f2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2220      	movs	r2, #32
 80043ec:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e03c      	b.n	800446c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10b      	bne.n	8004410 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	881a      	ldrh	r2, [r3, #0]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004404:	b292      	uxth	r2, r2
 8004406:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	3302      	adds	r3, #2
 800440c:	61bb      	str	r3, [r7, #24]
 800440e:	e008      	b.n	8004422 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	781a      	ldrb	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	b292      	uxth	r2, r2
 800441a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	3301      	adds	r3, #1
 8004420:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004428:	b29b      	uxth	r3, r3
 800442a:	3b01      	subs	r3, #1
 800442c:	b29a      	uxth	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800443a:	b29b      	uxth	r3, r3
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1c8      	bne.n	80043d2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	9300      	str	r3, [sp, #0]
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	2200      	movs	r2, #0
 8004448:	2140      	movs	r1, #64	; 0x40
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 fc14 	bl	8004c78 <UART_WaitOnFlagUntilTimeout>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d004      	beq.n	8004460 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2220      	movs	r2, #32
 800445a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e005      	b.n	800446c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2220      	movs	r2, #32
 8004464:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004466:	2300      	movs	r3, #0
 8004468:	e000      	b.n	800446c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800446a:	2302      	movs	r3, #2
  }
}
 800446c:	4618      	mov	r0, r3
 800446e:	3720      	adds	r7, #32
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004478:	b08a      	sub	sp, #40	; 0x28
 800447a:	af00      	add	r7, sp, #0
 800447c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800447e:	2300      	movs	r3, #0
 8004480:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	431a      	orrs	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	431a      	orrs	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	4313      	orrs	r3, r2
 800449a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	4ba4      	ldr	r3, [pc, #656]	; (8004734 <UART_SetConfig+0x2c0>)
 80044a4:	4013      	ands	r3, r2
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	6812      	ldr	r2, [r2, #0]
 80044aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044ac:	430b      	orrs	r3, r1
 80044ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	68da      	ldr	r2, [r3, #12]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a99      	ldr	r2, [pc, #612]	; (8004738 <UART_SetConfig+0x2c4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d004      	beq.n	80044e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044dc:	4313      	orrs	r3, r2
 80044de:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f0:	430a      	orrs	r2, r1
 80044f2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a90      	ldr	r2, [pc, #576]	; (800473c <UART_SetConfig+0x2c8>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d126      	bne.n	800454c <UART_SetConfig+0xd8>
 80044fe:	4b90      	ldr	r3, [pc, #576]	; (8004740 <UART_SetConfig+0x2cc>)
 8004500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004504:	f003 0303 	and.w	r3, r3, #3
 8004508:	2b03      	cmp	r3, #3
 800450a:	d81b      	bhi.n	8004544 <UART_SetConfig+0xd0>
 800450c:	a201      	add	r2, pc, #4	; (adr r2, 8004514 <UART_SetConfig+0xa0>)
 800450e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004512:	bf00      	nop
 8004514:	08004525 	.word	0x08004525
 8004518:	08004535 	.word	0x08004535
 800451c:	0800452d 	.word	0x0800452d
 8004520:	0800453d 	.word	0x0800453d
 8004524:	2301      	movs	r3, #1
 8004526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800452a:	e116      	b.n	800475a <UART_SetConfig+0x2e6>
 800452c:	2302      	movs	r3, #2
 800452e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004532:	e112      	b.n	800475a <UART_SetConfig+0x2e6>
 8004534:	2304      	movs	r3, #4
 8004536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800453a:	e10e      	b.n	800475a <UART_SetConfig+0x2e6>
 800453c:	2308      	movs	r3, #8
 800453e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004542:	e10a      	b.n	800475a <UART_SetConfig+0x2e6>
 8004544:	2310      	movs	r3, #16
 8004546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800454a:	e106      	b.n	800475a <UART_SetConfig+0x2e6>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a7c      	ldr	r2, [pc, #496]	; (8004744 <UART_SetConfig+0x2d0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d138      	bne.n	80045c8 <UART_SetConfig+0x154>
 8004556:	4b7a      	ldr	r3, [pc, #488]	; (8004740 <UART_SetConfig+0x2cc>)
 8004558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455c:	f003 030c 	and.w	r3, r3, #12
 8004560:	2b0c      	cmp	r3, #12
 8004562:	d82d      	bhi.n	80045c0 <UART_SetConfig+0x14c>
 8004564:	a201      	add	r2, pc, #4	; (adr r2, 800456c <UART_SetConfig+0xf8>)
 8004566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456a:	bf00      	nop
 800456c:	080045a1 	.word	0x080045a1
 8004570:	080045c1 	.word	0x080045c1
 8004574:	080045c1 	.word	0x080045c1
 8004578:	080045c1 	.word	0x080045c1
 800457c:	080045b1 	.word	0x080045b1
 8004580:	080045c1 	.word	0x080045c1
 8004584:	080045c1 	.word	0x080045c1
 8004588:	080045c1 	.word	0x080045c1
 800458c:	080045a9 	.word	0x080045a9
 8004590:	080045c1 	.word	0x080045c1
 8004594:	080045c1 	.word	0x080045c1
 8004598:	080045c1 	.word	0x080045c1
 800459c:	080045b9 	.word	0x080045b9
 80045a0:	2300      	movs	r3, #0
 80045a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045a6:	e0d8      	b.n	800475a <UART_SetConfig+0x2e6>
 80045a8:	2302      	movs	r3, #2
 80045aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ae:	e0d4      	b.n	800475a <UART_SetConfig+0x2e6>
 80045b0:	2304      	movs	r3, #4
 80045b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045b6:	e0d0      	b.n	800475a <UART_SetConfig+0x2e6>
 80045b8:	2308      	movs	r3, #8
 80045ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045be:	e0cc      	b.n	800475a <UART_SetConfig+0x2e6>
 80045c0:	2310      	movs	r3, #16
 80045c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045c6:	e0c8      	b.n	800475a <UART_SetConfig+0x2e6>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a5e      	ldr	r2, [pc, #376]	; (8004748 <UART_SetConfig+0x2d4>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d125      	bne.n	800461e <UART_SetConfig+0x1aa>
 80045d2:	4b5b      	ldr	r3, [pc, #364]	; (8004740 <UART_SetConfig+0x2cc>)
 80045d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80045dc:	2b30      	cmp	r3, #48	; 0x30
 80045de:	d016      	beq.n	800460e <UART_SetConfig+0x19a>
 80045e0:	2b30      	cmp	r3, #48	; 0x30
 80045e2:	d818      	bhi.n	8004616 <UART_SetConfig+0x1a2>
 80045e4:	2b20      	cmp	r3, #32
 80045e6:	d00a      	beq.n	80045fe <UART_SetConfig+0x18a>
 80045e8:	2b20      	cmp	r3, #32
 80045ea:	d814      	bhi.n	8004616 <UART_SetConfig+0x1a2>
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d002      	beq.n	80045f6 <UART_SetConfig+0x182>
 80045f0:	2b10      	cmp	r3, #16
 80045f2:	d008      	beq.n	8004606 <UART_SetConfig+0x192>
 80045f4:	e00f      	b.n	8004616 <UART_SetConfig+0x1a2>
 80045f6:	2300      	movs	r3, #0
 80045f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045fc:	e0ad      	b.n	800475a <UART_SetConfig+0x2e6>
 80045fe:	2302      	movs	r3, #2
 8004600:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004604:	e0a9      	b.n	800475a <UART_SetConfig+0x2e6>
 8004606:	2304      	movs	r3, #4
 8004608:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800460c:	e0a5      	b.n	800475a <UART_SetConfig+0x2e6>
 800460e:	2308      	movs	r3, #8
 8004610:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004614:	e0a1      	b.n	800475a <UART_SetConfig+0x2e6>
 8004616:	2310      	movs	r3, #16
 8004618:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800461c:	e09d      	b.n	800475a <UART_SetConfig+0x2e6>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a4a      	ldr	r2, [pc, #296]	; (800474c <UART_SetConfig+0x2d8>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d125      	bne.n	8004674 <UART_SetConfig+0x200>
 8004628:	4b45      	ldr	r3, [pc, #276]	; (8004740 <UART_SetConfig+0x2cc>)
 800462a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004632:	2bc0      	cmp	r3, #192	; 0xc0
 8004634:	d016      	beq.n	8004664 <UART_SetConfig+0x1f0>
 8004636:	2bc0      	cmp	r3, #192	; 0xc0
 8004638:	d818      	bhi.n	800466c <UART_SetConfig+0x1f8>
 800463a:	2b80      	cmp	r3, #128	; 0x80
 800463c:	d00a      	beq.n	8004654 <UART_SetConfig+0x1e0>
 800463e:	2b80      	cmp	r3, #128	; 0x80
 8004640:	d814      	bhi.n	800466c <UART_SetConfig+0x1f8>
 8004642:	2b00      	cmp	r3, #0
 8004644:	d002      	beq.n	800464c <UART_SetConfig+0x1d8>
 8004646:	2b40      	cmp	r3, #64	; 0x40
 8004648:	d008      	beq.n	800465c <UART_SetConfig+0x1e8>
 800464a:	e00f      	b.n	800466c <UART_SetConfig+0x1f8>
 800464c:	2300      	movs	r3, #0
 800464e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004652:	e082      	b.n	800475a <UART_SetConfig+0x2e6>
 8004654:	2302      	movs	r3, #2
 8004656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800465a:	e07e      	b.n	800475a <UART_SetConfig+0x2e6>
 800465c:	2304      	movs	r3, #4
 800465e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004662:	e07a      	b.n	800475a <UART_SetConfig+0x2e6>
 8004664:	2308      	movs	r3, #8
 8004666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800466a:	e076      	b.n	800475a <UART_SetConfig+0x2e6>
 800466c:	2310      	movs	r3, #16
 800466e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004672:	e072      	b.n	800475a <UART_SetConfig+0x2e6>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a35      	ldr	r2, [pc, #212]	; (8004750 <UART_SetConfig+0x2dc>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d12a      	bne.n	80046d4 <UART_SetConfig+0x260>
 800467e:	4b30      	ldr	r3, [pc, #192]	; (8004740 <UART_SetConfig+0x2cc>)
 8004680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004684:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004688:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800468c:	d01a      	beq.n	80046c4 <UART_SetConfig+0x250>
 800468e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004692:	d81b      	bhi.n	80046cc <UART_SetConfig+0x258>
 8004694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004698:	d00c      	beq.n	80046b4 <UART_SetConfig+0x240>
 800469a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800469e:	d815      	bhi.n	80046cc <UART_SetConfig+0x258>
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d003      	beq.n	80046ac <UART_SetConfig+0x238>
 80046a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046a8:	d008      	beq.n	80046bc <UART_SetConfig+0x248>
 80046aa:	e00f      	b.n	80046cc <UART_SetConfig+0x258>
 80046ac:	2300      	movs	r3, #0
 80046ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046b2:	e052      	b.n	800475a <UART_SetConfig+0x2e6>
 80046b4:	2302      	movs	r3, #2
 80046b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ba:	e04e      	b.n	800475a <UART_SetConfig+0x2e6>
 80046bc:	2304      	movs	r3, #4
 80046be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046c2:	e04a      	b.n	800475a <UART_SetConfig+0x2e6>
 80046c4:	2308      	movs	r3, #8
 80046c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ca:	e046      	b.n	800475a <UART_SetConfig+0x2e6>
 80046cc:	2310      	movs	r3, #16
 80046ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046d2:	e042      	b.n	800475a <UART_SetConfig+0x2e6>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a17      	ldr	r2, [pc, #92]	; (8004738 <UART_SetConfig+0x2c4>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d13a      	bne.n	8004754 <UART_SetConfig+0x2e0>
 80046de:	4b18      	ldr	r3, [pc, #96]	; (8004740 <UART_SetConfig+0x2cc>)
 80046e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80046e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046ec:	d01a      	beq.n	8004724 <UART_SetConfig+0x2b0>
 80046ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046f2:	d81b      	bhi.n	800472c <UART_SetConfig+0x2b8>
 80046f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046f8:	d00c      	beq.n	8004714 <UART_SetConfig+0x2a0>
 80046fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046fe:	d815      	bhi.n	800472c <UART_SetConfig+0x2b8>
 8004700:	2b00      	cmp	r3, #0
 8004702:	d003      	beq.n	800470c <UART_SetConfig+0x298>
 8004704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004708:	d008      	beq.n	800471c <UART_SetConfig+0x2a8>
 800470a:	e00f      	b.n	800472c <UART_SetConfig+0x2b8>
 800470c:	2300      	movs	r3, #0
 800470e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004712:	e022      	b.n	800475a <UART_SetConfig+0x2e6>
 8004714:	2302      	movs	r3, #2
 8004716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800471a:	e01e      	b.n	800475a <UART_SetConfig+0x2e6>
 800471c:	2304      	movs	r3, #4
 800471e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004722:	e01a      	b.n	800475a <UART_SetConfig+0x2e6>
 8004724:	2308      	movs	r3, #8
 8004726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800472a:	e016      	b.n	800475a <UART_SetConfig+0x2e6>
 800472c:	2310      	movs	r3, #16
 800472e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004732:	e012      	b.n	800475a <UART_SetConfig+0x2e6>
 8004734:	efff69f3 	.word	0xefff69f3
 8004738:	40008000 	.word	0x40008000
 800473c:	40013800 	.word	0x40013800
 8004740:	40021000 	.word	0x40021000
 8004744:	40004400 	.word	0x40004400
 8004748:	40004800 	.word	0x40004800
 800474c:	40004c00 	.word	0x40004c00
 8004750:	40005000 	.word	0x40005000
 8004754:	2310      	movs	r3, #16
 8004756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a9f      	ldr	r2, [pc, #636]	; (80049dc <UART_SetConfig+0x568>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d17a      	bne.n	800485a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004764:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004768:	2b08      	cmp	r3, #8
 800476a:	d824      	bhi.n	80047b6 <UART_SetConfig+0x342>
 800476c:	a201      	add	r2, pc, #4	; (adr r2, 8004774 <UART_SetConfig+0x300>)
 800476e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004772:	bf00      	nop
 8004774:	08004799 	.word	0x08004799
 8004778:	080047b7 	.word	0x080047b7
 800477c:	080047a1 	.word	0x080047a1
 8004780:	080047b7 	.word	0x080047b7
 8004784:	080047a7 	.word	0x080047a7
 8004788:	080047b7 	.word	0x080047b7
 800478c:	080047b7 	.word	0x080047b7
 8004790:	080047b7 	.word	0x080047b7
 8004794:	080047af 	.word	0x080047af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004798:	f7ff f84c 	bl	8003834 <HAL_RCC_GetPCLK1Freq>
 800479c:	61f8      	str	r0, [r7, #28]
        break;
 800479e:	e010      	b.n	80047c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047a0:	4b8f      	ldr	r3, [pc, #572]	; (80049e0 <UART_SetConfig+0x56c>)
 80047a2:	61fb      	str	r3, [r7, #28]
        break;
 80047a4:	e00d      	b.n	80047c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047a6:	f7fe ffad 	bl	8003704 <HAL_RCC_GetSysClockFreq>
 80047aa:	61f8      	str	r0, [r7, #28]
        break;
 80047ac:	e009      	b.n	80047c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047b2:	61fb      	str	r3, [r7, #28]
        break;
 80047b4:	e005      	b.n	80047c2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80047b6:	2300      	movs	r3, #0
 80047b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80047c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 80fb 	beq.w	80049c0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	4613      	mov	r3, r2
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	4413      	add	r3, r2
 80047d4:	69fa      	ldr	r2, [r7, #28]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d305      	bcc.n	80047e6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047e0:	69fa      	ldr	r2, [r7, #28]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d903      	bls.n	80047ee <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80047ec:	e0e8      	b.n	80049c0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	2200      	movs	r2, #0
 80047f2:	461c      	mov	r4, r3
 80047f4:	4615      	mov	r5, r2
 80047f6:	f04f 0200 	mov.w	r2, #0
 80047fa:	f04f 0300 	mov.w	r3, #0
 80047fe:	022b      	lsls	r3, r5, #8
 8004800:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004804:	0222      	lsls	r2, r4, #8
 8004806:	68f9      	ldr	r1, [r7, #12]
 8004808:	6849      	ldr	r1, [r1, #4]
 800480a:	0849      	lsrs	r1, r1, #1
 800480c:	2000      	movs	r0, #0
 800480e:	4688      	mov	r8, r1
 8004810:	4681      	mov	r9, r0
 8004812:	eb12 0a08 	adds.w	sl, r2, r8
 8004816:	eb43 0b09 	adc.w	fp, r3, r9
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	603b      	str	r3, [r7, #0]
 8004822:	607a      	str	r2, [r7, #4]
 8004824:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004828:	4650      	mov	r0, sl
 800482a:	4659      	mov	r1, fp
 800482c:	f7fc f9bc 	bl	8000ba8 <__aeabi_uldivmod>
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	4613      	mov	r3, r2
 8004836:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800483e:	d308      	bcc.n	8004852 <UART_SetConfig+0x3de>
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004846:	d204      	bcs.n	8004852 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	60da      	str	r2, [r3, #12]
 8004850:	e0b6      	b.n	80049c0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004858:	e0b2      	b.n	80049c0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	69db      	ldr	r3, [r3, #28]
 800485e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004862:	d15e      	bne.n	8004922 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004864:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004868:	2b08      	cmp	r3, #8
 800486a:	d828      	bhi.n	80048be <UART_SetConfig+0x44a>
 800486c:	a201      	add	r2, pc, #4	; (adr r2, 8004874 <UART_SetConfig+0x400>)
 800486e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004872:	bf00      	nop
 8004874:	08004899 	.word	0x08004899
 8004878:	080048a1 	.word	0x080048a1
 800487c:	080048a9 	.word	0x080048a9
 8004880:	080048bf 	.word	0x080048bf
 8004884:	080048af 	.word	0x080048af
 8004888:	080048bf 	.word	0x080048bf
 800488c:	080048bf 	.word	0x080048bf
 8004890:	080048bf 	.word	0x080048bf
 8004894:	080048b7 	.word	0x080048b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004898:	f7fe ffcc 	bl	8003834 <HAL_RCC_GetPCLK1Freq>
 800489c:	61f8      	str	r0, [r7, #28]
        break;
 800489e:	e014      	b.n	80048ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048a0:	f7fe ffde 	bl	8003860 <HAL_RCC_GetPCLK2Freq>
 80048a4:	61f8      	str	r0, [r7, #28]
        break;
 80048a6:	e010      	b.n	80048ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048a8:	4b4d      	ldr	r3, [pc, #308]	; (80049e0 <UART_SetConfig+0x56c>)
 80048aa:	61fb      	str	r3, [r7, #28]
        break;
 80048ac:	e00d      	b.n	80048ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048ae:	f7fe ff29 	bl	8003704 <HAL_RCC_GetSysClockFreq>
 80048b2:	61f8      	str	r0, [r7, #28]
        break;
 80048b4:	e009      	b.n	80048ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ba:	61fb      	str	r3, [r7, #28]
        break;
 80048bc:	e005      	b.n	80048ca <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80048be:	2300      	movs	r3, #0
 80048c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80048c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d077      	beq.n	80049c0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	005a      	lsls	r2, r3, #1
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	085b      	lsrs	r3, r3, #1
 80048da:	441a      	add	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	2b0f      	cmp	r3, #15
 80048ea:	d916      	bls.n	800491a <UART_SetConfig+0x4a6>
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f2:	d212      	bcs.n	800491a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	f023 030f 	bic.w	r3, r3, #15
 80048fc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	085b      	lsrs	r3, r3, #1
 8004902:	b29b      	uxth	r3, r3
 8004904:	f003 0307 	and.w	r3, r3, #7
 8004908:	b29a      	uxth	r2, r3
 800490a:	8afb      	ldrh	r3, [r7, #22]
 800490c:	4313      	orrs	r3, r2
 800490e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	8afa      	ldrh	r2, [r7, #22]
 8004916:	60da      	str	r2, [r3, #12]
 8004918:	e052      	b.n	80049c0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004920:	e04e      	b.n	80049c0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004922:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004926:	2b08      	cmp	r3, #8
 8004928:	d827      	bhi.n	800497a <UART_SetConfig+0x506>
 800492a:	a201      	add	r2, pc, #4	; (adr r2, 8004930 <UART_SetConfig+0x4bc>)
 800492c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004930:	08004955 	.word	0x08004955
 8004934:	0800495d 	.word	0x0800495d
 8004938:	08004965 	.word	0x08004965
 800493c:	0800497b 	.word	0x0800497b
 8004940:	0800496b 	.word	0x0800496b
 8004944:	0800497b 	.word	0x0800497b
 8004948:	0800497b 	.word	0x0800497b
 800494c:	0800497b 	.word	0x0800497b
 8004950:	08004973 	.word	0x08004973
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004954:	f7fe ff6e 	bl	8003834 <HAL_RCC_GetPCLK1Freq>
 8004958:	61f8      	str	r0, [r7, #28]
        break;
 800495a:	e014      	b.n	8004986 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800495c:	f7fe ff80 	bl	8003860 <HAL_RCC_GetPCLK2Freq>
 8004960:	61f8      	str	r0, [r7, #28]
        break;
 8004962:	e010      	b.n	8004986 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004964:	4b1e      	ldr	r3, [pc, #120]	; (80049e0 <UART_SetConfig+0x56c>)
 8004966:	61fb      	str	r3, [r7, #28]
        break;
 8004968:	e00d      	b.n	8004986 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800496a:	f7fe fecb 	bl	8003704 <HAL_RCC_GetSysClockFreq>
 800496e:	61f8      	str	r0, [r7, #28]
        break;
 8004970:	e009      	b.n	8004986 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004976:	61fb      	str	r3, [r7, #28]
        break;
 8004978:	e005      	b.n	8004986 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004984:	bf00      	nop
    }

    if (pclk != 0U)
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d019      	beq.n	80049c0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	085a      	lsrs	r2, r3, #1
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	441a      	add	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	fbb2 f3f3 	udiv	r3, r2, r3
 800499e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	2b0f      	cmp	r3, #15
 80049a4:	d909      	bls.n	80049ba <UART_SetConfig+0x546>
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ac:	d205      	bcs.n	80049ba <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	60da      	str	r2, [r3, #12]
 80049b8:	e002      	b.n	80049c0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80049cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3728      	adds	r7, #40	; 0x28
 80049d4:	46bd      	mov	sp, r7
 80049d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049da:	bf00      	nop
 80049dc:	40008000 	.word	0x40008000
 80049e0:	00f42400 	.word	0x00f42400

080049e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f0:	f003 0308 	and.w	r3, r3, #8
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00a      	beq.n	8004a0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00a      	beq.n	8004a30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00a      	beq.n	8004a52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	f003 0304 	and.w	r3, r3, #4
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a78:	f003 0310 	and.w	r3, r3, #16
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00a      	beq.n	8004a96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9a:	f003 0320 	and.w	r3, r3, #32
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00a      	beq.n	8004ab8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d01a      	beq.n	8004afa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ae2:	d10a      	bne.n	8004afa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00a      	beq.n	8004b1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	605a      	str	r2, [r3, #4]
  }
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b098      	sub	sp, #96	; 0x60
 8004b2c:	af02      	add	r7, sp, #8
 8004b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b38:	f7fc ffc0 	bl	8001abc <HAL_GetTick>
 8004b3c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0308 	and.w	r3, r3, #8
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d12e      	bne.n	8004baa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b54:	2200      	movs	r2, #0
 8004b56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f88c 	bl	8004c78 <UART_WaitOnFlagUntilTimeout>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d021      	beq.n	8004baa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b6e:	e853 3f00 	ldrex	r3, [r3]
 8004b72:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b7a:	653b      	str	r3, [r7, #80]	; 0x50
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	461a      	mov	r2, r3
 8004b82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b84:	647b      	str	r3, [r7, #68]	; 0x44
 8004b86:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b8c:	e841 2300 	strex	r3, r2, [r1]
 8004b90:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1e6      	bne.n	8004b66 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e062      	b.n	8004c70 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0304 	and.w	r3, r3, #4
 8004bb4:	2b04      	cmp	r3, #4
 8004bb6:	d149      	bne.n	8004c4c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f856 	bl	8004c78 <UART_WaitOnFlagUntilTimeout>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d03c      	beq.n	8004c4c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bda:	e853 3f00 	ldrex	r3, [r3]
 8004bde:	623b      	str	r3, [r7, #32]
   return(result);
 8004be0:	6a3b      	ldr	r3, [r7, #32]
 8004be2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004be6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	461a      	mov	r2, r3
 8004bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bf0:	633b      	str	r3, [r7, #48]	; 0x30
 8004bf2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bf8:	e841 2300 	strex	r3, r2, [r1]
 8004bfc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1e6      	bne.n	8004bd2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	3308      	adds	r3, #8
 8004c0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	e853 3f00 	ldrex	r3, [r3]
 8004c12:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f023 0301 	bic.w	r3, r3, #1
 8004c1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3308      	adds	r3, #8
 8004c22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c24:	61fa      	str	r2, [r7, #28]
 8004c26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c28:	69b9      	ldr	r1, [r7, #24]
 8004c2a:	69fa      	ldr	r2, [r7, #28]
 8004c2c:	e841 2300 	strex	r3, r2, [r1]
 8004c30:	617b      	str	r3, [r7, #20]
   return(result);
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1e5      	bne.n	8004c04 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e011      	b.n	8004c70 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2220      	movs	r2, #32
 8004c56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3758      	adds	r7, #88	; 0x58
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	603b      	str	r3, [r7, #0]
 8004c84:	4613      	mov	r3, r2
 8004c86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c88:	e04f      	b.n	8004d2a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c90:	d04b      	beq.n	8004d2a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c92:	f7fc ff13 	bl	8001abc <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	69ba      	ldr	r2, [r7, #24]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d302      	bcc.n	8004ca8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d101      	bne.n	8004cac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e04e      	b.n	8004d4a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0304 	and.w	r3, r3, #4
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d037      	beq.n	8004d2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2b80      	cmp	r3, #128	; 0x80
 8004cbe:	d034      	beq.n	8004d2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	2b40      	cmp	r3, #64	; 0x40
 8004cc4:	d031      	beq.n	8004d2a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	f003 0308 	and.w	r3, r3, #8
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	d110      	bne.n	8004cf6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2208      	movs	r2, #8
 8004cda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f000 f838 	bl	8004d52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2208      	movs	r2, #8
 8004ce6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e029      	b.n	8004d4a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	69db      	ldr	r3, [r3, #28]
 8004cfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d04:	d111      	bne.n	8004d2a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f000 f81e 	bl	8004d52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e00f      	b.n	8004d4a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	69da      	ldr	r2, [r3, #28]
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	4013      	ands	r3, r2
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	bf0c      	ite	eq
 8004d3a:	2301      	moveq	r3, #1
 8004d3c:	2300      	movne	r3, #0
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	461a      	mov	r2, r3
 8004d42:	79fb      	ldrb	r3, [r7, #7]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d0a0      	beq.n	8004c8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b095      	sub	sp, #84	; 0x54
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d62:	e853 3f00 	ldrex	r3, [r3]
 8004d66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	461a      	mov	r2, r3
 8004d76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d78:	643b      	str	r3, [r7, #64]	; 0x40
 8004d7a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d80:	e841 2300 	strex	r3, r2, [r1]
 8004d84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1e6      	bne.n	8004d5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	3308      	adds	r3, #8
 8004d92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d94:	6a3b      	ldr	r3, [r7, #32]
 8004d96:	e853 3f00 	ldrex	r3, [r3]
 8004d9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	f023 0301 	bic.w	r3, r3, #1
 8004da2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	3308      	adds	r3, #8
 8004daa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004db2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004db4:	e841 2300 	strex	r3, r2, [r1]
 8004db8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1e5      	bne.n	8004d8c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d118      	bne.n	8004dfa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	e853 3f00 	ldrex	r3, [r3]
 8004dd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	f023 0310 	bic.w	r3, r3, #16
 8004ddc:	647b      	str	r3, [r7, #68]	; 0x44
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	461a      	mov	r2, r3
 8004de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004de6:	61bb      	str	r3, [r7, #24]
 8004de8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dea:	6979      	ldr	r1, [r7, #20]
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	e841 2300 	strex	r3, r2, [r1]
 8004df2:	613b      	str	r3, [r7, #16]
   return(result);
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1e6      	bne.n	8004dc8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004e0e:	bf00      	nop
 8004e10:	3754      	adds	r7, #84	; 0x54
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 8004e1a:	b590      	push	{r4, r7, lr}
 8004e1c:	b087      	sub	sp, #28
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	60f8      	str	r0, [r7, #12]
 8004e22:	607a      	str	r2, [r7, #4]
 8004e24:	461a      	mov	r2, r3
 8004e26:	460b      	mov	r3, r1
 8004e28:	72fb      	strb	r3, [r7, #11]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	685c      	ldr	r4, [r3, #4]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	68d8      	ldr	r0, [r3, #12]
 8004e36:	893b      	ldrh	r3, [r7, #8]
 8004e38:	7af9      	ldrb	r1, [r7, #11]
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	47a0      	blx	r4
 8004e3e:	6178      	str	r0, [r7, #20]

  return ret;
 8004e40:	697b      	ldr	r3, [r7, #20]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	371c      	adds	r7, #28
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd90      	pop	{r4, r7, pc}

08004e4a <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8004e4a:	b590      	push	{r4, r7, lr}
 8004e4c:	b087      	sub	sp, #28
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	60f8      	str	r0, [r7, #12]
 8004e52:	607a      	str	r2, [r7, #4]
 8004e54:	461a      	mov	r2, r3
 8004e56:	460b      	mov	r3, r1
 8004e58:	72fb      	strb	r3, [r7, #11]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681c      	ldr	r4, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	68d8      	ldr	r0, [r3, #12]
 8004e66:	893b      	ldrh	r3, [r7, #8]
 8004e68:	7af9      	ldrb	r1, [r7, #11]
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	47a0      	blx	r4
 8004e6e:	6178      	str	r0, [r7, #20]

  return ret;
 8004e70:	697b      	ldr	r3, [r7, #20]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	371c      	adds	r7, #28
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd90      	pop	{r4, r7, pc}

08004e7a <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b084      	sub	sp, #16
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
 8004e82:	460b      	mov	r3, r1
 8004e84:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004e86:	f107 0208 	add.w	r2, r7, #8
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	2120      	movs	r1, #32
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7ff ffc3 	bl	8004e1a <hts221_read_reg>
 8004e94:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10f      	bne.n	8004ebc <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8004e9c:	78fb      	ldrb	r3, [r7, #3]
 8004e9e:	f003 0303 	and.w	r3, r3, #3
 8004ea2:	b2da      	uxtb	r2, r3
 8004ea4:	7a3b      	ldrb	r3, [r7, #8]
 8004ea6:	f362 0301 	bfi	r3, r2, #0, #2
 8004eaa:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004eac:	f107 0208 	add.w	r2, r7, #8
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	2120      	movs	r1, #32
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f7ff ffc8 	bl	8004e4a <hts221_write_reg>
 8004eba:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b084      	sub	sp, #16
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	460b      	mov	r3, r1
 8004ed0:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004ed2:	f107 0208 	add.w	r2, r7, #8
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	2120      	movs	r1, #32
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7ff ff9d 	bl	8004e1a <hts221_read_reg>
 8004ee0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10f      	bne.n	8004f08 <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004ee8:	78fb      	ldrb	r3, [r7, #3]
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	b2da      	uxtb	r2, r3
 8004ef0:	7a3b      	ldrb	r3, [r7, #8]
 8004ef2:	f362 0382 	bfi	r3, r2, #2, #1
 8004ef6:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004ef8:	f107 0208 	add.w	r2, r7, #8
 8004efc:	2301      	movs	r3, #1
 8004efe:	2120      	movs	r1, #32
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f7ff ffa2 	bl	8004e4a <hts221_write_reg>
 8004f06:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004f08:	68fb      	ldr	r3, [r7, #12]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b084      	sub	sp, #16
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
 8004f1a:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8004f1c:	f107 0208 	add.w	r2, r7, #8
 8004f20:	2302      	movs	r3, #2
 8004f22:	2128      	movs	r1, #40	; 0x28
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f7ff ff78 	bl	8004e1a <hts221_read_reg>
 8004f2a:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8004f2c:	7a7b      	ldrb	r3, [r7, #9]
 8004f2e:	b21a      	sxth	r2, r3
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	021b      	lsls	r3, r3, #8
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	7a3b      	ldrb	r3, [r7, #8]
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	4413      	add	r3, r2
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	b21a      	sxth	r2, r3
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	801a      	strh	r2, [r3, #0]

  return ret;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8004f62:	f107 0208 	add.w	r2, r7, #8
 8004f66:	2302      	movs	r3, #2
 8004f68:	212a      	movs	r1, #42	; 0x2a
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7ff ff55 	bl	8004e1a <hts221_read_reg>
 8004f70:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8004f72:	7a7b      	ldrb	r3, [r7, #9]
 8004f74:	b21a      	sxth	r2, r3
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	021b      	lsls	r3, r3, #8
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	7a3b      	ldrb	r3, [r7, #8]
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	4413      	add	r3, r2
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	b21a      	sxth	r2, r3
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	801a      	strh	r2, [r3, #0]

  return ret;
 8004f94:	68fb      	ldr	r3, [r7, #12]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b084      	sub	sp, #16
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
 8004fa6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8004fa8:	2301      	movs	r3, #1
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	210f      	movs	r1, #15
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7ff ff33 	bl	8004e1a <hts221_read_reg>
 8004fb4:	60f8      	str	r0, [r7, #12]

  return ret;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3710      	adds	r7, #16
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	460b      	mov	r3, r1
 8004fca:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004fcc:	f107 0208 	add.w	r2, r7, #8
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	2120      	movs	r1, #32
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7ff ff20 	bl	8004e1a <hts221_read_reg>
 8004fda:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10f      	bne.n	8005002 <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 8004fe2:	78fb      	ldrb	r3, [r7, #3]
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	b2da      	uxtb	r2, r3
 8004fea:	7a3b      	ldrb	r3, [r7, #8]
 8004fec:	f362 13c7 	bfi	r3, r2, #7, #1
 8004ff0:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004ff2:	f107 0208 	add.w	r2, r7, #8
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	2120      	movs	r1, #32
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7ff ff25 	bl	8004e4a <hts221_write_reg>
 8005000:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005002:	68fb      	ldr	r3, [r7, #12]
}
 8005004:	4618      	mov	r0, r3
 8005006:	3710      	adds	r7, #16
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <hts221_status_get>:
  * @param  val     Registers STATUS_REG
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_status_get(stmdev_ctx_t *ctx, hts221_status_reg_t *val)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_STATUS_REG, (uint8_t *) val, 1);
 8005016:	2301      	movs	r3, #1
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	2127      	movs	r1, #39	; 0x27
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f7ff fefc 	bl	8004e1a <hts221_read_reg>
 8005022:	60f8      	str	r0, [r7, #12]

  return ret;
 8005024:	68fb      	ldr	r3, [r7, #12]
}
 8005026:	4618      	mov	r0, r3
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b084      	sub	sp, #16
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
 8005036:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8005038:	f107 020b 	add.w	r2, r7, #11
 800503c:	2301      	movs	r3, #1
 800503e:	2130      	movs	r1, #48	; 0x30
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f7ff feea 	bl	8004e1a <hts221_read_reg>
 8005046:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8005048:	7afb      	ldrb	r3, [r7, #11]
 800504a:	ee07 3a90 	vmov	s15, r3
 800504e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005052:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005056:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8005060:	68fb      	ldr	r3, [r7, #12]
}
 8005062:	4618      	mov	r0, r3
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b084      	sub	sp, #16
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
 8005072:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8005074:	f107 020b 	add.w	r2, r7, #11
 8005078:	2301      	movs	r3, #1
 800507a:	2131      	movs	r1, #49	; 0x31
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f7ff fecc 	bl	8004e1a <hts221_read_reg>
 8005082:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8005084:	7afb      	ldrb	r3, [r7, #11]
 8005086:	ee07 3a90 	vmov	s15, r3
 800508a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800508e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005092:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 800509c:	68fb      	ldr	r3, [r7, #12]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b086      	sub	sp, #24
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
 80050ae:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h;
  uint8_t coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 80050b0:	f107 020f 	add.w	r2, r7, #15
 80050b4:	2301      	movs	r3, #1
 80050b6:	2132      	movs	r1, #50	; 0x32
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f7ff feae 	bl	8004e1a <hts221_read_reg>
 80050be:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d11b      	bne.n	80050fe <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 80050c6:	f107 0210 	add.w	r2, r7, #16
 80050ca:	2301      	movs	r3, #1
 80050cc:	2135      	movs	r1, #53	; 0x35
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f7ff fea3 	bl	8004e1a <hts221_read_reg>
 80050d4:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 80050d6:	7c3b      	ldrb	r3, [r7, #16]
 80050d8:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 80050e0:	7cfb      	ldrb	r3, [r7, #19]
 80050e2:	021b      	lsls	r3, r3, #8
 80050e4:	7bfa      	ldrb	r2, [r7, #15]
 80050e6:	4413      	add	r3, r2
 80050e8:	ee07 3a90 	vmov	s15, r3
 80050ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050f0:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80050f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 80050fe:	697b      	ldr	r3, [r7, #20]
}
 8005100:	4618      	mov	r0, r3
 8005102:	3718      	adds	r7, #24
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h;
  uint8_t coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8005112:	f107 020f 	add.w	r2, r7, #15
 8005116:	2301      	movs	r3, #1
 8005118:	2133      	movs	r1, #51	; 0x33
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7ff fe7d 	bl	8004e1a <hts221_read_reg>
 8005120:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d11b      	bne.n	8005160 <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8005128:	f107 0210 	add.w	r2, r7, #16
 800512c:	2301      	movs	r3, #1
 800512e:	2135      	movs	r1, #53	; 0x35
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7ff fe72 	bl	8004e1a <hts221_read_reg>
 8005136:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8005138:	7c3b      	ldrb	r3, [r7, #16]
 800513a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800513e:	b2db      	uxtb	r3, r3
 8005140:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8005142:	7cfb      	ldrb	r3, [r7, #19]
 8005144:	021b      	lsls	r3, r3, #8
 8005146:	7bfa      	ldrb	r2, [r7, #15]
 8005148:	4413      	add	r3, r2
 800514a:	ee07 3a90 	vmov	s15, r3
 800514e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005152:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8005156:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8005160:	697b      	ldr	r3, [r7, #20]
}
 8005162:	4618      	mov	r0, r3
 8005164:	3718      	adds	r7, #24
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b084      	sub	sp, #16
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
 8005172:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8005174:	f107 0208 	add.w	r2, r7, #8
 8005178:	2302      	movs	r3, #2
 800517a:	2136      	movs	r1, #54	; 0x36
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f7ff fe4c 	bl	8004e1a <hts221_read_reg>
 8005182:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8005184:	7a7b      	ldrb	r3, [r7, #9]
 8005186:	b29b      	uxth	r3, r3
 8005188:	021b      	lsls	r3, r3, #8
 800518a:	b29a      	uxth	r2, r3
 800518c:	7a3b      	ldrb	r3, [r7, #8]
 800518e:	b29b      	uxth	r3, r3
 8005190:	4413      	add	r3, r2
 8005192:	b29b      	uxth	r3, r3
 8005194:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8005196:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800519a:	ee07 3a90 	vmov	s15, r3
 800519e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80051a8:	68fb      	ldr	r3, [r7, #12]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b084      	sub	sp, #16
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 80051bc:	f107 0208 	add.w	r2, r7, #8
 80051c0:	2302      	movs	r3, #2
 80051c2:	213a      	movs	r1, #58	; 0x3a
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f7ff fe28 	bl	8004e1a <hts221_read_reg>
 80051ca:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80051cc:	7a7b      	ldrb	r3, [r7, #9]
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	021b      	lsls	r3, r3, #8
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	7a3b      	ldrb	r3, [r7, #8]
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	4413      	add	r3, r2
 80051da:	b29b      	uxth	r3, r3
 80051dc:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80051de:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80051e2:	ee07 3a90 	vmov	s15, r3
 80051e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80051f0:	68fb      	ldr	r3, [r7, #12]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b084      	sub	sp, #16
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
 8005202:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8005204:	f107 0208 	add.w	r2, r7, #8
 8005208:	2302      	movs	r3, #2
 800520a:	213c      	movs	r1, #60	; 0x3c
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f7ff fe04 	bl	8004e1a <hts221_read_reg>
 8005212:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8005214:	7a7b      	ldrb	r3, [r7, #9]
 8005216:	b29b      	uxth	r3, r3
 8005218:	021b      	lsls	r3, r3, #8
 800521a:	b29a      	uxth	r2, r3
 800521c:	7a3b      	ldrb	r3, [r7, #8]
 800521e:	b29b      	uxth	r3, r3
 8005220:	4413      	add	r3, r2
 8005222:	b29b      	uxth	r3, r3
 8005224:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8005226:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800522a:	ee07 3a90 	vmov	s15, r3
 800522e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8005238:	68fb      	ldr	r3, [r7, #12]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b084      	sub	sp, #16
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
 800524a:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 800524c:	f107 0208 	add.w	r2, r7, #8
 8005250:	2302      	movs	r3, #2
 8005252:	213e      	movs	r1, #62	; 0x3e
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f7ff fde0 	bl	8004e1a <hts221_read_reg>
 800525a:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800525c:	7a7b      	ldrb	r3, [r7, #9]
 800525e:	b29b      	uxth	r3, r3
 8005260:	021b      	lsls	r3, r3, #8
 8005262:	b29a      	uxth	r2, r3
 8005264:	7a3b      	ldrb	r3, [r7, #8]
 8005266:	b29b      	uxth	r3, r3
 8005268:	4413      	add	r3, r2
 800526a:	b29b      	uxth	r3, r3
 800526c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800526e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005272:	ee07 3a90 	vmov	s15, r3
 8005276:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8005280:	68fb      	ldr	r3, [r7, #12]
}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800528a:	b590      	push	{r4, r7, lr}
 800528c:	b087      	sub	sp, #28
 800528e:	af00      	add	r7, sp, #0
 8005290:	60f8      	str	r0, [r7, #12]
 8005292:	607a      	str	r2, [r7, #4]
 8005294:	461a      	mov	r2, r3
 8005296:	460b      	mov	r3, r1
 8005298:	72fb      	strb	r3, [r7, #11]
 800529a:	4613      	mov	r3, r2
 800529c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	685c      	ldr	r4, [r3, #4]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	68d8      	ldr	r0, [r3, #12]
 80052a6:	893b      	ldrh	r3, [r7, #8]
 80052a8:	7af9      	ldrb	r1, [r7, #11]
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	47a0      	blx	r4
 80052ae:	6178      	str	r0, [r7, #20]

  return ret;
 80052b0:	697b      	ldr	r3, [r7, #20]
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	371c      	adds	r7, #28
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd90      	pop	{r4, r7, pc}

080052ba <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80052ba:	b590      	push	{r4, r7, lr}
 80052bc:	b087      	sub	sp, #28
 80052be:	af00      	add	r7, sp, #0
 80052c0:	60f8      	str	r0, [r7, #12]
 80052c2:	607a      	str	r2, [r7, #4]
 80052c4:	461a      	mov	r2, r3
 80052c6:	460b      	mov	r3, r1
 80052c8:	72fb      	strb	r3, [r7, #11]
 80052ca:	4613      	mov	r3, r2
 80052cc:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681c      	ldr	r4, [r3, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	68d8      	ldr	r0, [r3, #12]
 80052d6:	893b      	ldrh	r3, [r7, #8]
 80052d8:	7af9      	ldrb	r1, [r7, #11]
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	47a0      	blx	r4
 80052de:	6178      	str	r0, [r7, #20]

  return ret;
 80052e0:	697b      	ldr	r3, [r7, #20]
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	371c      	adds	r7, #28
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd90      	pop	{r4, r7, pc}
	...

080052ec <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	ee07 3a90 	vmov	s15, r3
 80052fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052fe:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005318 <lps22hh_from_lsb_to_hpa+0x2c>
 8005302:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005306:	eef0 7a66 	vmov.f32	s15, s13
}
 800530a:	eeb0 0a67 	vmov.f32	s0, s15
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr
 8005318:	49800000 	.word	0x49800000

0800531c <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	4603      	mov	r3, r0
 8005324:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8005326:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800532a:	ee07 3a90 	vmov	s15, r3
 800532e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005332:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800534c <lps22hh_from_lsb_to_celsius+0x30>
 8005336:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800533a:	eef0 7a66 	vmov.f32	s15, s13
}
 800533e:	eeb0 0a67 	vmov.f32	s0, s15
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	42c80000 	.word	0x42c80000

08005350 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	460b      	mov	r3, r1
 800535a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800535c:	f107 0208 	add.w	r2, r7, #8
 8005360:	2301      	movs	r3, #1
 8005362:	2110      	movs	r1, #16
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7ff ff90 	bl	800528a <lps22hh_read_reg>
 800536a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10f      	bne.n	8005392 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8005372:	78fb      	ldrb	r3, [r7, #3]
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	b2da      	uxtb	r2, r3
 800537a:	7a3b      	ldrb	r3, [r7, #8]
 800537c:	f362 0341 	bfi	r3, r2, #1, #1
 8005380:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005382:	f107 0208 	add.w	r2, r7, #8
 8005386:	2301      	movs	r3, #1
 8005388:	2110      	movs	r1, #16
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f7ff ff95 	bl	80052ba <lps22hh_write_reg>
 8005390:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005392:	68fb      	ldr	r3, [r7, #12]
}
 8005394:	4618      	mov	r0, r3
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	460b      	mov	r3, r1
 80053a6:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80053a8:	f107 0210 	add.w	r2, r7, #16
 80053ac:	2301      	movs	r3, #1
 80053ae:	2110      	movs	r1, #16
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f7ff ff6a 	bl	800528a <lps22hh_read_reg>
 80053b6:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d107      	bne.n	80053ce <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80053be:	f107 020c 	add.w	r2, r7, #12
 80053c2:	2301      	movs	r3, #1
 80053c4:	2111      	movs	r1, #17
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f7ff ff5f 	bl	800528a <lps22hh_read_reg>
 80053cc:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10f      	bne.n	80053f4 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 80053d4:	78fb      	ldrb	r3, [r7, #3]
 80053d6:	f003 0307 	and.w	r3, r3, #7
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	7c3b      	ldrb	r3, [r7, #16]
 80053de:	f362 1306 	bfi	r3, r2, #4, #3
 80053e2:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80053e4:	f107 0210 	add.w	r2, r7, #16
 80053e8:	2301      	movs	r3, #1
 80053ea:	2110      	movs	r1, #16
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f7ff ff64 	bl	80052ba <lps22hh_write_reg>
 80053f2:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d119      	bne.n	800542e <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 80053fa:	78fb      	ldrb	r3, [r7, #3]
 80053fc:	091b      	lsrs	r3, r3, #4
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	b2da      	uxtb	r2, r3
 8005404:	7b3b      	ldrb	r3, [r7, #12]
 8005406:	f362 0341 	bfi	r3, r2, #1, #1
 800540a:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 800540c:	78fb      	ldrb	r3, [r7, #3]
 800540e:	08db      	lsrs	r3, r3, #3
 8005410:	f003 0301 	and.w	r3, r3, #1
 8005414:	b2da      	uxtb	r2, r3
 8005416:	7b3b      	ldrb	r3, [r7, #12]
 8005418:	f362 0300 	bfi	r3, r2, #0, #1
 800541c:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800541e:	f107 020c 	add.w	r2, r7, #12
 8005422:	2301      	movs	r3, #1
 8005424:	2111      	movs	r1, #17
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f7ff ff47 	bl	80052ba <lps22hh_write_reg>
 800542c:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800542e:	697b      	ldr	r3, [r7, #20]
}
 8005430:	4618      	mov	r0, r3
 8005432:	3718      	adds	r7, #24
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8005442:	f107 0208 	add.w	r2, r7, #8
 8005446:	2303      	movs	r3, #3
 8005448:	2128      	movs	r1, #40	; 0x28
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f7ff ff1d 	bl	800528a <lps22hh_read_reg>
 8005450:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8005452:	7abb      	ldrb	r3, [r7, #10]
 8005454:	461a      	mov	r2, r3
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[1];
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	021b      	lsls	r3, r3, #8
 8005460:	7a7a      	ldrb	r2, [r7, #9]
 8005462:	441a      	add	r2, r3
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[0];
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	021b      	lsls	r3, r3, #8
 800546e:	7a3a      	ldrb	r2, [r7, #8]
 8005470:	441a      	add	r2, r3
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	601a      	str	r2, [r3, #0]
  *buff *= 256U;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	021a      	lsls	r2, r3, #8
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	601a      	str	r2, [r3, #0]

  return ret;
 8005480:	68fb      	ldr	r3, [r7, #12]
}
 8005482:	4618      	mov	r0, r3
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 800548a:	b580      	push	{r7, lr}
 800548c:	b084      	sub	sp, #16
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
 8005492:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[2];

  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8005494:	f107 0208 	add.w	r2, r7, #8
 8005498:	2302      	movs	r3, #2
 800549a:	212b      	movs	r1, #43	; 0x2b
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f7ff fef4 	bl	800528a <lps22hh_read_reg>
 80054a2:	60f8      	str	r0, [r7, #12]
  *buff = (int16_t)reg[1];
 80054a4:	7a7b      	ldrb	r3, [r7, #9]
 80054a6:	b21a      	sxth	r2, r3
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + (int16_t)reg[0];
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	021b      	lsls	r3, r3, #8
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	7a3b      	ldrb	r3, [r7, #8]
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	4413      	add	r3, r2
 80054be:	b29b      	uxth	r3, r3
 80054c0:	b21a      	sxth	r2, r3
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	801a      	strh	r2, [r3, #0]

  return ret;
 80054c6:	68fb      	ldr	r3, [r7, #12]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 80054da:	2301      	movs	r3, #1
 80054dc:	683a      	ldr	r2, [r7, #0]
 80054de:	210f      	movs	r1, #15
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f7ff fed2 	bl	800528a <lps22hh_read_reg>
 80054e6:	60f8      	str	r0, [r7, #12]

  return ret;
 80054e8:	68fb      	ldr	r3, [r7, #12]
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b084      	sub	sp, #16
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
 80054fa:	460b      	mov	r3, r1
 80054fc:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80054fe:	f107 0208 	add.w	r2, r7, #8
 8005502:	2301      	movs	r3, #1
 8005504:	2111      	movs	r1, #17
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f7ff febf 	bl	800528a <lps22hh_read_reg>
 800550c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10f      	bne.n	8005534 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8005514:	78fb      	ldrb	r3, [r7, #3]
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	b2da      	uxtb	r2, r3
 800551c:	7a3b      	ldrb	r3, [r7, #8]
 800551e:	f362 0382 	bfi	r3, r2, #2, #1
 8005522:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005524:	f107 0208 	add.w	r2, r7, #8
 8005528:	2301      	movs	r3, #1
 800552a:	2111      	movs	r1, #17
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f7ff fec4 	bl	80052ba <lps22hh_write_reg>
 8005532:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005534:	68fb      	ldr	r3, [r7, #12]
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b084      	sub	sp, #16
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
 8005546:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005548:	f107 0208 	add.w	r2, r7, #8
 800554c:	2301      	movs	r3, #1
 800554e:	2111      	movs	r1, #17
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f7ff fe9a 	bl	800528a <lps22hh_read_reg>
 8005556:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8005558:	7a3b      	ldrb	r3, [r7, #8]
 800555a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800555e:	b2db      	uxtb	r3, r3
 8005560:	461a      	mov	r2, r3
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	701a      	strb	r2, [r3, #0]

  return ret;
 8005566:	68fb      	ldr	r3, [r7, #12]
}
 8005568:	4618      	mov	r0, r3
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <__cvt>:
 8005570:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005574:	ec55 4b10 	vmov	r4, r5, d0
 8005578:	2d00      	cmp	r5, #0
 800557a:	460e      	mov	r6, r1
 800557c:	4619      	mov	r1, r3
 800557e:	462b      	mov	r3, r5
 8005580:	bfbb      	ittet	lt
 8005582:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005586:	461d      	movlt	r5, r3
 8005588:	2300      	movge	r3, #0
 800558a:	232d      	movlt	r3, #45	; 0x2d
 800558c:	700b      	strb	r3, [r1, #0]
 800558e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005590:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005594:	4691      	mov	r9, r2
 8005596:	f023 0820 	bic.w	r8, r3, #32
 800559a:	bfbc      	itt	lt
 800559c:	4622      	movlt	r2, r4
 800559e:	4614      	movlt	r4, r2
 80055a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80055a4:	d005      	beq.n	80055b2 <__cvt+0x42>
 80055a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80055aa:	d100      	bne.n	80055ae <__cvt+0x3e>
 80055ac:	3601      	adds	r6, #1
 80055ae:	2102      	movs	r1, #2
 80055b0:	e000      	b.n	80055b4 <__cvt+0x44>
 80055b2:	2103      	movs	r1, #3
 80055b4:	ab03      	add	r3, sp, #12
 80055b6:	9301      	str	r3, [sp, #4]
 80055b8:	ab02      	add	r3, sp, #8
 80055ba:	9300      	str	r3, [sp, #0]
 80055bc:	ec45 4b10 	vmov	d0, r4, r5
 80055c0:	4653      	mov	r3, sl
 80055c2:	4632      	mov	r2, r6
 80055c4:	f000 ff4c 	bl	8006460 <_dtoa_r>
 80055c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80055cc:	4607      	mov	r7, r0
 80055ce:	d102      	bne.n	80055d6 <__cvt+0x66>
 80055d0:	f019 0f01 	tst.w	r9, #1
 80055d4:	d022      	beq.n	800561c <__cvt+0xac>
 80055d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80055da:	eb07 0906 	add.w	r9, r7, r6
 80055de:	d110      	bne.n	8005602 <__cvt+0x92>
 80055e0:	783b      	ldrb	r3, [r7, #0]
 80055e2:	2b30      	cmp	r3, #48	; 0x30
 80055e4:	d10a      	bne.n	80055fc <__cvt+0x8c>
 80055e6:	2200      	movs	r2, #0
 80055e8:	2300      	movs	r3, #0
 80055ea:	4620      	mov	r0, r4
 80055ec:	4629      	mov	r1, r5
 80055ee:	f7fb fa6b 	bl	8000ac8 <__aeabi_dcmpeq>
 80055f2:	b918      	cbnz	r0, 80055fc <__cvt+0x8c>
 80055f4:	f1c6 0601 	rsb	r6, r6, #1
 80055f8:	f8ca 6000 	str.w	r6, [sl]
 80055fc:	f8da 3000 	ldr.w	r3, [sl]
 8005600:	4499      	add	r9, r3
 8005602:	2200      	movs	r2, #0
 8005604:	2300      	movs	r3, #0
 8005606:	4620      	mov	r0, r4
 8005608:	4629      	mov	r1, r5
 800560a:	f7fb fa5d 	bl	8000ac8 <__aeabi_dcmpeq>
 800560e:	b108      	cbz	r0, 8005614 <__cvt+0xa4>
 8005610:	f8cd 900c 	str.w	r9, [sp, #12]
 8005614:	2230      	movs	r2, #48	; 0x30
 8005616:	9b03      	ldr	r3, [sp, #12]
 8005618:	454b      	cmp	r3, r9
 800561a:	d307      	bcc.n	800562c <__cvt+0xbc>
 800561c:	9b03      	ldr	r3, [sp, #12]
 800561e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005620:	1bdb      	subs	r3, r3, r7
 8005622:	4638      	mov	r0, r7
 8005624:	6013      	str	r3, [r2, #0]
 8005626:	b004      	add	sp, #16
 8005628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800562c:	1c59      	adds	r1, r3, #1
 800562e:	9103      	str	r1, [sp, #12]
 8005630:	701a      	strb	r2, [r3, #0]
 8005632:	e7f0      	b.n	8005616 <__cvt+0xa6>

08005634 <__exponent>:
 8005634:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005636:	4603      	mov	r3, r0
 8005638:	2900      	cmp	r1, #0
 800563a:	bfb8      	it	lt
 800563c:	4249      	neglt	r1, r1
 800563e:	f803 2b02 	strb.w	r2, [r3], #2
 8005642:	bfb4      	ite	lt
 8005644:	222d      	movlt	r2, #45	; 0x2d
 8005646:	222b      	movge	r2, #43	; 0x2b
 8005648:	2909      	cmp	r1, #9
 800564a:	7042      	strb	r2, [r0, #1]
 800564c:	dd2a      	ble.n	80056a4 <__exponent+0x70>
 800564e:	f10d 0207 	add.w	r2, sp, #7
 8005652:	4617      	mov	r7, r2
 8005654:	260a      	movs	r6, #10
 8005656:	4694      	mov	ip, r2
 8005658:	fb91 f5f6 	sdiv	r5, r1, r6
 800565c:	fb06 1415 	mls	r4, r6, r5, r1
 8005660:	3430      	adds	r4, #48	; 0x30
 8005662:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005666:	460c      	mov	r4, r1
 8005668:	2c63      	cmp	r4, #99	; 0x63
 800566a:	f102 32ff 	add.w	r2, r2, #4294967295
 800566e:	4629      	mov	r1, r5
 8005670:	dcf1      	bgt.n	8005656 <__exponent+0x22>
 8005672:	3130      	adds	r1, #48	; 0x30
 8005674:	f1ac 0402 	sub.w	r4, ip, #2
 8005678:	f802 1c01 	strb.w	r1, [r2, #-1]
 800567c:	1c41      	adds	r1, r0, #1
 800567e:	4622      	mov	r2, r4
 8005680:	42ba      	cmp	r2, r7
 8005682:	d30a      	bcc.n	800569a <__exponent+0x66>
 8005684:	f10d 0209 	add.w	r2, sp, #9
 8005688:	eba2 020c 	sub.w	r2, r2, ip
 800568c:	42bc      	cmp	r4, r7
 800568e:	bf88      	it	hi
 8005690:	2200      	movhi	r2, #0
 8005692:	4413      	add	r3, r2
 8005694:	1a18      	subs	r0, r3, r0
 8005696:	b003      	add	sp, #12
 8005698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800569a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800569e:	f801 5f01 	strb.w	r5, [r1, #1]!
 80056a2:	e7ed      	b.n	8005680 <__exponent+0x4c>
 80056a4:	2330      	movs	r3, #48	; 0x30
 80056a6:	3130      	adds	r1, #48	; 0x30
 80056a8:	7083      	strb	r3, [r0, #2]
 80056aa:	70c1      	strb	r1, [r0, #3]
 80056ac:	1d03      	adds	r3, r0, #4
 80056ae:	e7f1      	b.n	8005694 <__exponent+0x60>

080056b0 <_printf_float>:
 80056b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b4:	ed2d 8b02 	vpush	{d8}
 80056b8:	b08d      	sub	sp, #52	; 0x34
 80056ba:	460c      	mov	r4, r1
 80056bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80056c0:	4616      	mov	r6, r2
 80056c2:	461f      	mov	r7, r3
 80056c4:	4605      	mov	r5, r0
 80056c6:	f000 fdc9 	bl	800625c <_localeconv_r>
 80056ca:	f8d0 a000 	ldr.w	sl, [r0]
 80056ce:	4650      	mov	r0, sl
 80056d0:	f7fa fdce 	bl	8000270 <strlen>
 80056d4:	2300      	movs	r3, #0
 80056d6:	930a      	str	r3, [sp, #40]	; 0x28
 80056d8:	6823      	ldr	r3, [r4, #0]
 80056da:	9305      	str	r3, [sp, #20]
 80056dc:	f8d8 3000 	ldr.w	r3, [r8]
 80056e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80056e4:	3307      	adds	r3, #7
 80056e6:	f023 0307 	bic.w	r3, r3, #7
 80056ea:	f103 0208 	add.w	r2, r3, #8
 80056ee:	f8c8 2000 	str.w	r2, [r8]
 80056f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80056f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80056fa:	9307      	str	r3, [sp, #28]
 80056fc:	f8cd 8018 	str.w	r8, [sp, #24]
 8005700:	ee08 0a10 	vmov	s16, r0
 8005704:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005708:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800570c:	4b9e      	ldr	r3, [pc, #632]	; (8005988 <_printf_float+0x2d8>)
 800570e:	f04f 32ff 	mov.w	r2, #4294967295
 8005712:	f7fb fa0b 	bl	8000b2c <__aeabi_dcmpun>
 8005716:	bb88      	cbnz	r0, 800577c <_printf_float+0xcc>
 8005718:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800571c:	4b9a      	ldr	r3, [pc, #616]	; (8005988 <_printf_float+0x2d8>)
 800571e:	f04f 32ff 	mov.w	r2, #4294967295
 8005722:	f7fb f9e5 	bl	8000af0 <__aeabi_dcmple>
 8005726:	bb48      	cbnz	r0, 800577c <_printf_float+0xcc>
 8005728:	2200      	movs	r2, #0
 800572a:	2300      	movs	r3, #0
 800572c:	4640      	mov	r0, r8
 800572e:	4649      	mov	r1, r9
 8005730:	f7fb f9d4 	bl	8000adc <__aeabi_dcmplt>
 8005734:	b110      	cbz	r0, 800573c <_printf_float+0x8c>
 8005736:	232d      	movs	r3, #45	; 0x2d
 8005738:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800573c:	4a93      	ldr	r2, [pc, #588]	; (800598c <_printf_float+0x2dc>)
 800573e:	4b94      	ldr	r3, [pc, #592]	; (8005990 <_printf_float+0x2e0>)
 8005740:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005744:	bf94      	ite	ls
 8005746:	4690      	movls	r8, r2
 8005748:	4698      	movhi	r8, r3
 800574a:	2303      	movs	r3, #3
 800574c:	6123      	str	r3, [r4, #16]
 800574e:	9b05      	ldr	r3, [sp, #20]
 8005750:	f023 0304 	bic.w	r3, r3, #4
 8005754:	6023      	str	r3, [r4, #0]
 8005756:	f04f 0900 	mov.w	r9, #0
 800575a:	9700      	str	r7, [sp, #0]
 800575c:	4633      	mov	r3, r6
 800575e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005760:	4621      	mov	r1, r4
 8005762:	4628      	mov	r0, r5
 8005764:	f000 f9da 	bl	8005b1c <_printf_common>
 8005768:	3001      	adds	r0, #1
 800576a:	f040 8090 	bne.w	800588e <_printf_float+0x1de>
 800576e:	f04f 30ff 	mov.w	r0, #4294967295
 8005772:	b00d      	add	sp, #52	; 0x34
 8005774:	ecbd 8b02 	vpop	{d8}
 8005778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800577c:	4642      	mov	r2, r8
 800577e:	464b      	mov	r3, r9
 8005780:	4640      	mov	r0, r8
 8005782:	4649      	mov	r1, r9
 8005784:	f7fb f9d2 	bl	8000b2c <__aeabi_dcmpun>
 8005788:	b140      	cbz	r0, 800579c <_printf_float+0xec>
 800578a:	464b      	mov	r3, r9
 800578c:	2b00      	cmp	r3, #0
 800578e:	bfbc      	itt	lt
 8005790:	232d      	movlt	r3, #45	; 0x2d
 8005792:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005796:	4a7f      	ldr	r2, [pc, #508]	; (8005994 <_printf_float+0x2e4>)
 8005798:	4b7f      	ldr	r3, [pc, #508]	; (8005998 <_printf_float+0x2e8>)
 800579a:	e7d1      	b.n	8005740 <_printf_float+0x90>
 800579c:	6863      	ldr	r3, [r4, #4]
 800579e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80057a2:	9206      	str	r2, [sp, #24]
 80057a4:	1c5a      	adds	r2, r3, #1
 80057a6:	d13f      	bne.n	8005828 <_printf_float+0x178>
 80057a8:	2306      	movs	r3, #6
 80057aa:	6063      	str	r3, [r4, #4]
 80057ac:	9b05      	ldr	r3, [sp, #20]
 80057ae:	6861      	ldr	r1, [r4, #4]
 80057b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80057b4:	2300      	movs	r3, #0
 80057b6:	9303      	str	r3, [sp, #12]
 80057b8:	ab0a      	add	r3, sp, #40	; 0x28
 80057ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 80057be:	ab09      	add	r3, sp, #36	; 0x24
 80057c0:	ec49 8b10 	vmov	d0, r8, r9
 80057c4:	9300      	str	r3, [sp, #0]
 80057c6:	6022      	str	r2, [r4, #0]
 80057c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80057cc:	4628      	mov	r0, r5
 80057ce:	f7ff fecf 	bl	8005570 <__cvt>
 80057d2:	9b06      	ldr	r3, [sp, #24]
 80057d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80057d6:	2b47      	cmp	r3, #71	; 0x47
 80057d8:	4680      	mov	r8, r0
 80057da:	d108      	bne.n	80057ee <_printf_float+0x13e>
 80057dc:	1cc8      	adds	r0, r1, #3
 80057de:	db02      	blt.n	80057e6 <_printf_float+0x136>
 80057e0:	6863      	ldr	r3, [r4, #4]
 80057e2:	4299      	cmp	r1, r3
 80057e4:	dd41      	ble.n	800586a <_printf_float+0x1ba>
 80057e6:	f1ab 0302 	sub.w	r3, fp, #2
 80057ea:	fa5f fb83 	uxtb.w	fp, r3
 80057ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80057f2:	d820      	bhi.n	8005836 <_printf_float+0x186>
 80057f4:	3901      	subs	r1, #1
 80057f6:	465a      	mov	r2, fp
 80057f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80057fc:	9109      	str	r1, [sp, #36]	; 0x24
 80057fe:	f7ff ff19 	bl	8005634 <__exponent>
 8005802:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005804:	1813      	adds	r3, r2, r0
 8005806:	2a01      	cmp	r2, #1
 8005808:	4681      	mov	r9, r0
 800580a:	6123      	str	r3, [r4, #16]
 800580c:	dc02      	bgt.n	8005814 <_printf_float+0x164>
 800580e:	6822      	ldr	r2, [r4, #0]
 8005810:	07d2      	lsls	r2, r2, #31
 8005812:	d501      	bpl.n	8005818 <_printf_float+0x168>
 8005814:	3301      	adds	r3, #1
 8005816:	6123      	str	r3, [r4, #16]
 8005818:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800581c:	2b00      	cmp	r3, #0
 800581e:	d09c      	beq.n	800575a <_printf_float+0xaa>
 8005820:	232d      	movs	r3, #45	; 0x2d
 8005822:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005826:	e798      	b.n	800575a <_printf_float+0xaa>
 8005828:	9a06      	ldr	r2, [sp, #24]
 800582a:	2a47      	cmp	r2, #71	; 0x47
 800582c:	d1be      	bne.n	80057ac <_printf_float+0xfc>
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1bc      	bne.n	80057ac <_printf_float+0xfc>
 8005832:	2301      	movs	r3, #1
 8005834:	e7b9      	b.n	80057aa <_printf_float+0xfa>
 8005836:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800583a:	d118      	bne.n	800586e <_printf_float+0x1be>
 800583c:	2900      	cmp	r1, #0
 800583e:	6863      	ldr	r3, [r4, #4]
 8005840:	dd0b      	ble.n	800585a <_printf_float+0x1aa>
 8005842:	6121      	str	r1, [r4, #16]
 8005844:	b913      	cbnz	r3, 800584c <_printf_float+0x19c>
 8005846:	6822      	ldr	r2, [r4, #0]
 8005848:	07d0      	lsls	r0, r2, #31
 800584a:	d502      	bpl.n	8005852 <_printf_float+0x1a2>
 800584c:	3301      	adds	r3, #1
 800584e:	440b      	add	r3, r1
 8005850:	6123      	str	r3, [r4, #16]
 8005852:	65a1      	str	r1, [r4, #88]	; 0x58
 8005854:	f04f 0900 	mov.w	r9, #0
 8005858:	e7de      	b.n	8005818 <_printf_float+0x168>
 800585a:	b913      	cbnz	r3, 8005862 <_printf_float+0x1b2>
 800585c:	6822      	ldr	r2, [r4, #0]
 800585e:	07d2      	lsls	r2, r2, #31
 8005860:	d501      	bpl.n	8005866 <_printf_float+0x1b6>
 8005862:	3302      	adds	r3, #2
 8005864:	e7f4      	b.n	8005850 <_printf_float+0x1a0>
 8005866:	2301      	movs	r3, #1
 8005868:	e7f2      	b.n	8005850 <_printf_float+0x1a0>
 800586a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800586e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005870:	4299      	cmp	r1, r3
 8005872:	db05      	blt.n	8005880 <_printf_float+0x1d0>
 8005874:	6823      	ldr	r3, [r4, #0]
 8005876:	6121      	str	r1, [r4, #16]
 8005878:	07d8      	lsls	r0, r3, #31
 800587a:	d5ea      	bpl.n	8005852 <_printf_float+0x1a2>
 800587c:	1c4b      	adds	r3, r1, #1
 800587e:	e7e7      	b.n	8005850 <_printf_float+0x1a0>
 8005880:	2900      	cmp	r1, #0
 8005882:	bfd4      	ite	le
 8005884:	f1c1 0202 	rsble	r2, r1, #2
 8005888:	2201      	movgt	r2, #1
 800588a:	4413      	add	r3, r2
 800588c:	e7e0      	b.n	8005850 <_printf_float+0x1a0>
 800588e:	6823      	ldr	r3, [r4, #0]
 8005890:	055a      	lsls	r2, r3, #21
 8005892:	d407      	bmi.n	80058a4 <_printf_float+0x1f4>
 8005894:	6923      	ldr	r3, [r4, #16]
 8005896:	4642      	mov	r2, r8
 8005898:	4631      	mov	r1, r6
 800589a:	4628      	mov	r0, r5
 800589c:	47b8      	blx	r7
 800589e:	3001      	adds	r0, #1
 80058a0:	d12c      	bne.n	80058fc <_printf_float+0x24c>
 80058a2:	e764      	b.n	800576e <_printf_float+0xbe>
 80058a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80058a8:	f240 80e0 	bls.w	8005a6c <_printf_float+0x3bc>
 80058ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80058b0:	2200      	movs	r2, #0
 80058b2:	2300      	movs	r3, #0
 80058b4:	f7fb f908 	bl	8000ac8 <__aeabi_dcmpeq>
 80058b8:	2800      	cmp	r0, #0
 80058ba:	d034      	beq.n	8005926 <_printf_float+0x276>
 80058bc:	4a37      	ldr	r2, [pc, #220]	; (800599c <_printf_float+0x2ec>)
 80058be:	2301      	movs	r3, #1
 80058c0:	4631      	mov	r1, r6
 80058c2:	4628      	mov	r0, r5
 80058c4:	47b8      	blx	r7
 80058c6:	3001      	adds	r0, #1
 80058c8:	f43f af51 	beq.w	800576e <_printf_float+0xbe>
 80058cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058d0:	429a      	cmp	r2, r3
 80058d2:	db02      	blt.n	80058da <_printf_float+0x22a>
 80058d4:	6823      	ldr	r3, [r4, #0]
 80058d6:	07d8      	lsls	r0, r3, #31
 80058d8:	d510      	bpl.n	80058fc <_printf_float+0x24c>
 80058da:	ee18 3a10 	vmov	r3, s16
 80058de:	4652      	mov	r2, sl
 80058e0:	4631      	mov	r1, r6
 80058e2:	4628      	mov	r0, r5
 80058e4:	47b8      	blx	r7
 80058e6:	3001      	adds	r0, #1
 80058e8:	f43f af41 	beq.w	800576e <_printf_float+0xbe>
 80058ec:	f04f 0800 	mov.w	r8, #0
 80058f0:	f104 091a 	add.w	r9, r4, #26
 80058f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058f6:	3b01      	subs	r3, #1
 80058f8:	4543      	cmp	r3, r8
 80058fa:	dc09      	bgt.n	8005910 <_printf_float+0x260>
 80058fc:	6823      	ldr	r3, [r4, #0]
 80058fe:	079b      	lsls	r3, r3, #30
 8005900:	f100 8107 	bmi.w	8005b12 <_printf_float+0x462>
 8005904:	68e0      	ldr	r0, [r4, #12]
 8005906:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005908:	4298      	cmp	r0, r3
 800590a:	bfb8      	it	lt
 800590c:	4618      	movlt	r0, r3
 800590e:	e730      	b.n	8005772 <_printf_float+0xc2>
 8005910:	2301      	movs	r3, #1
 8005912:	464a      	mov	r2, r9
 8005914:	4631      	mov	r1, r6
 8005916:	4628      	mov	r0, r5
 8005918:	47b8      	blx	r7
 800591a:	3001      	adds	r0, #1
 800591c:	f43f af27 	beq.w	800576e <_printf_float+0xbe>
 8005920:	f108 0801 	add.w	r8, r8, #1
 8005924:	e7e6      	b.n	80058f4 <_printf_float+0x244>
 8005926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005928:	2b00      	cmp	r3, #0
 800592a:	dc39      	bgt.n	80059a0 <_printf_float+0x2f0>
 800592c:	4a1b      	ldr	r2, [pc, #108]	; (800599c <_printf_float+0x2ec>)
 800592e:	2301      	movs	r3, #1
 8005930:	4631      	mov	r1, r6
 8005932:	4628      	mov	r0, r5
 8005934:	47b8      	blx	r7
 8005936:	3001      	adds	r0, #1
 8005938:	f43f af19 	beq.w	800576e <_printf_float+0xbe>
 800593c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005940:	4313      	orrs	r3, r2
 8005942:	d102      	bne.n	800594a <_printf_float+0x29a>
 8005944:	6823      	ldr	r3, [r4, #0]
 8005946:	07d9      	lsls	r1, r3, #31
 8005948:	d5d8      	bpl.n	80058fc <_printf_float+0x24c>
 800594a:	ee18 3a10 	vmov	r3, s16
 800594e:	4652      	mov	r2, sl
 8005950:	4631      	mov	r1, r6
 8005952:	4628      	mov	r0, r5
 8005954:	47b8      	blx	r7
 8005956:	3001      	adds	r0, #1
 8005958:	f43f af09 	beq.w	800576e <_printf_float+0xbe>
 800595c:	f04f 0900 	mov.w	r9, #0
 8005960:	f104 0a1a 	add.w	sl, r4, #26
 8005964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005966:	425b      	negs	r3, r3
 8005968:	454b      	cmp	r3, r9
 800596a:	dc01      	bgt.n	8005970 <_printf_float+0x2c0>
 800596c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800596e:	e792      	b.n	8005896 <_printf_float+0x1e6>
 8005970:	2301      	movs	r3, #1
 8005972:	4652      	mov	r2, sl
 8005974:	4631      	mov	r1, r6
 8005976:	4628      	mov	r0, r5
 8005978:	47b8      	blx	r7
 800597a:	3001      	adds	r0, #1
 800597c:	f43f aef7 	beq.w	800576e <_printf_float+0xbe>
 8005980:	f109 0901 	add.w	r9, r9, #1
 8005984:	e7ee      	b.n	8005964 <_printf_float+0x2b4>
 8005986:	bf00      	nop
 8005988:	7fefffff 	.word	0x7fefffff
 800598c:	080080b0 	.word	0x080080b0
 8005990:	080080b4 	.word	0x080080b4
 8005994:	080080b8 	.word	0x080080b8
 8005998:	080080bc 	.word	0x080080bc
 800599c:	080080c0 	.word	0x080080c0
 80059a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80059a4:	429a      	cmp	r2, r3
 80059a6:	bfa8      	it	ge
 80059a8:	461a      	movge	r2, r3
 80059aa:	2a00      	cmp	r2, #0
 80059ac:	4691      	mov	r9, r2
 80059ae:	dc37      	bgt.n	8005a20 <_printf_float+0x370>
 80059b0:	f04f 0b00 	mov.w	fp, #0
 80059b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80059b8:	f104 021a 	add.w	r2, r4, #26
 80059bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80059be:	9305      	str	r3, [sp, #20]
 80059c0:	eba3 0309 	sub.w	r3, r3, r9
 80059c4:	455b      	cmp	r3, fp
 80059c6:	dc33      	bgt.n	8005a30 <_printf_float+0x380>
 80059c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059cc:	429a      	cmp	r2, r3
 80059ce:	db3b      	blt.n	8005a48 <_printf_float+0x398>
 80059d0:	6823      	ldr	r3, [r4, #0]
 80059d2:	07da      	lsls	r2, r3, #31
 80059d4:	d438      	bmi.n	8005a48 <_printf_float+0x398>
 80059d6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80059da:	eba2 0903 	sub.w	r9, r2, r3
 80059de:	9b05      	ldr	r3, [sp, #20]
 80059e0:	1ad2      	subs	r2, r2, r3
 80059e2:	4591      	cmp	r9, r2
 80059e4:	bfa8      	it	ge
 80059e6:	4691      	movge	r9, r2
 80059e8:	f1b9 0f00 	cmp.w	r9, #0
 80059ec:	dc35      	bgt.n	8005a5a <_printf_float+0x3aa>
 80059ee:	f04f 0800 	mov.w	r8, #0
 80059f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80059f6:	f104 0a1a 	add.w	sl, r4, #26
 80059fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059fe:	1a9b      	subs	r3, r3, r2
 8005a00:	eba3 0309 	sub.w	r3, r3, r9
 8005a04:	4543      	cmp	r3, r8
 8005a06:	f77f af79 	ble.w	80058fc <_printf_float+0x24c>
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	4652      	mov	r2, sl
 8005a0e:	4631      	mov	r1, r6
 8005a10:	4628      	mov	r0, r5
 8005a12:	47b8      	blx	r7
 8005a14:	3001      	adds	r0, #1
 8005a16:	f43f aeaa 	beq.w	800576e <_printf_float+0xbe>
 8005a1a:	f108 0801 	add.w	r8, r8, #1
 8005a1e:	e7ec      	b.n	80059fa <_printf_float+0x34a>
 8005a20:	4613      	mov	r3, r2
 8005a22:	4631      	mov	r1, r6
 8005a24:	4642      	mov	r2, r8
 8005a26:	4628      	mov	r0, r5
 8005a28:	47b8      	blx	r7
 8005a2a:	3001      	adds	r0, #1
 8005a2c:	d1c0      	bne.n	80059b0 <_printf_float+0x300>
 8005a2e:	e69e      	b.n	800576e <_printf_float+0xbe>
 8005a30:	2301      	movs	r3, #1
 8005a32:	4631      	mov	r1, r6
 8005a34:	4628      	mov	r0, r5
 8005a36:	9205      	str	r2, [sp, #20]
 8005a38:	47b8      	blx	r7
 8005a3a:	3001      	adds	r0, #1
 8005a3c:	f43f ae97 	beq.w	800576e <_printf_float+0xbe>
 8005a40:	9a05      	ldr	r2, [sp, #20]
 8005a42:	f10b 0b01 	add.w	fp, fp, #1
 8005a46:	e7b9      	b.n	80059bc <_printf_float+0x30c>
 8005a48:	ee18 3a10 	vmov	r3, s16
 8005a4c:	4652      	mov	r2, sl
 8005a4e:	4631      	mov	r1, r6
 8005a50:	4628      	mov	r0, r5
 8005a52:	47b8      	blx	r7
 8005a54:	3001      	adds	r0, #1
 8005a56:	d1be      	bne.n	80059d6 <_printf_float+0x326>
 8005a58:	e689      	b.n	800576e <_printf_float+0xbe>
 8005a5a:	9a05      	ldr	r2, [sp, #20]
 8005a5c:	464b      	mov	r3, r9
 8005a5e:	4442      	add	r2, r8
 8005a60:	4631      	mov	r1, r6
 8005a62:	4628      	mov	r0, r5
 8005a64:	47b8      	blx	r7
 8005a66:	3001      	adds	r0, #1
 8005a68:	d1c1      	bne.n	80059ee <_printf_float+0x33e>
 8005a6a:	e680      	b.n	800576e <_printf_float+0xbe>
 8005a6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a6e:	2a01      	cmp	r2, #1
 8005a70:	dc01      	bgt.n	8005a76 <_printf_float+0x3c6>
 8005a72:	07db      	lsls	r3, r3, #31
 8005a74:	d53a      	bpl.n	8005aec <_printf_float+0x43c>
 8005a76:	2301      	movs	r3, #1
 8005a78:	4642      	mov	r2, r8
 8005a7a:	4631      	mov	r1, r6
 8005a7c:	4628      	mov	r0, r5
 8005a7e:	47b8      	blx	r7
 8005a80:	3001      	adds	r0, #1
 8005a82:	f43f ae74 	beq.w	800576e <_printf_float+0xbe>
 8005a86:	ee18 3a10 	vmov	r3, s16
 8005a8a:	4652      	mov	r2, sl
 8005a8c:	4631      	mov	r1, r6
 8005a8e:	4628      	mov	r0, r5
 8005a90:	47b8      	blx	r7
 8005a92:	3001      	adds	r0, #1
 8005a94:	f43f ae6b 	beq.w	800576e <_printf_float+0xbe>
 8005a98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005aa4:	f7fb f810 	bl	8000ac8 <__aeabi_dcmpeq>
 8005aa8:	b9d8      	cbnz	r0, 8005ae2 <_printf_float+0x432>
 8005aaa:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005aae:	f108 0201 	add.w	r2, r8, #1
 8005ab2:	4631      	mov	r1, r6
 8005ab4:	4628      	mov	r0, r5
 8005ab6:	47b8      	blx	r7
 8005ab8:	3001      	adds	r0, #1
 8005aba:	d10e      	bne.n	8005ada <_printf_float+0x42a>
 8005abc:	e657      	b.n	800576e <_printf_float+0xbe>
 8005abe:	2301      	movs	r3, #1
 8005ac0:	4652      	mov	r2, sl
 8005ac2:	4631      	mov	r1, r6
 8005ac4:	4628      	mov	r0, r5
 8005ac6:	47b8      	blx	r7
 8005ac8:	3001      	adds	r0, #1
 8005aca:	f43f ae50 	beq.w	800576e <_printf_float+0xbe>
 8005ace:	f108 0801 	add.w	r8, r8, #1
 8005ad2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	4543      	cmp	r3, r8
 8005ad8:	dcf1      	bgt.n	8005abe <_printf_float+0x40e>
 8005ada:	464b      	mov	r3, r9
 8005adc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005ae0:	e6da      	b.n	8005898 <_printf_float+0x1e8>
 8005ae2:	f04f 0800 	mov.w	r8, #0
 8005ae6:	f104 0a1a 	add.w	sl, r4, #26
 8005aea:	e7f2      	b.n	8005ad2 <_printf_float+0x422>
 8005aec:	2301      	movs	r3, #1
 8005aee:	4642      	mov	r2, r8
 8005af0:	e7df      	b.n	8005ab2 <_printf_float+0x402>
 8005af2:	2301      	movs	r3, #1
 8005af4:	464a      	mov	r2, r9
 8005af6:	4631      	mov	r1, r6
 8005af8:	4628      	mov	r0, r5
 8005afa:	47b8      	blx	r7
 8005afc:	3001      	adds	r0, #1
 8005afe:	f43f ae36 	beq.w	800576e <_printf_float+0xbe>
 8005b02:	f108 0801 	add.w	r8, r8, #1
 8005b06:	68e3      	ldr	r3, [r4, #12]
 8005b08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b0a:	1a5b      	subs	r3, r3, r1
 8005b0c:	4543      	cmp	r3, r8
 8005b0e:	dcf0      	bgt.n	8005af2 <_printf_float+0x442>
 8005b10:	e6f8      	b.n	8005904 <_printf_float+0x254>
 8005b12:	f04f 0800 	mov.w	r8, #0
 8005b16:	f104 0919 	add.w	r9, r4, #25
 8005b1a:	e7f4      	b.n	8005b06 <_printf_float+0x456>

08005b1c <_printf_common>:
 8005b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b20:	4616      	mov	r6, r2
 8005b22:	4699      	mov	r9, r3
 8005b24:	688a      	ldr	r2, [r1, #8]
 8005b26:	690b      	ldr	r3, [r1, #16]
 8005b28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	bfb8      	it	lt
 8005b30:	4613      	movlt	r3, r2
 8005b32:	6033      	str	r3, [r6, #0]
 8005b34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b38:	4607      	mov	r7, r0
 8005b3a:	460c      	mov	r4, r1
 8005b3c:	b10a      	cbz	r2, 8005b42 <_printf_common+0x26>
 8005b3e:	3301      	adds	r3, #1
 8005b40:	6033      	str	r3, [r6, #0]
 8005b42:	6823      	ldr	r3, [r4, #0]
 8005b44:	0699      	lsls	r1, r3, #26
 8005b46:	bf42      	ittt	mi
 8005b48:	6833      	ldrmi	r3, [r6, #0]
 8005b4a:	3302      	addmi	r3, #2
 8005b4c:	6033      	strmi	r3, [r6, #0]
 8005b4e:	6825      	ldr	r5, [r4, #0]
 8005b50:	f015 0506 	ands.w	r5, r5, #6
 8005b54:	d106      	bne.n	8005b64 <_printf_common+0x48>
 8005b56:	f104 0a19 	add.w	sl, r4, #25
 8005b5a:	68e3      	ldr	r3, [r4, #12]
 8005b5c:	6832      	ldr	r2, [r6, #0]
 8005b5e:	1a9b      	subs	r3, r3, r2
 8005b60:	42ab      	cmp	r3, r5
 8005b62:	dc26      	bgt.n	8005bb2 <_printf_common+0x96>
 8005b64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b68:	1e13      	subs	r3, r2, #0
 8005b6a:	6822      	ldr	r2, [r4, #0]
 8005b6c:	bf18      	it	ne
 8005b6e:	2301      	movne	r3, #1
 8005b70:	0692      	lsls	r2, r2, #26
 8005b72:	d42b      	bmi.n	8005bcc <_printf_common+0xb0>
 8005b74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b78:	4649      	mov	r1, r9
 8005b7a:	4638      	mov	r0, r7
 8005b7c:	47c0      	blx	r8
 8005b7e:	3001      	adds	r0, #1
 8005b80:	d01e      	beq.n	8005bc0 <_printf_common+0xa4>
 8005b82:	6823      	ldr	r3, [r4, #0]
 8005b84:	6922      	ldr	r2, [r4, #16]
 8005b86:	f003 0306 	and.w	r3, r3, #6
 8005b8a:	2b04      	cmp	r3, #4
 8005b8c:	bf02      	ittt	eq
 8005b8e:	68e5      	ldreq	r5, [r4, #12]
 8005b90:	6833      	ldreq	r3, [r6, #0]
 8005b92:	1aed      	subeq	r5, r5, r3
 8005b94:	68a3      	ldr	r3, [r4, #8]
 8005b96:	bf0c      	ite	eq
 8005b98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b9c:	2500      	movne	r5, #0
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	bfc4      	itt	gt
 8005ba2:	1a9b      	subgt	r3, r3, r2
 8005ba4:	18ed      	addgt	r5, r5, r3
 8005ba6:	2600      	movs	r6, #0
 8005ba8:	341a      	adds	r4, #26
 8005baa:	42b5      	cmp	r5, r6
 8005bac:	d11a      	bne.n	8005be4 <_printf_common+0xc8>
 8005bae:	2000      	movs	r0, #0
 8005bb0:	e008      	b.n	8005bc4 <_printf_common+0xa8>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	4652      	mov	r2, sl
 8005bb6:	4649      	mov	r1, r9
 8005bb8:	4638      	mov	r0, r7
 8005bba:	47c0      	blx	r8
 8005bbc:	3001      	adds	r0, #1
 8005bbe:	d103      	bne.n	8005bc8 <_printf_common+0xac>
 8005bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bc8:	3501      	adds	r5, #1
 8005bca:	e7c6      	b.n	8005b5a <_printf_common+0x3e>
 8005bcc:	18e1      	adds	r1, r4, r3
 8005bce:	1c5a      	adds	r2, r3, #1
 8005bd0:	2030      	movs	r0, #48	; 0x30
 8005bd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bd6:	4422      	add	r2, r4
 8005bd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005be0:	3302      	adds	r3, #2
 8005be2:	e7c7      	b.n	8005b74 <_printf_common+0x58>
 8005be4:	2301      	movs	r3, #1
 8005be6:	4622      	mov	r2, r4
 8005be8:	4649      	mov	r1, r9
 8005bea:	4638      	mov	r0, r7
 8005bec:	47c0      	blx	r8
 8005bee:	3001      	adds	r0, #1
 8005bf0:	d0e6      	beq.n	8005bc0 <_printf_common+0xa4>
 8005bf2:	3601      	adds	r6, #1
 8005bf4:	e7d9      	b.n	8005baa <_printf_common+0x8e>
	...

08005bf8 <_printf_i>:
 8005bf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bfc:	7e0f      	ldrb	r7, [r1, #24]
 8005bfe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c00:	2f78      	cmp	r7, #120	; 0x78
 8005c02:	4691      	mov	r9, r2
 8005c04:	4680      	mov	r8, r0
 8005c06:	460c      	mov	r4, r1
 8005c08:	469a      	mov	sl, r3
 8005c0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c0e:	d807      	bhi.n	8005c20 <_printf_i+0x28>
 8005c10:	2f62      	cmp	r7, #98	; 0x62
 8005c12:	d80a      	bhi.n	8005c2a <_printf_i+0x32>
 8005c14:	2f00      	cmp	r7, #0
 8005c16:	f000 80d4 	beq.w	8005dc2 <_printf_i+0x1ca>
 8005c1a:	2f58      	cmp	r7, #88	; 0x58
 8005c1c:	f000 80c0 	beq.w	8005da0 <_printf_i+0x1a8>
 8005c20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c28:	e03a      	b.n	8005ca0 <_printf_i+0xa8>
 8005c2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c2e:	2b15      	cmp	r3, #21
 8005c30:	d8f6      	bhi.n	8005c20 <_printf_i+0x28>
 8005c32:	a101      	add	r1, pc, #4	; (adr r1, 8005c38 <_printf_i+0x40>)
 8005c34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c38:	08005c91 	.word	0x08005c91
 8005c3c:	08005ca5 	.word	0x08005ca5
 8005c40:	08005c21 	.word	0x08005c21
 8005c44:	08005c21 	.word	0x08005c21
 8005c48:	08005c21 	.word	0x08005c21
 8005c4c:	08005c21 	.word	0x08005c21
 8005c50:	08005ca5 	.word	0x08005ca5
 8005c54:	08005c21 	.word	0x08005c21
 8005c58:	08005c21 	.word	0x08005c21
 8005c5c:	08005c21 	.word	0x08005c21
 8005c60:	08005c21 	.word	0x08005c21
 8005c64:	08005da9 	.word	0x08005da9
 8005c68:	08005cd1 	.word	0x08005cd1
 8005c6c:	08005d63 	.word	0x08005d63
 8005c70:	08005c21 	.word	0x08005c21
 8005c74:	08005c21 	.word	0x08005c21
 8005c78:	08005dcb 	.word	0x08005dcb
 8005c7c:	08005c21 	.word	0x08005c21
 8005c80:	08005cd1 	.word	0x08005cd1
 8005c84:	08005c21 	.word	0x08005c21
 8005c88:	08005c21 	.word	0x08005c21
 8005c8c:	08005d6b 	.word	0x08005d6b
 8005c90:	682b      	ldr	r3, [r5, #0]
 8005c92:	1d1a      	adds	r2, r3, #4
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	602a      	str	r2, [r5, #0]
 8005c98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e09f      	b.n	8005de4 <_printf_i+0x1ec>
 8005ca4:	6820      	ldr	r0, [r4, #0]
 8005ca6:	682b      	ldr	r3, [r5, #0]
 8005ca8:	0607      	lsls	r7, r0, #24
 8005caa:	f103 0104 	add.w	r1, r3, #4
 8005cae:	6029      	str	r1, [r5, #0]
 8005cb0:	d501      	bpl.n	8005cb6 <_printf_i+0xbe>
 8005cb2:	681e      	ldr	r6, [r3, #0]
 8005cb4:	e003      	b.n	8005cbe <_printf_i+0xc6>
 8005cb6:	0646      	lsls	r6, r0, #25
 8005cb8:	d5fb      	bpl.n	8005cb2 <_printf_i+0xba>
 8005cba:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005cbe:	2e00      	cmp	r6, #0
 8005cc0:	da03      	bge.n	8005cca <_printf_i+0xd2>
 8005cc2:	232d      	movs	r3, #45	; 0x2d
 8005cc4:	4276      	negs	r6, r6
 8005cc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cca:	485a      	ldr	r0, [pc, #360]	; (8005e34 <_printf_i+0x23c>)
 8005ccc:	230a      	movs	r3, #10
 8005cce:	e012      	b.n	8005cf6 <_printf_i+0xfe>
 8005cd0:	682b      	ldr	r3, [r5, #0]
 8005cd2:	6820      	ldr	r0, [r4, #0]
 8005cd4:	1d19      	adds	r1, r3, #4
 8005cd6:	6029      	str	r1, [r5, #0]
 8005cd8:	0605      	lsls	r5, r0, #24
 8005cda:	d501      	bpl.n	8005ce0 <_printf_i+0xe8>
 8005cdc:	681e      	ldr	r6, [r3, #0]
 8005cde:	e002      	b.n	8005ce6 <_printf_i+0xee>
 8005ce0:	0641      	lsls	r1, r0, #25
 8005ce2:	d5fb      	bpl.n	8005cdc <_printf_i+0xe4>
 8005ce4:	881e      	ldrh	r6, [r3, #0]
 8005ce6:	4853      	ldr	r0, [pc, #332]	; (8005e34 <_printf_i+0x23c>)
 8005ce8:	2f6f      	cmp	r7, #111	; 0x6f
 8005cea:	bf0c      	ite	eq
 8005cec:	2308      	moveq	r3, #8
 8005cee:	230a      	movne	r3, #10
 8005cf0:	2100      	movs	r1, #0
 8005cf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005cf6:	6865      	ldr	r5, [r4, #4]
 8005cf8:	60a5      	str	r5, [r4, #8]
 8005cfa:	2d00      	cmp	r5, #0
 8005cfc:	bfa2      	ittt	ge
 8005cfe:	6821      	ldrge	r1, [r4, #0]
 8005d00:	f021 0104 	bicge.w	r1, r1, #4
 8005d04:	6021      	strge	r1, [r4, #0]
 8005d06:	b90e      	cbnz	r6, 8005d0c <_printf_i+0x114>
 8005d08:	2d00      	cmp	r5, #0
 8005d0a:	d04b      	beq.n	8005da4 <_printf_i+0x1ac>
 8005d0c:	4615      	mov	r5, r2
 8005d0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d12:	fb03 6711 	mls	r7, r3, r1, r6
 8005d16:	5dc7      	ldrb	r7, [r0, r7]
 8005d18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d1c:	4637      	mov	r7, r6
 8005d1e:	42bb      	cmp	r3, r7
 8005d20:	460e      	mov	r6, r1
 8005d22:	d9f4      	bls.n	8005d0e <_printf_i+0x116>
 8005d24:	2b08      	cmp	r3, #8
 8005d26:	d10b      	bne.n	8005d40 <_printf_i+0x148>
 8005d28:	6823      	ldr	r3, [r4, #0]
 8005d2a:	07de      	lsls	r6, r3, #31
 8005d2c:	d508      	bpl.n	8005d40 <_printf_i+0x148>
 8005d2e:	6923      	ldr	r3, [r4, #16]
 8005d30:	6861      	ldr	r1, [r4, #4]
 8005d32:	4299      	cmp	r1, r3
 8005d34:	bfde      	ittt	le
 8005d36:	2330      	movle	r3, #48	; 0x30
 8005d38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d40:	1b52      	subs	r2, r2, r5
 8005d42:	6122      	str	r2, [r4, #16]
 8005d44:	f8cd a000 	str.w	sl, [sp]
 8005d48:	464b      	mov	r3, r9
 8005d4a:	aa03      	add	r2, sp, #12
 8005d4c:	4621      	mov	r1, r4
 8005d4e:	4640      	mov	r0, r8
 8005d50:	f7ff fee4 	bl	8005b1c <_printf_common>
 8005d54:	3001      	adds	r0, #1
 8005d56:	d14a      	bne.n	8005dee <_printf_i+0x1f6>
 8005d58:	f04f 30ff 	mov.w	r0, #4294967295
 8005d5c:	b004      	add	sp, #16
 8005d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d62:	6823      	ldr	r3, [r4, #0]
 8005d64:	f043 0320 	orr.w	r3, r3, #32
 8005d68:	6023      	str	r3, [r4, #0]
 8005d6a:	4833      	ldr	r0, [pc, #204]	; (8005e38 <_printf_i+0x240>)
 8005d6c:	2778      	movs	r7, #120	; 0x78
 8005d6e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d72:	6823      	ldr	r3, [r4, #0]
 8005d74:	6829      	ldr	r1, [r5, #0]
 8005d76:	061f      	lsls	r7, r3, #24
 8005d78:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d7c:	d402      	bmi.n	8005d84 <_printf_i+0x18c>
 8005d7e:	065f      	lsls	r7, r3, #25
 8005d80:	bf48      	it	mi
 8005d82:	b2b6      	uxthmi	r6, r6
 8005d84:	07df      	lsls	r7, r3, #31
 8005d86:	bf48      	it	mi
 8005d88:	f043 0320 	orrmi.w	r3, r3, #32
 8005d8c:	6029      	str	r1, [r5, #0]
 8005d8e:	bf48      	it	mi
 8005d90:	6023      	strmi	r3, [r4, #0]
 8005d92:	b91e      	cbnz	r6, 8005d9c <_printf_i+0x1a4>
 8005d94:	6823      	ldr	r3, [r4, #0]
 8005d96:	f023 0320 	bic.w	r3, r3, #32
 8005d9a:	6023      	str	r3, [r4, #0]
 8005d9c:	2310      	movs	r3, #16
 8005d9e:	e7a7      	b.n	8005cf0 <_printf_i+0xf8>
 8005da0:	4824      	ldr	r0, [pc, #144]	; (8005e34 <_printf_i+0x23c>)
 8005da2:	e7e4      	b.n	8005d6e <_printf_i+0x176>
 8005da4:	4615      	mov	r5, r2
 8005da6:	e7bd      	b.n	8005d24 <_printf_i+0x12c>
 8005da8:	682b      	ldr	r3, [r5, #0]
 8005daa:	6826      	ldr	r6, [r4, #0]
 8005dac:	6961      	ldr	r1, [r4, #20]
 8005dae:	1d18      	adds	r0, r3, #4
 8005db0:	6028      	str	r0, [r5, #0]
 8005db2:	0635      	lsls	r5, r6, #24
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	d501      	bpl.n	8005dbc <_printf_i+0x1c4>
 8005db8:	6019      	str	r1, [r3, #0]
 8005dba:	e002      	b.n	8005dc2 <_printf_i+0x1ca>
 8005dbc:	0670      	lsls	r0, r6, #25
 8005dbe:	d5fb      	bpl.n	8005db8 <_printf_i+0x1c0>
 8005dc0:	8019      	strh	r1, [r3, #0]
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	6123      	str	r3, [r4, #16]
 8005dc6:	4615      	mov	r5, r2
 8005dc8:	e7bc      	b.n	8005d44 <_printf_i+0x14c>
 8005dca:	682b      	ldr	r3, [r5, #0]
 8005dcc:	1d1a      	adds	r2, r3, #4
 8005dce:	602a      	str	r2, [r5, #0]
 8005dd0:	681d      	ldr	r5, [r3, #0]
 8005dd2:	6862      	ldr	r2, [r4, #4]
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	f7fa f9fa 	bl	80001d0 <memchr>
 8005ddc:	b108      	cbz	r0, 8005de2 <_printf_i+0x1ea>
 8005dde:	1b40      	subs	r0, r0, r5
 8005de0:	6060      	str	r0, [r4, #4]
 8005de2:	6863      	ldr	r3, [r4, #4]
 8005de4:	6123      	str	r3, [r4, #16]
 8005de6:	2300      	movs	r3, #0
 8005de8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dec:	e7aa      	b.n	8005d44 <_printf_i+0x14c>
 8005dee:	6923      	ldr	r3, [r4, #16]
 8005df0:	462a      	mov	r2, r5
 8005df2:	4649      	mov	r1, r9
 8005df4:	4640      	mov	r0, r8
 8005df6:	47d0      	blx	sl
 8005df8:	3001      	adds	r0, #1
 8005dfa:	d0ad      	beq.n	8005d58 <_printf_i+0x160>
 8005dfc:	6823      	ldr	r3, [r4, #0]
 8005dfe:	079b      	lsls	r3, r3, #30
 8005e00:	d413      	bmi.n	8005e2a <_printf_i+0x232>
 8005e02:	68e0      	ldr	r0, [r4, #12]
 8005e04:	9b03      	ldr	r3, [sp, #12]
 8005e06:	4298      	cmp	r0, r3
 8005e08:	bfb8      	it	lt
 8005e0a:	4618      	movlt	r0, r3
 8005e0c:	e7a6      	b.n	8005d5c <_printf_i+0x164>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	4632      	mov	r2, r6
 8005e12:	4649      	mov	r1, r9
 8005e14:	4640      	mov	r0, r8
 8005e16:	47d0      	blx	sl
 8005e18:	3001      	adds	r0, #1
 8005e1a:	d09d      	beq.n	8005d58 <_printf_i+0x160>
 8005e1c:	3501      	adds	r5, #1
 8005e1e:	68e3      	ldr	r3, [r4, #12]
 8005e20:	9903      	ldr	r1, [sp, #12]
 8005e22:	1a5b      	subs	r3, r3, r1
 8005e24:	42ab      	cmp	r3, r5
 8005e26:	dcf2      	bgt.n	8005e0e <_printf_i+0x216>
 8005e28:	e7eb      	b.n	8005e02 <_printf_i+0x20a>
 8005e2a:	2500      	movs	r5, #0
 8005e2c:	f104 0619 	add.w	r6, r4, #25
 8005e30:	e7f5      	b.n	8005e1e <_printf_i+0x226>
 8005e32:	bf00      	nop
 8005e34:	080080c2 	.word	0x080080c2
 8005e38:	080080d3 	.word	0x080080d3

08005e3c <std>:
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	b510      	push	{r4, lr}
 8005e40:	4604      	mov	r4, r0
 8005e42:	e9c0 3300 	strd	r3, r3, [r0]
 8005e46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e4a:	6083      	str	r3, [r0, #8]
 8005e4c:	8181      	strh	r1, [r0, #12]
 8005e4e:	6643      	str	r3, [r0, #100]	; 0x64
 8005e50:	81c2      	strh	r2, [r0, #14]
 8005e52:	6183      	str	r3, [r0, #24]
 8005e54:	4619      	mov	r1, r3
 8005e56:	2208      	movs	r2, #8
 8005e58:	305c      	adds	r0, #92	; 0x5c
 8005e5a:	f000 f9f7 	bl	800624c <memset>
 8005e5e:	4b0d      	ldr	r3, [pc, #52]	; (8005e94 <std+0x58>)
 8005e60:	6263      	str	r3, [r4, #36]	; 0x24
 8005e62:	4b0d      	ldr	r3, [pc, #52]	; (8005e98 <std+0x5c>)
 8005e64:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e66:	4b0d      	ldr	r3, [pc, #52]	; (8005e9c <std+0x60>)
 8005e68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e6a:	4b0d      	ldr	r3, [pc, #52]	; (8005ea0 <std+0x64>)
 8005e6c:	6323      	str	r3, [r4, #48]	; 0x30
 8005e6e:	4b0d      	ldr	r3, [pc, #52]	; (8005ea4 <std+0x68>)
 8005e70:	6224      	str	r4, [r4, #32]
 8005e72:	429c      	cmp	r4, r3
 8005e74:	d006      	beq.n	8005e84 <std+0x48>
 8005e76:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005e7a:	4294      	cmp	r4, r2
 8005e7c:	d002      	beq.n	8005e84 <std+0x48>
 8005e7e:	33d0      	adds	r3, #208	; 0xd0
 8005e80:	429c      	cmp	r4, r3
 8005e82:	d105      	bne.n	8005e90 <std+0x54>
 8005e84:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e8c:	f000 ba5a 	b.w	8006344 <__retarget_lock_init_recursive>
 8005e90:	bd10      	pop	{r4, pc}
 8005e92:	bf00      	nop
 8005e94:	0800609d 	.word	0x0800609d
 8005e98:	080060bf 	.word	0x080060bf
 8005e9c:	080060f7 	.word	0x080060f7
 8005ea0:	0800611b 	.word	0x0800611b
 8005ea4:	20000700 	.word	0x20000700

08005ea8 <stdio_exit_handler>:
 8005ea8:	4a02      	ldr	r2, [pc, #8]	; (8005eb4 <stdio_exit_handler+0xc>)
 8005eaa:	4903      	ldr	r1, [pc, #12]	; (8005eb8 <stdio_exit_handler+0x10>)
 8005eac:	4803      	ldr	r0, [pc, #12]	; (8005ebc <stdio_exit_handler+0x14>)
 8005eae:	f000 b869 	b.w	8005f84 <_fwalk_sglue>
 8005eb2:	bf00      	nop
 8005eb4:	2000000c 	.word	0x2000000c
 8005eb8:	08007cd1 	.word	0x08007cd1
 8005ebc:	20000018 	.word	0x20000018

08005ec0 <cleanup_stdio>:
 8005ec0:	6841      	ldr	r1, [r0, #4]
 8005ec2:	4b0c      	ldr	r3, [pc, #48]	; (8005ef4 <cleanup_stdio+0x34>)
 8005ec4:	4299      	cmp	r1, r3
 8005ec6:	b510      	push	{r4, lr}
 8005ec8:	4604      	mov	r4, r0
 8005eca:	d001      	beq.n	8005ed0 <cleanup_stdio+0x10>
 8005ecc:	f001 ff00 	bl	8007cd0 <_fflush_r>
 8005ed0:	68a1      	ldr	r1, [r4, #8]
 8005ed2:	4b09      	ldr	r3, [pc, #36]	; (8005ef8 <cleanup_stdio+0x38>)
 8005ed4:	4299      	cmp	r1, r3
 8005ed6:	d002      	beq.n	8005ede <cleanup_stdio+0x1e>
 8005ed8:	4620      	mov	r0, r4
 8005eda:	f001 fef9 	bl	8007cd0 <_fflush_r>
 8005ede:	68e1      	ldr	r1, [r4, #12]
 8005ee0:	4b06      	ldr	r3, [pc, #24]	; (8005efc <cleanup_stdio+0x3c>)
 8005ee2:	4299      	cmp	r1, r3
 8005ee4:	d004      	beq.n	8005ef0 <cleanup_stdio+0x30>
 8005ee6:	4620      	mov	r0, r4
 8005ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005eec:	f001 bef0 	b.w	8007cd0 <_fflush_r>
 8005ef0:	bd10      	pop	{r4, pc}
 8005ef2:	bf00      	nop
 8005ef4:	20000700 	.word	0x20000700
 8005ef8:	20000768 	.word	0x20000768
 8005efc:	200007d0 	.word	0x200007d0

08005f00 <global_stdio_init.part.0>:
 8005f00:	b510      	push	{r4, lr}
 8005f02:	4b0b      	ldr	r3, [pc, #44]	; (8005f30 <global_stdio_init.part.0+0x30>)
 8005f04:	4c0b      	ldr	r4, [pc, #44]	; (8005f34 <global_stdio_init.part.0+0x34>)
 8005f06:	4a0c      	ldr	r2, [pc, #48]	; (8005f38 <global_stdio_init.part.0+0x38>)
 8005f08:	601a      	str	r2, [r3, #0]
 8005f0a:	4620      	mov	r0, r4
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	2104      	movs	r1, #4
 8005f10:	f7ff ff94 	bl	8005e3c <std>
 8005f14:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005f18:	2201      	movs	r2, #1
 8005f1a:	2109      	movs	r1, #9
 8005f1c:	f7ff ff8e 	bl	8005e3c <std>
 8005f20:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005f24:	2202      	movs	r2, #2
 8005f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f2a:	2112      	movs	r1, #18
 8005f2c:	f7ff bf86 	b.w	8005e3c <std>
 8005f30:	20000838 	.word	0x20000838
 8005f34:	20000700 	.word	0x20000700
 8005f38:	08005ea9 	.word	0x08005ea9

08005f3c <__sfp_lock_acquire>:
 8005f3c:	4801      	ldr	r0, [pc, #4]	; (8005f44 <__sfp_lock_acquire+0x8>)
 8005f3e:	f000 ba02 	b.w	8006346 <__retarget_lock_acquire_recursive>
 8005f42:	bf00      	nop
 8005f44:	20000841 	.word	0x20000841

08005f48 <__sfp_lock_release>:
 8005f48:	4801      	ldr	r0, [pc, #4]	; (8005f50 <__sfp_lock_release+0x8>)
 8005f4a:	f000 b9fd 	b.w	8006348 <__retarget_lock_release_recursive>
 8005f4e:	bf00      	nop
 8005f50:	20000841 	.word	0x20000841

08005f54 <__sinit>:
 8005f54:	b510      	push	{r4, lr}
 8005f56:	4604      	mov	r4, r0
 8005f58:	f7ff fff0 	bl	8005f3c <__sfp_lock_acquire>
 8005f5c:	6a23      	ldr	r3, [r4, #32]
 8005f5e:	b11b      	cbz	r3, 8005f68 <__sinit+0x14>
 8005f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f64:	f7ff bff0 	b.w	8005f48 <__sfp_lock_release>
 8005f68:	4b04      	ldr	r3, [pc, #16]	; (8005f7c <__sinit+0x28>)
 8005f6a:	6223      	str	r3, [r4, #32]
 8005f6c:	4b04      	ldr	r3, [pc, #16]	; (8005f80 <__sinit+0x2c>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1f5      	bne.n	8005f60 <__sinit+0xc>
 8005f74:	f7ff ffc4 	bl	8005f00 <global_stdio_init.part.0>
 8005f78:	e7f2      	b.n	8005f60 <__sinit+0xc>
 8005f7a:	bf00      	nop
 8005f7c:	08005ec1 	.word	0x08005ec1
 8005f80:	20000838 	.word	0x20000838

08005f84 <_fwalk_sglue>:
 8005f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f88:	4607      	mov	r7, r0
 8005f8a:	4688      	mov	r8, r1
 8005f8c:	4614      	mov	r4, r2
 8005f8e:	2600      	movs	r6, #0
 8005f90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f94:	f1b9 0901 	subs.w	r9, r9, #1
 8005f98:	d505      	bpl.n	8005fa6 <_fwalk_sglue+0x22>
 8005f9a:	6824      	ldr	r4, [r4, #0]
 8005f9c:	2c00      	cmp	r4, #0
 8005f9e:	d1f7      	bne.n	8005f90 <_fwalk_sglue+0xc>
 8005fa0:	4630      	mov	r0, r6
 8005fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fa6:	89ab      	ldrh	r3, [r5, #12]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d907      	bls.n	8005fbc <_fwalk_sglue+0x38>
 8005fac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	d003      	beq.n	8005fbc <_fwalk_sglue+0x38>
 8005fb4:	4629      	mov	r1, r5
 8005fb6:	4638      	mov	r0, r7
 8005fb8:	47c0      	blx	r8
 8005fba:	4306      	orrs	r6, r0
 8005fbc:	3568      	adds	r5, #104	; 0x68
 8005fbe:	e7e9      	b.n	8005f94 <_fwalk_sglue+0x10>

08005fc0 <iprintf>:
 8005fc0:	b40f      	push	{r0, r1, r2, r3}
 8005fc2:	b507      	push	{r0, r1, r2, lr}
 8005fc4:	4906      	ldr	r1, [pc, #24]	; (8005fe0 <iprintf+0x20>)
 8005fc6:	ab04      	add	r3, sp, #16
 8005fc8:	6808      	ldr	r0, [r1, #0]
 8005fca:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fce:	6881      	ldr	r1, [r0, #8]
 8005fd0:	9301      	str	r3, [sp, #4]
 8005fd2:	f001 fcdd 	bl	8007990 <_vfiprintf_r>
 8005fd6:	b003      	add	sp, #12
 8005fd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fdc:	b004      	add	sp, #16
 8005fde:	4770      	bx	lr
 8005fe0:	20000064 	.word	0x20000064

08005fe4 <_puts_r>:
 8005fe4:	6a03      	ldr	r3, [r0, #32]
 8005fe6:	b570      	push	{r4, r5, r6, lr}
 8005fe8:	6884      	ldr	r4, [r0, #8]
 8005fea:	4605      	mov	r5, r0
 8005fec:	460e      	mov	r6, r1
 8005fee:	b90b      	cbnz	r3, 8005ff4 <_puts_r+0x10>
 8005ff0:	f7ff ffb0 	bl	8005f54 <__sinit>
 8005ff4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ff6:	07db      	lsls	r3, r3, #31
 8005ff8:	d405      	bmi.n	8006006 <_puts_r+0x22>
 8005ffa:	89a3      	ldrh	r3, [r4, #12]
 8005ffc:	0598      	lsls	r0, r3, #22
 8005ffe:	d402      	bmi.n	8006006 <_puts_r+0x22>
 8006000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006002:	f000 f9a0 	bl	8006346 <__retarget_lock_acquire_recursive>
 8006006:	89a3      	ldrh	r3, [r4, #12]
 8006008:	0719      	lsls	r1, r3, #28
 800600a:	d513      	bpl.n	8006034 <_puts_r+0x50>
 800600c:	6923      	ldr	r3, [r4, #16]
 800600e:	b18b      	cbz	r3, 8006034 <_puts_r+0x50>
 8006010:	3e01      	subs	r6, #1
 8006012:	68a3      	ldr	r3, [r4, #8]
 8006014:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006018:	3b01      	subs	r3, #1
 800601a:	60a3      	str	r3, [r4, #8]
 800601c:	b9e9      	cbnz	r1, 800605a <_puts_r+0x76>
 800601e:	2b00      	cmp	r3, #0
 8006020:	da2e      	bge.n	8006080 <_puts_r+0x9c>
 8006022:	4622      	mov	r2, r4
 8006024:	210a      	movs	r1, #10
 8006026:	4628      	mov	r0, r5
 8006028:	f000 f87b 	bl	8006122 <__swbuf_r>
 800602c:	3001      	adds	r0, #1
 800602e:	d007      	beq.n	8006040 <_puts_r+0x5c>
 8006030:	250a      	movs	r5, #10
 8006032:	e007      	b.n	8006044 <_puts_r+0x60>
 8006034:	4621      	mov	r1, r4
 8006036:	4628      	mov	r0, r5
 8006038:	f000 f8b0 	bl	800619c <__swsetup_r>
 800603c:	2800      	cmp	r0, #0
 800603e:	d0e7      	beq.n	8006010 <_puts_r+0x2c>
 8006040:	f04f 35ff 	mov.w	r5, #4294967295
 8006044:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006046:	07da      	lsls	r2, r3, #31
 8006048:	d405      	bmi.n	8006056 <_puts_r+0x72>
 800604a:	89a3      	ldrh	r3, [r4, #12]
 800604c:	059b      	lsls	r3, r3, #22
 800604e:	d402      	bmi.n	8006056 <_puts_r+0x72>
 8006050:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006052:	f000 f979 	bl	8006348 <__retarget_lock_release_recursive>
 8006056:	4628      	mov	r0, r5
 8006058:	bd70      	pop	{r4, r5, r6, pc}
 800605a:	2b00      	cmp	r3, #0
 800605c:	da04      	bge.n	8006068 <_puts_r+0x84>
 800605e:	69a2      	ldr	r2, [r4, #24]
 8006060:	429a      	cmp	r2, r3
 8006062:	dc06      	bgt.n	8006072 <_puts_r+0x8e>
 8006064:	290a      	cmp	r1, #10
 8006066:	d004      	beq.n	8006072 <_puts_r+0x8e>
 8006068:	6823      	ldr	r3, [r4, #0]
 800606a:	1c5a      	adds	r2, r3, #1
 800606c:	6022      	str	r2, [r4, #0]
 800606e:	7019      	strb	r1, [r3, #0]
 8006070:	e7cf      	b.n	8006012 <_puts_r+0x2e>
 8006072:	4622      	mov	r2, r4
 8006074:	4628      	mov	r0, r5
 8006076:	f000 f854 	bl	8006122 <__swbuf_r>
 800607a:	3001      	adds	r0, #1
 800607c:	d1c9      	bne.n	8006012 <_puts_r+0x2e>
 800607e:	e7df      	b.n	8006040 <_puts_r+0x5c>
 8006080:	6823      	ldr	r3, [r4, #0]
 8006082:	250a      	movs	r5, #10
 8006084:	1c5a      	adds	r2, r3, #1
 8006086:	6022      	str	r2, [r4, #0]
 8006088:	701d      	strb	r5, [r3, #0]
 800608a:	e7db      	b.n	8006044 <_puts_r+0x60>

0800608c <puts>:
 800608c:	4b02      	ldr	r3, [pc, #8]	; (8006098 <puts+0xc>)
 800608e:	4601      	mov	r1, r0
 8006090:	6818      	ldr	r0, [r3, #0]
 8006092:	f7ff bfa7 	b.w	8005fe4 <_puts_r>
 8006096:	bf00      	nop
 8006098:	20000064 	.word	0x20000064

0800609c <__sread>:
 800609c:	b510      	push	{r4, lr}
 800609e:	460c      	mov	r4, r1
 80060a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060a4:	f000 f900 	bl	80062a8 <_read_r>
 80060a8:	2800      	cmp	r0, #0
 80060aa:	bfab      	itete	ge
 80060ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80060ae:	89a3      	ldrhlt	r3, [r4, #12]
 80060b0:	181b      	addge	r3, r3, r0
 80060b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80060b6:	bfac      	ite	ge
 80060b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80060ba:	81a3      	strhlt	r3, [r4, #12]
 80060bc:	bd10      	pop	{r4, pc}

080060be <__swrite>:
 80060be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060c2:	461f      	mov	r7, r3
 80060c4:	898b      	ldrh	r3, [r1, #12]
 80060c6:	05db      	lsls	r3, r3, #23
 80060c8:	4605      	mov	r5, r0
 80060ca:	460c      	mov	r4, r1
 80060cc:	4616      	mov	r6, r2
 80060ce:	d505      	bpl.n	80060dc <__swrite+0x1e>
 80060d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060d4:	2302      	movs	r3, #2
 80060d6:	2200      	movs	r2, #0
 80060d8:	f000 f8d4 	bl	8006284 <_lseek_r>
 80060dc:	89a3      	ldrh	r3, [r4, #12]
 80060de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060e6:	81a3      	strh	r3, [r4, #12]
 80060e8:	4632      	mov	r2, r6
 80060ea:	463b      	mov	r3, r7
 80060ec:	4628      	mov	r0, r5
 80060ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060f2:	f000 b8eb 	b.w	80062cc <_write_r>

080060f6 <__sseek>:
 80060f6:	b510      	push	{r4, lr}
 80060f8:	460c      	mov	r4, r1
 80060fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060fe:	f000 f8c1 	bl	8006284 <_lseek_r>
 8006102:	1c43      	adds	r3, r0, #1
 8006104:	89a3      	ldrh	r3, [r4, #12]
 8006106:	bf15      	itete	ne
 8006108:	6560      	strne	r0, [r4, #84]	; 0x54
 800610a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800610e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006112:	81a3      	strheq	r3, [r4, #12]
 8006114:	bf18      	it	ne
 8006116:	81a3      	strhne	r3, [r4, #12]
 8006118:	bd10      	pop	{r4, pc}

0800611a <__sclose>:
 800611a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800611e:	f000 b8a1 	b.w	8006264 <_close_r>

08006122 <__swbuf_r>:
 8006122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006124:	460e      	mov	r6, r1
 8006126:	4614      	mov	r4, r2
 8006128:	4605      	mov	r5, r0
 800612a:	b118      	cbz	r0, 8006134 <__swbuf_r+0x12>
 800612c:	6a03      	ldr	r3, [r0, #32]
 800612e:	b90b      	cbnz	r3, 8006134 <__swbuf_r+0x12>
 8006130:	f7ff ff10 	bl	8005f54 <__sinit>
 8006134:	69a3      	ldr	r3, [r4, #24]
 8006136:	60a3      	str	r3, [r4, #8]
 8006138:	89a3      	ldrh	r3, [r4, #12]
 800613a:	071a      	lsls	r2, r3, #28
 800613c:	d525      	bpl.n	800618a <__swbuf_r+0x68>
 800613e:	6923      	ldr	r3, [r4, #16]
 8006140:	b31b      	cbz	r3, 800618a <__swbuf_r+0x68>
 8006142:	6823      	ldr	r3, [r4, #0]
 8006144:	6922      	ldr	r2, [r4, #16]
 8006146:	1a98      	subs	r0, r3, r2
 8006148:	6963      	ldr	r3, [r4, #20]
 800614a:	b2f6      	uxtb	r6, r6
 800614c:	4283      	cmp	r3, r0
 800614e:	4637      	mov	r7, r6
 8006150:	dc04      	bgt.n	800615c <__swbuf_r+0x3a>
 8006152:	4621      	mov	r1, r4
 8006154:	4628      	mov	r0, r5
 8006156:	f001 fdbb 	bl	8007cd0 <_fflush_r>
 800615a:	b9e0      	cbnz	r0, 8006196 <__swbuf_r+0x74>
 800615c:	68a3      	ldr	r3, [r4, #8]
 800615e:	3b01      	subs	r3, #1
 8006160:	60a3      	str	r3, [r4, #8]
 8006162:	6823      	ldr	r3, [r4, #0]
 8006164:	1c5a      	adds	r2, r3, #1
 8006166:	6022      	str	r2, [r4, #0]
 8006168:	701e      	strb	r6, [r3, #0]
 800616a:	6962      	ldr	r2, [r4, #20]
 800616c:	1c43      	adds	r3, r0, #1
 800616e:	429a      	cmp	r2, r3
 8006170:	d004      	beq.n	800617c <__swbuf_r+0x5a>
 8006172:	89a3      	ldrh	r3, [r4, #12]
 8006174:	07db      	lsls	r3, r3, #31
 8006176:	d506      	bpl.n	8006186 <__swbuf_r+0x64>
 8006178:	2e0a      	cmp	r6, #10
 800617a:	d104      	bne.n	8006186 <__swbuf_r+0x64>
 800617c:	4621      	mov	r1, r4
 800617e:	4628      	mov	r0, r5
 8006180:	f001 fda6 	bl	8007cd0 <_fflush_r>
 8006184:	b938      	cbnz	r0, 8006196 <__swbuf_r+0x74>
 8006186:	4638      	mov	r0, r7
 8006188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800618a:	4621      	mov	r1, r4
 800618c:	4628      	mov	r0, r5
 800618e:	f000 f805 	bl	800619c <__swsetup_r>
 8006192:	2800      	cmp	r0, #0
 8006194:	d0d5      	beq.n	8006142 <__swbuf_r+0x20>
 8006196:	f04f 37ff 	mov.w	r7, #4294967295
 800619a:	e7f4      	b.n	8006186 <__swbuf_r+0x64>

0800619c <__swsetup_r>:
 800619c:	b538      	push	{r3, r4, r5, lr}
 800619e:	4b2a      	ldr	r3, [pc, #168]	; (8006248 <__swsetup_r+0xac>)
 80061a0:	4605      	mov	r5, r0
 80061a2:	6818      	ldr	r0, [r3, #0]
 80061a4:	460c      	mov	r4, r1
 80061a6:	b118      	cbz	r0, 80061b0 <__swsetup_r+0x14>
 80061a8:	6a03      	ldr	r3, [r0, #32]
 80061aa:	b90b      	cbnz	r3, 80061b0 <__swsetup_r+0x14>
 80061ac:	f7ff fed2 	bl	8005f54 <__sinit>
 80061b0:	89a3      	ldrh	r3, [r4, #12]
 80061b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80061b6:	0718      	lsls	r0, r3, #28
 80061b8:	d422      	bmi.n	8006200 <__swsetup_r+0x64>
 80061ba:	06d9      	lsls	r1, r3, #27
 80061bc:	d407      	bmi.n	80061ce <__swsetup_r+0x32>
 80061be:	2309      	movs	r3, #9
 80061c0:	602b      	str	r3, [r5, #0]
 80061c2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80061c6:	81a3      	strh	r3, [r4, #12]
 80061c8:	f04f 30ff 	mov.w	r0, #4294967295
 80061cc:	e034      	b.n	8006238 <__swsetup_r+0x9c>
 80061ce:	0758      	lsls	r0, r3, #29
 80061d0:	d512      	bpl.n	80061f8 <__swsetup_r+0x5c>
 80061d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061d4:	b141      	cbz	r1, 80061e8 <__swsetup_r+0x4c>
 80061d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061da:	4299      	cmp	r1, r3
 80061dc:	d002      	beq.n	80061e4 <__swsetup_r+0x48>
 80061de:	4628      	mov	r0, r5
 80061e0:	f000 ff30 	bl	8007044 <_free_r>
 80061e4:	2300      	movs	r3, #0
 80061e6:	6363      	str	r3, [r4, #52]	; 0x34
 80061e8:	89a3      	ldrh	r3, [r4, #12]
 80061ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80061ee:	81a3      	strh	r3, [r4, #12]
 80061f0:	2300      	movs	r3, #0
 80061f2:	6063      	str	r3, [r4, #4]
 80061f4:	6923      	ldr	r3, [r4, #16]
 80061f6:	6023      	str	r3, [r4, #0]
 80061f8:	89a3      	ldrh	r3, [r4, #12]
 80061fa:	f043 0308 	orr.w	r3, r3, #8
 80061fe:	81a3      	strh	r3, [r4, #12]
 8006200:	6923      	ldr	r3, [r4, #16]
 8006202:	b94b      	cbnz	r3, 8006218 <__swsetup_r+0x7c>
 8006204:	89a3      	ldrh	r3, [r4, #12]
 8006206:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800620a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800620e:	d003      	beq.n	8006218 <__swsetup_r+0x7c>
 8006210:	4621      	mov	r1, r4
 8006212:	4628      	mov	r0, r5
 8006214:	f001 fdaa 	bl	8007d6c <__smakebuf_r>
 8006218:	89a0      	ldrh	r0, [r4, #12]
 800621a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800621e:	f010 0301 	ands.w	r3, r0, #1
 8006222:	d00a      	beq.n	800623a <__swsetup_r+0x9e>
 8006224:	2300      	movs	r3, #0
 8006226:	60a3      	str	r3, [r4, #8]
 8006228:	6963      	ldr	r3, [r4, #20]
 800622a:	425b      	negs	r3, r3
 800622c:	61a3      	str	r3, [r4, #24]
 800622e:	6923      	ldr	r3, [r4, #16]
 8006230:	b943      	cbnz	r3, 8006244 <__swsetup_r+0xa8>
 8006232:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006236:	d1c4      	bne.n	80061c2 <__swsetup_r+0x26>
 8006238:	bd38      	pop	{r3, r4, r5, pc}
 800623a:	0781      	lsls	r1, r0, #30
 800623c:	bf58      	it	pl
 800623e:	6963      	ldrpl	r3, [r4, #20]
 8006240:	60a3      	str	r3, [r4, #8]
 8006242:	e7f4      	b.n	800622e <__swsetup_r+0x92>
 8006244:	2000      	movs	r0, #0
 8006246:	e7f7      	b.n	8006238 <__swsetup_r+0x9c>
 8006248:	20000064 	.word	0x20000064

0800624c <memset>:
 800624c:	4402      	add	r2, r0
 800624e:	4603      	mov	r3, r0
 8006250:	4293      	cmp	r3, r2
 8006252:	d100      	bne.n	8006256 <memset+0xa>
 8006254:	4770      	bx	lr
 8006256:	f803 1b01 	strb.w	r1, [r3], #1
 800625a:	e7f9      	b.n	8006250 <memset+0x4>

0800625c <_localeconv_r>:
 800625c:	4800      	ldr	r0, [pc, #0]	; (8006260 <_localeconv_r+0x4>)
 800625e:	4770      	bx	lr
 8006260:	20000158 	.word	0x20000158

08006264 <_close_r>:
 8006264:	b538      	push	{r3, r4, r5, lr}
 8006266:	4d06      	ldr	r5, [pc, #24]	; (8006280 <_close_r+0x1c>)
 8006268:	2300      	movs	r3, #0
 800626a:	4604      	mov	r4, r0
 800626c:	4608      	mov	r0, r1
 800626e:	602b      	str	r3, [r5, #0]
 8006270:	f7fb fa81 	bl	8001776 <_close>
 8006274:	1c43      	adds	r3, r0, #1
 8006276:	d102      	bne.n	800627e <_close_r+0x1a>
 8006278:	682b      	ldr	r3, [r5, #0]
 800627a:	b103      	cbz	r3, 800627e <_close_r+0x1a>
 800627c:	6023      	str	r3, [r4, #0]
 800627e:	bd38      	pop	{r3, r4, r5, pc}
 8006280:	2000083c 	.word	0x2000083c

08006284 <_lseek_r>:
 8006284:	b538      	push	{r3, r4, r5, lr}
 8006286:	4d07      	ldr	r5, [pc, #28]	; (80062a4 <_lseek_r+0x20>)
 8006288:	4604      	mov	r4, r0
 800628a:	4608      	mov	r0, r1
 800628c:	4611      	mov	r1, r2
 800628e:	2200      	movs	r2, #0
 8006290:	602a      	str	r2, [r5, #0]
 8006292:	461a      	mov	r2, r3
 8006294:	f7fb fa96 	bl	80017c4 <_lseek>
 8006298:	1c43      	adds	r3, r0, #1
 800629a:	d102      	bne.n	80062a2 <_lseek_r+0x1e>
 800629c:	682b      	ldr	r3, [r5, #0]
 800629e:	b103      	cbz	r3, 80062a2 <_lseek_r+0x1e>
 80062a0:	6023      	str	r3, [r4, #0]
 80062a2:	bd38      	pop	{r3, r4, r5, pc}
 80062a4:	2000083c 	.word	0x2000083c

080062a8 <_read_r>:
 80062a8:	b538      	push	{r3, r4, r5, lr}
 80062aa:	4d07      	ldr	r5, [pc, #28]	; (80062c8 <_read_r+0x20>)
 80062ac:	4604      	mov	r4, r0
 80062ae:	4608      	mov	r0, r1
 80062b0:	4611      	mov	r1, r2
 80062b2:	2200      	movs	r2, #0
 80062b4:	602a      	str	r2, [r5, #0]
 80062b6:	461a      	mov	r2, r3
 80062b8:	f7fb fa24 	bl	8001704 <_read>
 80062bc:	1c43      	adds	r3, r0, #1
 80062be:	d102      	bne.n	80062c6 <_read_r+0x1e>
 80062c0:	682b      	ldr	r3, [r5, #0]
 80062c2:	b103      	cbz	r3, 80062c6 <_read_r+0x1e>
 80062c4:	6023      	str	r3, [r4, #0]
 80062c6:	bd38      	pop	{r3, r4, r5, pc}
 80062c8:	2000083c 	.word	0x2000083c

080062cc <_write_r>:
 80062cc:	b538      	push	{r3, r4, r5, lr}
 80062ce:	4d07      	ldr	r5, [pc, #28]	; (80062ec <_write_r+0x20>)
 80062d0:	4604      	mov	r4, r0
 80062d2:	4608      	mov	r0, r1
 80062d4:	4611      	mov	r1, r2
 80062d6:	2200      	movs	r2, #0
 80062d8:	602a      	str	r2, [r5, #0]
 80062da:	461a      	mov	r2, r3
 80062dc:	f7fb fa2f 	bl	800173e <_write>
 80062e0:	1c43      	adds	r3, r0, #1
 80062e2:	d102      	bne.n	80062ea <_write_r+0x1e>
 80062e4:	682b      	ldr	r3, [r5, #0]
 80062e6:	b103      	cbz	r3, 80062ea <_write_r+0x1e>
 80062e8:	6023      	str	r3, [r4, #0]
 80062ea:	bd38      	pop	{r3, r4, r5, pc}
 80062ec:	2000083c 	.word	0x2000083c

080062f0 <__errno>:
 80062f0:	4b01      	ldr	r3, [pc, #4]	; (80062f8 <__errno+0x8>)
 80062f2:	6818      	ldr	r0, [r3, #0]
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	20000064 	.word	0x20000064

080062fc <__libc_init_array>:
 80062fc:	b570      	push	{r4, r5, r6, lr}
 80062fe:	4d0d      	ldr	r5, [pc, #52]	; (8006334 <__libc_init_array+0x38>)
 8006300:	4c0d      	ldr	r4, [pc, #52]	; (8006338 <__libc_init_array+0x3c>)
 8006302:	1b64      	subs	r4, r4, r5
 8006304:	10a4      	asrs	r4, r4, #2
 8006306:	2600      	movs	r6, #0
 8006308:	42a6      	cmp	r6, r4
 800630a:	d109      	bne.n	8006320 <__libc_init_array+0x24>
 800630c:	4d0b      	ldr	r5, [pc, #44]	; (800633c <__libc_init_array+0x40>)
 800630e:	4c0c      	ldr	r4, [pc, #48]	; (8006340 <__libc_init_array+0x44>)
 8006310:	f001 fe5a 	bl	8007fc8 <_init>
 8006314:	1b64      	subs	r4, r4, r5
 8006316:	10a4      	asrs	r4, r4, #2
 8006318:	2600      	movs	r6, #0
 800631a:	42a6      	cmp	r6, r4
 800631c:	d105      	bne.n	800632a <__libc_init_array+0x2e>
 800631e:	bd70      	pop	{r4, r5, r6, pc}
 8006320:	f855 3b04 	ldr.w	r3, [r5], #4
 8006324:	4798      	blx	r3
 8006326:	3601      	adds	r6, #1
 8006328:	e7ee      	b.n	8006308 <__libc_init_array+0xc>
 800632a:	f855 3b04 	ldr.w	r3, [r5], #4
 800632e:	4798      	blx	r3
 8006330:	3601      	adds	r6, #1
 8006332:	e7f2      	b.n	800631a <__libc_init_array+0x1e>
 8006334:	0800842c 	.word	0x0800842c
 8006338:	0800842c 	.word	0x0800842c
 800633c:	0800842c 	.word	0x0800842c
 8006340:	08008430 	.word	0x08008430

08006344 <__retarget_lock_init_recursive>:
 8006344:	4770      	bx	lr

08006346 <__retarget_lock_acquire_recursive>:
 8006346:	4770      	bx	lr

08006348 <__retarget_lock_release_recursive>:
 8006348:	4770      	bx	lr

0800634a <quorem>:
 800634a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800634e:	6903      	ldr	r3, [r0, #16]
 8006350:	690c      	ldr	r4, [r1, #16]
 8006352:	42a3      	cmp	r3, r4
 8006354:	4607      	mov	r7, r0
 8006356:	db7e      	blt.n	8006456 <quorem+0x10c>
 8006358:	3c01      	subs	r4, #1
 800635a:	f101 0814 	add.w	r8, r1, #20
 800635e:	f100 0514 	add.w	r5, r0, #20
 8006362:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006366:	9301      	str	r3, [sp, #4]
 8006368:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800636c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006370:	3301      	adds	r3, #1
 8006372:	429a      	cmp	r2, r3
 8006374:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006378:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800637c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006380:	d331      	bcc.n	80063e6 <quorem+0x9c>
 8006382:	f04f 0e00 	mov.w	lr, #0
 8006386:	4640      	mov	r0, r8
 8006388:	46ac      	mov	ip, r5
 800638a:	46f2      	mov	sl, lr
 800638c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006390:	b293      	uxth	r3, r2
 8006392:	fb06 e303 	mla	r3, r6, r3, lr
 8006396:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800639a:	0c1a      	lsrs	r2, r3, #16
 800639c:	b29b      	uxth	r3, r3
 800639e:	ebaa 0303 	sub.w	r3, sl, r3
 80063a2:	f8dc a000 	ldr.w	sl, [ip]
 80063a6:	fa13 f38a 	uxtah	r3, r3, sl
 80063aa:	fb06 220e 	mla	r2, r6, lr, r2
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	9b00      	ldr	r3, [sp, #0]
 80063b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80063b6:	b292      	uxth	r2, r2
 80063b8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80063bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063c0:	f8bd 3000 	ldrh.w	r3, [sp]
 80063c4:	4581      	cmp	r9, r0
 80063c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063ca:	f84c 3b04 	str.w	r3, [ip], #4
 80063ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80063d2:	d2db      	bcs.n	800638c <quorem+0x42>
 80063d4:	f855 300b 	ldr.w	r3, [r5, fp]
 80063d8:	b92b      	cbnz	r3, 80063e6 <quorem+0x9c>
 80063da:	9b01      	ldr	r3, [sp, #4]
 80063dc:	3b04      	subs	r3, #4
 80063de:	429d      	cmp	r5, r3
 80063e0:	461a      	mov	r2, r3
 80063e2:	d32c      	bcc.n	800643e <quorem+0xf4>
 80063e4:	613c      	str	r4, [r7, #16]
 80063e6:	4638      	mov	r0, r7
 80063e8:	f001 f9a8 	bl	800773c <__mcmp>
 80063ec:	2800      	cmp	r0, #0
 80063ee:	db22      	blt.n	8006436 <quorem+0xec>
 80063f0:	3601      	adds	r6, #1
 80063f2:	4629      	mov	r1, r5
 80063f4:	2000      	movs	r0, #0
 80063f6:	f858 2b04 	ldr.w	r2, [r8], #4
 80063fa:	f8d1 c000 	ldr.w	ip, [r1]
 80063fe:	b293      	uxth	r3, r2
 8006400:	1ac3      	subs	r3, r0, r3
 8006402:	0c12      	lsrs	r2, r2, #16
 8006404:	fa13 f38c 	uxtah	r3, r3, ip
 8006408:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800640c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006410:	b29b      	uxth	r3, r3
 8006412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006416:	45c1      	cmp	r9, r8
 8006418:	f841 3b04 	str.w	r3, [r1], #4
 800641c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006420:	d2e9      	bcs.n	80063f6 <quorem+0xac>
 8006422:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006426:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800642a:	b922      	cbnz	r2, 8006436 <quorem+0xec>
 800642c:	3b04      	subs	r3, #4
 800642e:	429d      	cmp	r5, r3
 8006430:	461a      	mov	r2, r3
 8006432:	d30a      	bcc.n	800644a <quorem+0x100>
 8006434:	613c      	str	r4, [r7, #16]
 8006436:	4630      	mov	r0, r6
 8006438:	b003      	add	sp, #12
 800643a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800643e:	6812      	ldr	r2, [r2, #0]
 8006440:	3b04      	subs	r3, #4
 8006442:	2a00      	cmp	r2, #0
 8006444:	d1ce      	bne.n	80063e4 <quorem+0x9a>
 8006446:	3c01      	subs	r4, #1
 8006448:	e7c9      	b.n	80063de <quorem+0x94>
 800644a:	6812      	ldr	r2, [r2, #0]
 800644c:	3b04      	subs	r3, #4
 800644e:	2a00      	cmp	r2, #0
 8006450:	d1f0      	bne.n	8006434 <quorem+0xea>
 8006452:	3c01      	subs	r4, #1
 8006454:	e7eb      	b.n	800642e <quorem+0xe4>
 8006456:	2000      	movs	r0, #0
 8006458:	e7ee      	b.n	8006438 <quorem+0xee>
 800645a:	0000      	movs	r0, r0
 800645c:	0000      	movs	r0, r0
	...

08006460 <_dtoa_r>:
 8006460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006464:	ed2d 8b04 	vpush	{d8-d9}
 8006468:	69c5      	ldr	r5, [r0, #28]
 800646a:	b093      	sub	sp, #76	; 0x4c
 800646c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006470:	ec57 6b10 	vmov	r6, r7, d0
 8006474:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006478:	9107      	str	r1, [sp, #28]
 800647a:	4604      	mov	r4, r0
 800647c:	920a      	str	r2, [sp, #40]	; 0x28
 800647e:	930d      	str	r3, [sp, #52]	; 0x34
 8006480:	b975      	cbnz	r5, 80064a0 <_dtoa_r+0x40>
 8006482:	2010      	movs	r0, #16
 8006484:	f000 fe2a 	bl	80070dc <malloc>
 8006488:	4602      	mov	r2, r0
 800648a:	61e0      	str	r0, [r4, #28]
 800648c:	b920      	cbnz	r0, 8006498 <_dtoa_r+0x38>
 800648e:	4bae      	ldr	r3, [pc, #696]	; (8006748 <_dtoa_r+0x2e8>)
 8006490:	21ef      	movs	r1, #239	; 0xef
 8006492:	48ae      	ldr	r0, [pc, #696]	; (800674c <_dtoa_r+0x2ec>)
 8006494:	f001 fce6 	bl	8007e64 <__assert_func>
 8006498:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800649c:	6005      	str	r5, [r0, #0]
 800649e:	60c5      	str	r5, [r0, #12]
 80064a0:	69e3      	ldr	r3, [r4, #28]
 80064a2:	6819      	ldr	r1, [r3, #0]
 80064a4:	b151      	cbz	r1, 80064bc <_dtoa_r+0x5c>
 80064a6:	685a      	ldr	r2, [r3, #4]
 80064a8:	604a      	str	r2, [r1, #4]
 80064aa:	2301      	movs	r3, #1
 80064ac:	4093      	lsls	r3, r2
 80064ae:	608b      	str	r3, [r1, #8]
 80064b0:	4620      	mov	r0, r4
 80064b2:	f000 ff07 	bl	80072c4 <_Bfree>
 80064b6:	69e3      	ldr	r3, [r4, #28]
 80064b8:	2200      	movs	r2, #0
 80064ba:	601a      	str	r2, [r3, #0]
 80064bc:	1e3b      	subs	r3, r7, #0
 80064be:	bfbb      	ittet	lt
 80064c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80064c4:	9303      	strlt	r3, [sp, #12]
 80064c6:	2300      	movge	r3, #0
 80064c8:	2201      	movlt	r2, #1
 80064ca:	bfac      	ite	ge
 80064cc:	f8c8 3000 	strge.w	r3, [r8]
 80064d0:	f8c8 2000 	strlt.w	r2, [r8]
 80064d4:	4b9e      	ldr	r3, [pc, #632]	; (8006750 <_dtoa_r+0x2f0>)
 80064d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80064da:	ea33 0308 	bics.w	r3, r3, r8
 80064de:	d11b      	bne.n	8006518 <_dtoa_r+0xb8>
 80064e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80064e2:	f242 730f 	movw	r3, #9999	; 0x270f
 80064e6:	6013      	str	r3, [r2, #0]
 80064e8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80064ec:	4333      	orrs	r3, r6
 80064ee:	f000 8593 	beq.w	8007018 <_dtoa_r+0xbb8>
 80064f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064f4:	b963      	cbnz	r3, 8006510 <_dtoa_r+0xb0>
 80064f6:	4b97      	ldr	r3, [pc, #604]	; (8006754 <_dtoa_r+0x2f4>)
 80064f8:	e027      	b.n	800654a <_dtoa_r+0xea>
 80064fa:	4b97      	ldr	r3, [pc, #604]	; (8006758 <_dtoa_r+0x2f8>)
 80064fc:	9300      	str	r3, [sp, #0]
 80064fe:	3308      	adds	r3, #8
 8006500:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006502:	6013      	str	r3, [r2, #0]
 8006504:	9800      	ldr	r0, [sp, #0]
 8006506:	b013      	add	sp, #76	; 0x4c
 8006508:	ecbd 8b04 	vpop	{d8-d9}
 800650c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006510:	4b90      	ldr	r3, [pc, #576]	; (8006754 <_dtoa_r+0x2f4>)
 8006512:	9300      	str	r3, [sp, #0]
 8006514:	3303      	adds	r3, #3
 8006516:	e7f3      	b.n	8006500 <_dtoa_r+0xa0>
 8006518:	ed9d 7b02 	vldr	d7, [sp, #8]
 800651c:	2200      	movs	r2, #0
 800651e:	ec51 0b17 	vmov	r0, r1, d7
 8006522:	eeb0 8a47 	vmov.f32	s16, s14
 8006526:	eef0 8a67 	vmov.f32	s17, s15
 800652a:	2300      	movs	r3, #0
 800652c:	f7fa facc 	bl	8000ac8 <__aeabi_dcmpeq>
 8006530:	4681      	mov	r9, r0
 8006532:	b160      	cbz	r0, 800654e <_dtoa_r+0xee>
 8006534:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006536:	2301      	movs	r3, #1
 8006538:	6013      	str	r3, [r2, #0]
 800653a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800653c:	2b00      	cmp	r3, #0
 800653e:	f000 8568 	beq.w	8007012 <_dtoa_r+0xbb2>
 8006542:	4b86      	ldr	r3, [pc, #536]	; (800675c <_dtoa_r+0x2fc>)
 8006544:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006546:	6013      	str	r3, [r2, #0]
 8006548:	3b01      	subs	r3, #1
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	e7da      	b.n	8006504 <_dtoa_r+0xa4>
 800654e:	aa10      	add	r2, sp, #64	; 0x40
 8006550:	a911      	add	r1, sp, #68	; 0x44
 8006552:	4620      	mov	r0, r4
 8006554:	eeb0 0a48 	vmov.f32	s0, s16
 8006558:	eef0 0a68 	vmov.f32	s1, s17
 800655c:	f001 f994 	bl	8007888 <__d2b>
 8006560:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006564:	4682      	mov	sl, r0
 8006566:	2d00      	cmp	r5, #0
 8006568:	d07f      	beq.n	800666a <_dtoa_r+0x20a>
 800656a:	ee18 3a90 	vmov	r3, s17
 800656e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006572:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006576:	ec51 0b18 	vmov	r0, r1, d8
 800657a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800657e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006582:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006586:	4619      	mov	r1, r3
 8006588:	2200      	movs	r2, #0
 800658a:	4b75      	ldr	r3, [pc, #468]	; (8006760 <_dtoa_r+0x300>)
 800658c:	f7f9 fe7c 	bl	8000288 <__aeabi_dsub>
 8006590:	a367      	add	r3, pc, #412	; (adr r3, 8006730 <_dtoa_r+0x2d0>)
 8006592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006596:	f7fa f82f 	bl	80005f8 <__aeabi_dmul>
 800659a:	a367      	add	r3, pc, #412	; (adr r3, 8006738 <_dtoa_r+0x2d8>)
 800659c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a0:	f7f9 fe74 	bl	800028c <__adddf3>
 80065a4:	4606      	mov	r6, r0
 80065a6:	4628      	mov	r0, r5
 80065a8:	460f      	mov	r7, r1
 80065aa:	f7f9 ffbb 	bl	8000524 <__aeabi_i2d>
 80065ae:	a364      	add	r3, pc, #400	; (adr r3, 8006740 <_dtoa_r+0x2e0>)
 80065b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b4:	f7fa f820 	bl	80005f8 <__aeabi_dmul>
 80065b8:	4602      	mov	r2, r0
 80065ba:	460b      	mov	r3, r1
 80065bc:	4630      	mov	r0, r6
 80065be:	4639      	mov	r1, r7
 80065c0:	f7f9 fe64 	bl	800028c <__adddf3>
 80065c4:	4606      	mov	r6, r0
 80065c6:	460f      	mov	r7, r1
 80065c8:	f7fa fac6 	bl	8000b58 <__aeabi_d2iz>
 80065cc:	2200      	movs	r2, #0
 80065ce:	4683      	mov	fp, r0
 80065d0:	2300      	movs	r3, #0
 80065d2:	4630      	mov	r0, r6
 80065d4:	4639      	mov	r1, r7
 80065d6:	f7fa fa81 	bl	8000adc <__aeabi_dcmplt>
 80065da:	b148      	cbz	r0, 80065f0 <_dtoa_r+0x190>
 80065dc:	4658      	mov	r0, fp
 80065de:	f7f9 ffa1 	bl	8000524 <__aeabi_i2d>
 80065e2:	4632      	mov	r2, r6
 80065e4:	463b      	mov	r3, r7
 80065e6:	f7fa fa6f 	bl	8000ac8 <__aeabi_dcmpeq>
 80065ea:	b908      	cbnz	r0, 80065f0 <_dtoa_r+0x190>
 80065ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80065f0:	f1bb 0f16 	cmp.w	fp, #22
 80065f4:	d857      	bhi.n	80066a6 <_dtoa_r+0x246>
 80065f6:	4b5b      	ldr	r3, [pc, #364]	; (8006764 <_dtoa_r+0x304>)
 80065f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80065fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006600:	ec51 0b18 	vmov	r0, r1, d8
 8006604:	f7fa fa6a 	bl	8000adc <__aeabi_dcmplt>
 8006608:	2800      	cmp	r0, #0
 800660a:	d04e      	beq.n	80066aa <_dtoa_r+0x24a>
 800660c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006610:	2300      	movs	r3, #0
 8006612:	930c      	str	r3, [sp, #48]	; 0x30
 8006614:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006616:	1b5b      	subs	r3, r3, r5
 8006618:	1e5a      	subs	r2, r3, #1
 800661a:	bf45      	ittet	mi
 800661c:	f1c3 0301 	rsbmi	r3, r3, #1
 8006620:	9305      	strmi	r3, [sp, #20]
 8006622:	2300      	movpl	r3, #0
 8006624:	2300      	movmi	r3, #0
 8006626:	9206      	str	r2, [sp, #24]
 8006628:	bf54      	ite	pl
 800662a:	9305      	strpl	r3, [sp, #20]
 800662c:	9306      	strmi	r3, [sp, #24]
 800662e:	f1bb 0f00 	cmp.w	fp, #0
 8006632:	db3c      	blt.n	80066ae <_dtoa_r+0x24e>
 8006634:	9b06      	ldr	r3, [sp, #24]
 8006636:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800663a:	445b      	add	r3, fp
 800663c:	9306      	str	r3, [sp, #24]
 800663e:	2300      	movs	r3, #0
 8006640:	9308      	str	r3, [sp, #32]
 8006642:	9b07      	ldr	r3, [sp, #28]
 8006644:	2b09      	cmp	r3, #9
 8006646:	d868      	bhi.n	800671a <_dtoa_r+0x2ba>
 8006648:	2b05      	cmp	r3, #5
 800664a:	bfc4      	itt	gt
 800664c:	3b04      	subgt	r3, #4
 800664e:	9307      	strgt	r3, [sp, #28]
 8006650:	9b07      	ldr	r3, [sp, #28]
 8006652:	f1a3 0302 	sub.w	r3, r3, #2
 8006656:	bfcc      	ite	gt
 8006658:	2500      	movgt	r5, #0
 800665a:	2501      	movle	r5, #1
 800665c:	2b03      	cmp	r3, #3
 800665e:	f200 8085 	bhi.w	800676c <_dtoa_r+0x30c>
 8006662:	e8df f003 	tbb	[pc, r3]
 8006666:	3b2e      	.short	0x3b2e
 8006668:	5839      	.short	0x5839
 800666a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800666e:	441d      	add	r5, r3
 8006670:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006674:	2b20      	cmp	r3, #32
 8006676:	bfc1      	itttt	gt
 8006678:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800667c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006680:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006684:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006688:	bfd6      	itet	le
 800668a:	f1c3 0320 	rsble	r3, r3, #32
 800668e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006692:	fa06 f003 	lslle.w	r0, r6, r3
 8006696:	f7f9 ff35 	bl	8000504 <__aeabi_ui2d>
 800669a:	2201      	movs	r2, #1
 800669c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80066a0:	3d01      	subs	r5, #1
 80066a2:	920e      	str	r2, [sp, #56]	; 0x38
 80066a4:	e76f      	b.n	8006586 <_dtoa_r+0x126>
 80066a6:	2301      	movs	r3, #1
 80066a8:	e7b3      	b.n	8006612 <_dtoa_r+0x1b2>
 80066aa:	900c      	str	r0, [sp, #48]	; 0x30
 80066ac:	e7b2      	b.n	8006614 <_dtoa_r+0x1b4>
 80066ae:	9b05      	ldr	r3, [sp, #20]
 80066b0:	eba3 030b 	sub.w	r3, r3, fp
 80066b4:	9305      	str	r3, [sp, #20]
 80066b6:	f1cb 0300 	rsb	r3, fp, #0
 80066ba:	9308      	str	r3, [sp, #32]
 80066bc:	2300      	movs	r3, #0
 80066be:	930b      	str	r3, [sp, #44]	; 0x2c
 80066c0:	e7bf      	b.n	8006642 <_dtoa_r+0x1e2>
 80066c2:	2300      	movs	r3, #0
 80066c4:	9309      	str	r3, [sp, #36]	; 0x24
 80066c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	dc52      	bgt.n	8006772 <_dtoa_r+0x312>
 80066cc:	2301      	movs	r3, #1
 80066ce:	9301      	str	r3, [sp, #4]
 80066d0:	9304      	str	r3, [sp, #16]
 80066d2:	461a      	mov	r2, r3
 80066d4:	920a      	str	r2, [sp, #40]	; 0x28
 80066d6:	e00b      	b.n	80066f0 <_dtoa_r+0x290>
 80066d8:	2301      	movs	r3, #1
 80066da:	e7f3      	b.n	80066c4 <_dtoa_r+0x264>
 80066dc:	2300      	movs	r3, #0
 80066de:	9309      	str	r3, [sp, #36]	; 0x24
 80066e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066e2:	445b      	add	r3, fp
 80066e4:	9301      	str	r3, [sp, #4]
 80066e6:	3301      	adds	r3, #1
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	9304      	str	r3, [sp, #16]
 80066ec:	bfb8      	it	lt
 80066ee:	2301      	movlt	r3, #1
 80066f0:	69e0      	ldr	r0, [r4, #28]
 80066f2:	2100      	movs	r1, #0
 80066f4:	2204      	movs	r2, #4
 80066f6:	f102 0614 	add.w	r6, r2, #20
 80066fa:	429e      	cmp	r6, r3
 80066fc:	d93d      	bls.n	800677a <_dtoa_r+0x31a>
 80066fe:	6041      	str	r1, [r0, #4]
 8006700:	4620      	mov	r0, r4
 8006702:	f000 fd9f 	bl	8007244 <_Balloc>
 8006706:	9000      	str	r0, [sp, #0]
 8006708:	2800      	cmp	r0, #0
 800670a:	d139      	bne.n	8006780 <_dtoa_r+0x320>
 800670c:	4b16      	ldr	r3, [pc, #88]	; (8006768 <_dtoa_r+0x308>)
 800670e:	4602      	mov	r2, r0
 8006710:	f240 11af 	movw	r1, #431	; 0x1af
 8006714:	e6bd      	b.n	8006492 <_dtoa_r+0x32>
 8006716:	2301      	movs	r3, #1
 8006718:	e7e1      	b.n	80066de <_dtoa_r+0x27e>
 800671a:	2501      	movs	r5, #1
 800671c:	2300      	movs	r3, #0
 800671e:	9307      	str	r3, [sp, #28]
 8006720:	9509      	str	r5, [sp, #36]	; 0x24
 8006722:	f04f 33ff 	mov.w	r3, #4294967295
 8006726:	9301      	str	r3, [sp, #4]
 8006728:	9304      	str	r3, [sp, #16]
 800672a:	2200      	movs	r2, #0
 800672c:	2312      	movs	r3, #18
 800672e:	e7d1      	b.n	80066d4 <_dtoa_r+0x274>
 8006730:	636f4361 	.word	0x636f4361
 8006734:	3fd287a7 	.word	0x3fd287a7
 8006738:	8b60c8b3 	.word	0x8b60c8b3
 800673c:	3fc68a28 	.word	0x3fc68a28
 8006740:	509f79fb 	.word	0x509f79fb
 8006744:	3fd34413 	.word	0x3fd34413
 8006748:	080080f1 	.word	0x080080f1
 800674c:	08008108 	.word	0x08008108
 8006750:	7ff00000 	.word	0x7ff00000
 8006754:	080080ed 	.word	0x080080ed
 8006758:	080080e4 	.word	0x080080e4
 800675c:	080080c1 	.word	0x080080c1
 8006760:	3ff80000 	.word	0x3ff80000
 8006764:	080081f8 	.word	0x080081f8
 8006768:	08008160 	.word	0x08008160
 800676c:	2301      	movs	r3, #1
 800676e:	9309      	str	r3, [sp, #36]	; 0x24
 8006770:	e7d7      	b.n	8006722 <_dtoa_r+0x2c2>
 8006772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006774:	9301      	str	r3, [sp, #4]
 8006776:	9304      	str	r3, [sp, #16]
 8006778:	e7ba      	b.n	80066f0 <_dtoa_r+0x290>
 800677a:	3101      	adds	r1, #1
 800677c:	0052      	lsls	r2, r2, #1
 800677e:	e7ba      	b.n	80066f6 <_dtoa_r+0x296>
 8006780:	69e3      	ldr	r3, [r4, #28]
 8006782:	9a00      	ldr	r2, [sp, #0]
 8006784:	601a      	str	r2, [r3, #0]
 8006786:	9b04      	ldr	r3, [sp, #16]
 8006788:	2b0e      	cmp	r3, #14
 800678a:	f200 80a8 	bhi.w	80068de <_dtoa_r+0x47e>
 800678e:	2d00      	cmp	r5, #0
 8006790:	f000 80a5 	beq.w	80068de <_dtoa_r+0x47e>
 8006794:	f1bb 0f00 	cmp.w	fp, #0
 8006798:	dd38      	ble.n	800680c <_dtoa_r+0x3ac>
 800679a:	4bc0      	ldr	r3, [pc, #768]	; (8006a9c <_dtoa_r+0x63c>)
 800679c:	f00b 020f 	and.w	r2, fp, #15
 80067a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067a4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80067a8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80067ac:	ea4f 182b 	mov.w	r8, fp, asr #4
 80067b0:	d019      	beq.n	80067e6 <_dtoa_r+0x386>
 80067b2:	4bbb      	ldr	r3, [pc, #748]	; (8006aa0 <_dtoa_r+0x640>)
 80067b4:	ec51 0b18 	vmov	r0, r1, d8
 80067b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80067bc:	f7fa f846 	bl	800084c <__aeabi_ddiv>
 80067c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067c4:	f008 080f 	and.w	r8, r8, #15
 80067c8:	2503      	movs	r5, #3
 80067ca:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006aa0 <_dtoa_r+0x640>
 80067ce:	f1b8 0f00 	cmp.w	r8, #0
 80067d2:	d10a      	bne.n	80067ea <_dtoa_r+0x38a>
 80067d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067d8:	4632      	mov	r2, r6
 80067da:	463b      	mov	r3, r7
 80067dc:	f7fa f836 	bl	800084c <__aeabi_ddiv>
 80067e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067e4:	e02b      	b.n	800683e <_dtoa_r+0x3de>
 80067e6:	2502      	movs	r5, #2
 80067e8:	e7ef      	b.n	80067ca <_dtoa_r+0x36a>
 80067ea:	f018 0f01 	tst.w	r8, #1
 80067ee:	d008      	beq.n	8006802 <_dtoa_r+0x3a2>
 80067f0:	4630      	mov	r0, r6
 80067f2:	4639      	mov	r1, r7
 80067f4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80067f8:	f7f9 fefe 	bl	80005f8 <__aeabi_dmul>
 80067fc:	3501      	adds	r5, #1
 80067fe:	4606      	mov	r6, r0
 8006800:	460f      	mov	r7, r1
 8006802:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006806:	f109 0908 	add.w	r9, r9, #8
 800680a:	e7e0      	b.n	80067ce <_dtoa_r+0x36e>
 800680c:	f000 809f 	beq.w	800694e <_dtoa_r+0x4ee>
 8006810:	f1cb 0600 	rsb	r6, fp, #0
 8006814:	4ba1      	ldr	r3, [pc, #644]	; (8006a9c <_dtoa_r+0x63c>)
 8006816:	4fa2      	ldr	r7, [pc, #648]	; (8006aa0 <_dtoa_r+0x640>)
 8006818:	f006 020f 	and.w	r2, r6, #15
 800681c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006824:	ec51 0b18 	vmov	r0, r1, d8
 8006828:	f7f9 fee6 	bl	80005f8 <__aeabi_dmul>
 800682c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006830:	1136      	asrs	r6, r6, #4
 8006832:	2300      	movs	r3, #0
 8006834:	2502      	movs	r5, #2
 8006836:	2e00      	cmp	r6, #0
 8006838:	d17e      	bne.n	8006938 <_dtoa_r+0x4d8>
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1d0      	bne.n	80067e0 <_dtoa_r+0x380>
 800683e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006840:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006844:	2b00      	cmp	r3, #0
 8006846:	f000 8084 	beq.w	8006952 <_dtoa_r+0x4f2>
 800684a:	4b96      	ldr	r3, [pc, #600]	; (8006aa4 <_dtoa_r+0x644>)
 800684c:	2200      	movs	r2, #0
 800684e:	4640      	mov	r0, r8
 8006850:	4649      	mov	r1, r9
 8006852:	f7fa f943 	bl	8000adc <__aeabi_dcmplt>
 8006856:	2800      	cmp	r0, #0
 8006858:	d07b      	beq.n	8006952 <_dtoa_r+0x4f2>
 800685a:	9b04      	ldr	r3, [sp, #16]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d078      	beq.n	8006952 <_dtoa_r+0x4f2>
 8006860:	9b01      	ldr	r3, [sp, #4]
 8006862:	2b00      	cmp	r3, #0
 8006864:	dd39      	ble.n	80068da <_dtoa_r+0x47a>
 8006866:	4b90      	ldr	r3, [pc, #576]	; (8006aa8 <_dtoa_r+0x648>)
 8006868:	2200      	movs	r2, #0
 800686a:	4640      	mov	r0, r8
 800686c:	4649      	mov	r1, r9
 800686e:	f7f9 fec3 	bl	80005f8 <__aeabi_dmul>
 8006872:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006876:	9e01      	ldr	r6, [sp, #4]
 8006878:	f10b 37ff 	add.w	r7, fp, #4294967295
 800687c:	3501      	adds	r5, #1
 800687e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006882:	4628      	mov	r0, r5
 8006884:	f7f9 fe4e 	bl	8000524 <__aeabi_i2d>
 8006888:	4642      	mov	r2, r8
 800688a:	464b      	mov	r3, r9
 800688c:	f7f9 feb4 	bl	80005f8 <__aeabi_dmul>
 8006890:	4b86      	ldr	r3, [pc, #536]	; (8006aac <_dtoa_r+0x64c>)
 8006892:	2200      	movs	r2, #0
 8006894:	f7f9 fcfa 	bl	800028c <__adddf3>
 8006898:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800689c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068a0:	9303      	str	r3, [sp, #12]
 80068a2:	2e00      	cmp	r6, #0
 80068a4:	d158      	bne.n	8006958 <_dtoa_r+0x4f8>
 80068a6:	4b82      	ldr	r3, [pc, #520]	; (8006ab0 <_dtoa_r+0x650>)
 80068a8:	2200      	movs	r2, #0
 80068aa:	4640      	mov	r0, r8
 80068ac:	4649      	mov	r1, r9
 80068ae:	f7f9 fceb 	bl	8000288 <__aeabi_dsub>
 80068b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068b6:	4680      	mov	r8, r0
 80068b8:	4689      	mov	r9, r1
 80068ba:	f7fa f92d 	bl	8000b18 <__aeabi_dcmpgt>
 80068be:	2800      	cmp	r0, #0
 80068c0:	f040 8296 	bne.w	8006df0 <_dtoa_r+0x990>
 80068c4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80068c8:	4640      	mov	r0, r8
 80068ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80068ce:	4649      	mov	r1, r9
 80068d0:	f7fa f904 	bl	8000adc <__aeabi_dcmplt>
 80068d4:	2800      	cmp	r0, #0
 80068d6:	f040 8289 	bne.w	8006dec <_dtoa_r+0x98c>
 80068da:	ed8d 8b02 	vstr	d8, [sp, #8]
 80068de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f2c0 814e 	blt.w	8006b82 <_dtoa_r+0x722>
 80068e6:	f1bb 0f0e 	cmp.w	fp, #14
 80068ea:	f300 814a 	bgt.w	8006b82 <_dtoa_r+0x722>
 80068ee:	4b6b      	ldr	r3, [pc, #428]	; (8006a9c <_dtoa_r+0x63c>)
 80068f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80068f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80068f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f280 80dc 	bge.w	8006ab8 <_dtoa_r+0x658>
 8006900:	9b04      	ldr	r3, [sp, #16]
 8006902:	2b00      	cmp	r3, #0
 8006904:	f300 80d8 	bgt.w	8006ab8 <_dtoa_r+0x658>
 8006908:	f040 826f 	bne.w	8006dea <_dtoa_r+0x98a>
 800690c:	4b68      	ldr	r3, [pc, #416]	; (8006ab0 <_dtoa_r+0x650>)
 800690e:	2200      	movs	r2, #0
 8006910:	4640      	mov	r0, r8
 8006912:	4649      	mov	r1, r9
 8006914:	f7f9 fe70 	bl	80005f8 <__aeabi_dmul>
 8006918:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800691c:	f7fa f8f2 	bl	8000b04 <__aeabi_dcmpge>
 8006920:	9e04      	ldr	r6, [sp, #16]
 8006922:	4637      	mov	r7, r6
 8006924:	2800      	cmp	r0, #0
 8006926:	f040 8245 	bne.w	8006db4 <_dtoa_r+0x954>
 800692a:	9d00      	ldr	r5, [sp, #0]
 800692c:	2331      	movs	r3, #49	; 0x31
 800692e:	f805 3b01 	strb.w	r3, [r5], #1
 8006932:	f10b 0b01 	add.w	fp, fp, #1
 8006936:	e241      	b.n	8006dbc <_dtoa_r+0x95c>
 8006938:	07f2      	lsls	r2, r6, #31
 800693a:	d505      	bpl.n	8006948 <_dtoa_r+0x4e8>
 800693c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006940:	f7f9 fe5a 	bl	80005f8 <__aeabi_dmul>
 8006944:	3501      	adds	r5, #1
 8006946:	2301      	movs	r3, #1
 8006948:	1076      	asrs	r6, r6, #1
 800694a:	3708      	adds	r7, #8
 800694c:	e773      	b.n	8006836 <_dtoa_r+0x3d6>
 800694e:	2502      	movs	r5, #2
 8006950:	e775      	b.n	800683e <_dtoa_r+0x3de>
 8006952:	9e04      	ldr	r6, [sp, #16]
 8006954:	465f      	mov	r7, fp
 8006956:	e792      	b.n	800687e <_dtoa_r+0x41e>
 8006958:	9900      	ldr	r1, [sp, #0]
 800695a:	4b50      	ldr	r3, [pc, #320]	; (8006a9c <_dtoa_r+0x63c>)
 800695c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006960:	4431      	add	r1, r6
 8006962:	9102      	str	r1, [sp, #8]
 8006964:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006966:	eeb0 9a47 	vmov.f32	s18, s14
 800696a:	eef0 9a67 	vmov.f32	s19, s15
 800696e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006972:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006976:	2900      	cmp	r1, #0
 8006978:	d044      	beq.n	8006a04 <_dtoa_r+0x5a4>
 800697a:	494e      	ldr	r1, [pc, #312]	; (8006ab4 <_dtoa_r+0x654>)
 800697c:	2000      	movs	r0, #0
 800697e:	f7f9 ff65 	bl	800084c <__aeabi_ddiv>
 8006982:	ec53 2b19 	vmov	r2, r3, d9
 8006986:	f7f9 fc7f 	bl	8000288 <__aeabi_dsub>
 800698a:	9d00      	ldr	r5, [sp, #0]
 800698c:	ec41 0b19 	vmov	d9, r0, r1
 8006990:	4649      	mov	r1, r9
 8006992:	4640      	mov	r0, r8
 8006994:	f7fa f8e0 	bl	8000b58 <__aeabi_d2iz>
 8006998:	4606      	mov	r6, r0
 800699a:	f7f9 fdc3 	bl	8000524 <__aeabi_i2d>
 800699e:	4602      	mov	r2, r0
 80069a0:	460b      	mov	r3, r1
 80069a2:	4640      	mov	r0, r8
 80069a4:	4649      	mov	r1, r9
 80069a6:	f7f9 fc6f 	bl	8000288 <__aeabi_dsub>
 80069aa:	3630      	adds	r6, #48	; 0x30
 80069ac:	f805 6b01 	strb.w	r6, [r5], #1
 80069b0:	ec53 2b19 	vmov	r2, r3, d9
 80069b4:	4680      	mov	r8, r0
 80069b6:	4689      	mov	r9, r1
 80069b8:	f7fa f890 	bl	8000adc <__aeabi_dcmplt>
 80069bc:	2800      	cmp	r0, #0
 80069be:	d164      	bne.n	8006a8a <_dtoa_r+0x62a>
 80069c0:	4642      	mov	r2, r8
 80069c2:	464b      	mov	r3, r9
 80069c4:	4937      	ldr	r1, [pc, #220]	; (8006aa4 <_dtoa_r+0x644>)
 80069c6:	2000      	movs	r0, #0
 80069c8:	f7f9 fc5e 	bl	8000288 <__aeabi_dsub>
 80069cc:	ec53 2b19 	vmov	r2, r3, d9
 80069d0:	f7fa f884 	bl	8000adc <__aeabi_dcmplt>
 80069d4:	2800      	cmp	r0, #0
 80069d6:	f040 80b6 	bne.w	8006b46 <_dtoa_r+0x6e6>
 80069da:	9b02      	ldr	r3, [sp, #8]
 80069dc:	429d      	cmp	r5, r3
 80069de:	f43f af7c 	beq.w	80068da <_dtoa_r+0x47a>
 80069e2:	4b31      	ldr	r3, [pc, #196]	; (8006aa8 <_dtoa_r+0x648>)
 80069e4:	ec51 0b19 	vmov	r0, r1, d9
 80069e8:	2200      	movs	r2, #0
 80069ea:	f7f9 fe05 	bl	80005f8 <__aeabi_dmul>
 80069ee:	4b2e      	ldr	r3, [pc, #184]	; (8006aa8 <_dtoa_r+0x648>)
 80069f0:	ec41 0b19 	vmov	d9, r0, r1
 80069f4:	2200      	movs	r2, #0
 80069f6:	4640      	mov	r0, r8
 80069f8:	4649      	mov	r1, r9
 80069fa:	f7f9 fdfd 	bl	80005f8 <__aeabi_dmul>
 80069fe:	4680      	mov	r8, r0
 8006a00:	4689      	mov	r9, r1
 8006a02:	e7c5      	b.n	8006990 <_dtoa_r+0x530>
 8006a04:	ec51 0b17 	vmov	r0, r1, d7
 8006a08:	f7f9 fdf6 	bl	80005f8 <__aeabi_dmul>
 8006a0c:	9b02      	ldr	r3, [sp, #8]
 8006a0e:	9d00      	ldr	r5, [sp, #0]
 8006a10:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a12:	ec41 0b19 	vmov	d9, r0, r1
 8006a16:	4649      	mov	r1, r9
 8006a18:	4640      	mov	r0, r8
 8006a1a:	f7fa f89d 	bl	8000b58 <__aeabi_d2iz>
 8006a1e:	4606      	mov	r6, r0
 8006a20:	f7f9 fd80 	bl	8000524 <__aeabi_i2d>
 8006a24:	3630      	adds	r6, #48	; 0x30
 8006a26:	4602      	mov	r2, r0
 8006a28:	460b      	mov	r3, r1
 8006a2a:	4640      	mov	r0, r8
 8006a2c:	4649      	mov	r1, r9
 8006a2e:	f7f9 fc2b 	bl	8000288 <__aeabi_dsub>
 8006a32:	f805 6b01 	strb.w	r6, [r5], #1
 8006a36:	9b02      	ldr	r3, [sp, #8]
 8006a38:	429d      	cmp	r5, r3
 8006a3a:	4680      	mov	r8, r0
 8006a3c:	4689      	mov	r9, r1
 8006a3e:	f04f 0200 	mov.w	r2, #0
 8006a42:	d124      	bne.n	8006a8e <_dtoa_r+0x62e>
 8006a44:	4b1b      	ldr	r3, [pc, #108]	; (8006ab4 <_dtoa_r+0x654>)
 8006a46:	ec51 0b19 	vmov	r0, r1, d9
 8006a4a:	f7f9 fc1f 	bl	800028c <__adddf3>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	460b      	mov	r3, r1
 8006a52:	4640      	mov	r0, r8
 8006a54:	4649      	mov	r1, r9
 8006a56:	f7fa f85f 	bl	8000b18 <__aeabi_dcmpgt>
 8006a5a:	2800      	cmp	r0, #0
 8006a5c:	d173      	bne.n	8006b46 <_dtoa_r+0x6e6>
 8006a5e:	ec53 2b19 	vmov	r2, r3, d9
 8006a62:	4914      	ldr	r1, [pc, #80]	; (8006ab4 <_dtoa_r+0x654>)
 8006a64:	2000      	movs	r0, #0
 8006a66:	f7f9 fc0f 	bl	8000288 <__aeabi_dsub>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	4640      	mov	r0, r8
 8006a70:	4649      	mov	r1, r9
 8006a72:	f7fa f833 	bl	8000adc <__aeabi_dcmplt>
 8006a76:	2800      	cmp	r0, #0
 8006a78:	f43f af2f 	beq.w	80068da <_dtoa_r+0x47a>
 8006a7c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006a7e:	1e6b      	subs	r3, r5, #1
 8006a80:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a86:	2b30      	cmp	r3, #48	; 0x30
 8006a88:	d0f8      	beq.n	8006a7c <_dtoa_r+0x61c>
 8006a8a:	46bb      	mov	fp, r7
 8006a8c:	e04a      	b.n	8006b24 <_dtoa_r+0x6c4>
 8006a8e:	4b06      	ldr	r3, [pc, #24]	; (8006aa8 <_dtoa_r+0x648>)
 8006a90:	f7f9 fdb2 	bl	80005f8 <__aeabi_dmul>
 8006a94:	4680      	mov	r8, r0
 8006a96:	4689      	mov	r9, r1
 8006a98:	e7bd      	b.n	8006a16 <_dtoa_r+0x5b6>
 8006a9a:	bf00      	nop
 8006a9c:	080081f8 	.word	0x080081f8
 8006aa0:	080081d0 	.word	0x080081d0
 8006aa4:	3ff00000 	.word	0x3ff00000
 8006aa8:	40240000 	.word	0x40240000
 8006aac:	401c0000 	.word	0x401c0000
 8006ab0:	40140000 	.word	0x40140000
 8006ab4:	3fe00000 	.word	0x3fe00000
 8006ab8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006abc:	9d00      	ldr	r5, [sp, #0]
 8006abe:	4642      	mov	r2, r8
 8006ac0:	464b      	mov	r3, r9
 8006ac2:	4630      	mov	r0, r6
 8006ac4:	4639      	mov	r1, r7
 8006ac6:	f7f9 fec1 	bl	800084c <__aeabi_ddiv>
 8006aca:	f7fa f845 	bl	8000b58 <__aeabi_d2iz>
 8006ace:	9001      	str	r0, [sp, #4]
 8006ad0:	f7f9 fd28 	bl	8000524 <__aeabi_i2d>
 8006ad4:	4642      	mov	r2, r8
 8006ad6:	464b      	mov	r3, r9
 8006ad8:	f7f9 fd8e 	bl	80005f8 <__aeabi_dmul>
 8006adc:	4602      	mov	r2, r0
 8006ade:	460b      	mov	r3, r1
 8006ae0:	4630      	mov	r0, r6
 8006ae2:	4639      	mov	r1, r7
 8006ae4:	f7f9 fbd0 	bl	8000288 <__aeabi_dsub>
 8006ae8:	9e01      	ldr	r6, [sp, #4]
 8006aea:	9f04      	ldr	r7, [sp, #16]
 8006aec:	3630      	adds	r6, #48	; 0x30
 8006aee:	f805 6b01 	strb.w	r6, [r5], #1
 8006af2:	9e00      	ldr	r6, [sp, #0]
 8006af4:	1bae      	subs	r6, r5, r6
 8006af6:	42b7      	cmp	r7, r6
 8006af8:	4602      	mov	r2, r0
 8006afa:	460b      	mov	r3, r1
 8006afc:	d134      	bne.n	8006b68 <_dtoa_r+0x708>
 8006afe:	f7f9 fbc5 	bl	800028c <__adddf3>
 8006b02:	4642      	mov	r2, r8
 8006b04:	464b      	mov	r3, r9
 8006b06:	4606      	mov	r6, r0
 8006b08:	460f      	mov	r7, r1
 8006b0a:	f7fa f805 	bl	8000b18 <__aeabi_dcmpgt>
 8006b0e:	b9c8      	cbnz	r0, 8006b44 <_dtoa_r+0x6e4>
 8006b10:	4642      	mov	r2, r8
 8006b12:	464b      	mov	r3, r9
 8006b14:	4630      	mov	r0, r6
 8006b16:	4639      	mov	r1, r7
 8006b18:	f7f9 ffd6 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b1c:	b110      	cbz	r0, 8006b24 <_dtoa_r+0x6c4>
 8006b1e:	9b01      	ldr	r3, [sp, #4]
 8006b20:	07db      	lsls	r3, r3, #31
 8006b22:	d40f      	bmi.n	8006b44 <_dtoa_r+0x6e4>
 8006b24:	4651      	mov	r1, sl
 8006b26:	4620      	mov	r0, r4
 8006b28:	f000 fbcc 	bl	80072c4 <_Bfree>
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006b30:	702b      	strb	r3, [r5, #0]
 8006b32:	f10b 0301 	add.w	r3, fp, #1
 8006b36:	6013      	str	r3, [r2, #0]
 8006b38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f43f ace2 	beq.w	8006504 <_dtoa_r+0xa4>
 8006b40:	601d      	str	r5, [r3, #0]
 8006b42:	e4df      	b.n	8006504 <_dtoa_r+0xa4>
 8006b44:	465f      	mov	r7, fp
 8006b46:	462b      	mov	r3, r5
 8006b48:	461d      	mov	r5, r3
 8006b4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b4e:	2a39      	cmp	r2, #57	; 0x39
 8006b50:	d106      	bne.n	8006b60 <_dtoa_r+0x700>
 8006b52:	9a00      	ldr	r2, [sp, #0]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d1f7      	bne.n	8006b48 <_dtoa_r+0x6e8>
 8006b58:	9900      	ldr	r1, [sp, #0]
 8006b5a:	2230      	movs	r2, #48	; 0x30
 8006b5c:	3701      	adds	r7, #1
 8006b5e:	700a      	strb	r2, [r1, #0]
 8006b60:	781a      	ldrb	r2, [r3, #0]
 8006b62:	3201      	adds	r2, #1
 8006b64:	701a      	strb	r2, [r3, #0]
 8006b66:	e790      	b.n	8006a8a <_dtoa_r+0x62a>
 8006b68:	4ba3      	ldr	r3, [pc, #652]	; (8006df8 <_dtoa_r+0x998>)
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f7f9 fd44 	bl	80005f8 <__aeabi_dmul>
 8006b70:	2200      	movs	r2, #0
 8006b72:	2300      	movs	r3, #0
 8006b74:	4606      	mov	r6, r0
 8006b76:	460f      	mov	r7, r1
 8006b78:	f7f9 ffa6 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	d09e      	beq.n	8006abe <_dtoa_r+0x65e>
 8006b80:	e7d0      	b.n	8006b24 <_dtoa_r+0x6c4>
 8006b82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b84:	2a00      	cmp	r2, #0
 8006b86:	f000 80ca 	beq.w	8006d1e <_dtoa_r+0x8be>
 8006b8a:	9a07      	ldr	r2, [sp, #28]
 8006b8c:	2a01      	cmp	r2, #1
 8006b8e:	f300 80ad 	bgt.w	8006cec <_dtoa_r+0x88c>
 8006b92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b94:	2a00      	cmp	r2, #0
 8006b96:	f000 80a5 	beq.w	8006ce4 <_dtoa_r+0x884>
 8006b9a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006b9e:	9e08      	ldr	r6, [sp, #32]
 8006ba0:	9d05      	ldr	r5, [sp, #20]
 8006ba2:	9a05      	ldr	r2, [sp, #20]
 8006ba4:	441a      	add	r2, r3
 8006ba6:	9205      	str	r2, [sp, #20]
 8006ba8:	9a06      	ldr	r2, [sp, #24]
 8006baa:	2101      	movs	r1, #1
 8006bac:	441a      	add	r2, r3
 8006bae:	4620      	mov	r0, r4
 8006bb0:	9206      	str	r2, [sp, #24]
 8006bb2:	f000 fc3d 	bl	8007430 <__i2b>
 8006bb6:	4607      	mov	r7, r0
 8006bb8:	b165      	cbz	r5, 8006bd4 <_dtoa_r+0x774>
 8006bba:	9b06      	ldr	r3, [sp, #24]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	dd09      	ble.n	8006bd4 <_dtoa_r+0x774>
 8006bc0:	42ab      	cmp	r3, r5
 8006bc2:	9a05      	ldr	r2, [sp, #20]
 8006bc4:	bfa8      	it	ge
 8006bc6:	462b      	movge	r3, r5
 8006bc8:	1ad2      	subs	r2, r2, r3
 8006bca:	9205      	str	r2, [sp, #20]
 8006bcc:	9a06      	ldr	r2, [sp, #24]
 8006bce:	1aed      	subs	r5, r5, r3
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	9306      	str	r3, [sp, #24]
 8006bd4:	9b08      	ldr	r3, [sp, #32]
 8006bd6:	b1f3      	cbz	r3, 8006c16 <_dtoa_r+0x7b6>
 8006bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f000 80a3 	beq.w	8006d26 <_dtoa_r+0x8c6>
 8006be0:	2e00      	cmp	r6, #0
 8006be2:	dd10      	ble.n	8006c06 <_dtoa_r+0x7a6>
 8006be4:	4639      	mov	r1, r7
 8006be6:	4632      	mov	r2, r6
 8006be8:	4620      	mov	r0, r4
 8006bea:	f000 fce1 	bl	80075b0 <__pow5mult>
 8006bee:	4652      	mov	r2, sl
 8006bf0:	4601      	mov	r1, r0
 8006bf2:	4607      	mov	r7, r0
 8006bf4:	4620      	mov	r0, r4
 8006bf6:	f000 fc31 	bl	800745c <__multiply>
 8006bfa:	4651      	mov	r1, sl
 8006bfc:	4680      	mov	r8, r0
 8006bfe:	4620      	mov	r0, r4
 8006c00:	f000 fb60 	bl	80072c4 <_Bfree>
 8006c04:	46c2      	mov	sl, r8
 8006c06:	9b08      	ldr	r3, [sp, #32]
 8006c08:	1b9a      	subs	r2, r3, r6
 8006c0a:	d004      	beq.n	8006c16 <_dtoa_r+0x7b6>
 8006c0c:	4651      	mov	r1, sl
 8006c0e:	4620      	mov	r0, r4
 8006c10:	f000 fcce 	bl	80075b0 <__pow5mult>
 8006c14:	4682      	mov	sl, r0
 8006c16:	2101      	movs	r1, #1
 8006c18:	4620      	mov	r0, r4
 8006c1a:	f000 fc09 	bl	8007430 <__i2b>
 8006c1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	4606      	mov	r6, r0
 8006c24:	f340 8081 	ble.w	8006d2a <_dtoa_r+0x8ca>
 8006c28:	461a      	mov	r2, r3
 8006c2a:	4601      	mov	r1, r0
 8006c2c:	4620      	mov	r0, r4
 8006c2e:	f000 fcbf 	bl	80075b0 <__pow5mult>
 8006c32:	9b07      	ldr	r3, [sp, #28]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	4606      	mov	r6, r0
 8006c38:	dd7a      	ble.n	8006d30 <_dtoa_r+0x8d0>
 8006c3a:	f04f 0800 	mov.w	r8, #0
 8006c3e:	6933      	ldr	r3, [r6, #16]
 8006c40:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006c44:	6918      	ldr	r0, [r3, #16]
 8006c46:	f000 fba5 	bl	8007394 <__hi0bits>
 8006c4a:	f1c0 0020 	rsb	r0, r0, #32
 8006c4e:	9b06      	ldr	r3, [sp, #24]
 8006c50:	4418      	add	r0, r3
 8006c52:	f010 001f 	ands.w	r0, r0, #31
 8006c56:	f000 8094 	beq.w	8006d82 <_dtoa_r+0x922>
 8006c5a:	f1c0 0320 	rsb	r3, r0, #32
 8006c5e:	2b04      	cmp	r3, #4
 8006c60:	f340 8085 	ble.w	8006d6e <_dtoa_r+0x90e>
 8006c64:	9b05      	ldr	r3, [sp, #20]
 8006c66:	f1c0 001c 	rsb	r0, r0, #28
 8006c6a:	4403      	add	r3, r0
 8006c6c:	9305      	str	r3, [sp, #20]
 8006c6e:	9b06      	ldr	r3, [sp, #24]
 8006c70:	4403      	add	r3, r0
 8006c72:	4405      	add	r5, r0
 8006c74:	9306      	str	r3, [sp, #24]
 8006c76:	9b05      	ldr	r3, [sp, #20]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	dd05      	ble.n	8006c88 <_dtoa_r+0x828>
 8006c7c:	4651      	mov	r1, sl
 8006c7e:	461a      	mov	r2, r3
 8006c80:	4620      	mov	r0, r4
 8006c82:	f000 fcef 	bl	8007664 <__lshift>
 8006c86:	4682      	mov	sl, r0
 8006c88:	9b06      	ldr	r3, [sp, #24]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	dd05      	ble.n	8006c9a <_dtoa_r+0x83a>
 8006c8e:	4631      	mov	r1, r6
 8006c90:	461a      	mov	r2, r3
 8006c92:	4620      	mov	r0, r4
 8006c94:	f000 fce6 	bl	8007664 <__lshift>
 8006c98:	4606      	mov	r6, r0
 8006c9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d072      	beq.n	8006d86 <_dtoa_r+0x926>
 8006ca0:	4631      	mov	r1, r6
 8006ca2:	4650      	mov	r0, sl
 8006ca4:	f000 fd4a 	bl	800773c <__mcmp>
 8006ca8:	2800      	cmp	r0, #0
 8006caa:	da6c      	bge.n	8006d86 <_dtoa_r+0x926>
 8006cac:	2300      	movs	r3, #0
 8006cae:	4651      	mov	r1, sl
 8006cb0:	220a      	movs	r2, #10
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	f000 fb28 	bl	8007308 <__multadd>
 8006cb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cba:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006cbe:	4682      	mov	sl, r0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	f000 81b0 	beq.w	8007026 <_dtoa_r+0xbc6>
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	4639      	mov	r1, r7
 8006cca:	220a      	movs	r2, #10
 8006ccc:	4620      	mov	r0, r4
 8006cce:	f000 fb1b 	bl	8007308 <__multadd>
 8006cd2:	9b01      	ldr	r3, [sp, #4]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	4607      	mov	r7, r0
 8006cd8:	f300 8096 	bgt.w	8006e08 <_dtoa_r+0x9a8>
 8006cdc:	9b07      	ldr	r3, [sp, #28]
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	dc59      	bgt.n	8006d96 <_dtoa_r+0x936>
 8006ce2:	e091      	b.n	8006e08 <_dtoa_r+0x9a8>
 8006ce4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ce6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006cea:	e758      	b.n	8006b9e <_dtoa_r+0x73e>
 8006cec:	9b04      	ldr	r3, [sp, #16]
 8006cee:	1e5e      	subs	r6, r3, #1
 8006cf0:	9b08      	ldr	r3, [sp, #32]
 8006cf2:	42b3      	cmp	r3, r6
 8006cf4:	bfbf      	itttt	lt
 8006cf6:	9b08      	ldrlt	r3, [sp, #32]
 8006cf8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006cfa:	9608      	strlt	r6, [sp, #32]
 8006cfc:	1af3      	sublt	r3, r6, r3
 8006cfe:	bfb4      	ite	lt
 8006d00:	18d2      	addlt	r2, r2, r3
 8006d02:	1b9e      	subge	r6, r3, r6
 8006d04:	9b04      	ldr	r3, [sp, #16]
 8006d06:	bfbc      	itt	lt
 8006d08:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006d0a:	2600      	movlt	r6, #0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	bfb7      	itett	lt
 8006d10:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006d14:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006d18:	1a9d      	sublt	r5, r3, r2
 8006d1a:	2300      	movlt	r3, #0
 8006d1c:	e741      	b.n	8006ba2 <_dtoa_r+0x742>
 8006d1e:	9e08      	ldr	r6, [sp, #32]
 8006d20:	9d05      	ldr	r5, [sp, #20]
 8006d22:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006d24:	e748      	b.n	8006bb8 <_dtoa_r+0x758>
 8006d26:	9a08      	ldr	r2, [sp, #32]
 8006d28:	e770      	b.n	8006c0c <_dtoa_r+0x7ac>
 8006d2a:	9b07      	ldr	r3, [sp, #28]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	dc19      	bgt.n	8006d64 <_dtoa_r+0x904>
 8006d30:	9b02      	ldr	r3, [sp, #8]
 8006d32:	b9bb      	cbnz	r3, 8006d64 <_dtoa_r+0x904>
 8006d34:	9b03      	ldr	r3, [sp, #12]
 8006d36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d3a:	b99b      	cbnz	r3, 8006d64 <_dtoa_r+0x904>
 8006d3c:	9b03      	ldr	r3, [sp, #12]
 8006d3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d42:	0d1b      	lsrs	r3, r3, #20
 8006d44:	051b      	lsls	r3, r3, #20
 8006d46:	b183      	cbz	r3, 8006d6a <_dtoa_r+0x90a>
 8006d48:	9b05      	ldr	r3, [sp, #20]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	9305      	str	r3, [sp, #20]
 8006d4e:	9b06      	ldr	r3, [sp, #24]
 8006d50:	3301      	adds	r3, #1
 8006d52:	9306      	str	r3, [sp, #24]
 8006d54:	f04f 0801 	mov.w	r8, #1
 8006d58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f47f af6f 	bne.w	8006c3e <_dtoa_r+0x7de>
 8006d60:	2001      	movs	r0, #1
 8006d62:	e774      	b.n	8006c4e <_dtoa_r+0x7ee>
 8006d64:	f04f 0800 	mov.w	r8, #0
 8006d68:	e7f6      	b.n	8006d58 <_dtoa_r+0x8f8>
 8006d6a:	4698      	mov	r8, r3
 8006d6c:	e7f4      	b.n	8006d58 <_dtoa_r+0x8f8>
 8006d6e:	d082      	beq.n	8006c76 <_dtoa_r+0x816>
 8006d70:	9a05      	ldr	r2, [sp, #20]
 8006d72:	331c      	adds	r3, #28
 8006d74:	441a      	add	r2, r3
 8006d76:	9205      	str	r2, [sp, #20]
 8006d78:	9a06      	ldr	r2, [sp, #24]
 8006d7a:	441a      	add	r2, r3
 8006d7c:	441d      	add	r5, r3
 8006d7e:	9206      	str	r2, [sp, #24]
 8006d80:	e779      	b.n	8006c76 <_dtoa_r+0x816>
 8006d82:	4603      	mov	r3, r0
 8006d84:	e7f4      	b.n	8006d70 <_dtoa_r+0x910>
 8006d86:	9b04      	ldr	r3, [sp, #16]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	dc37      	bgt.n	8006dfc <_dtoa_r+0x99c>
 8006d8c:	9b07      	ldr	r3, [sp, #28]
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	dd34      	ble.n	8006dfc <_dtoa_r+0x99c>
 8006d92:	9b04      	ldr	r3, [sp, #16]
 8006d94:	9301      	str	r3, [sp, #4]
 8006d96:	9b01      	ldr	r3, [sp, #4]
 8006d98:	b963      	cbnz	r3, 8006db4 <_dtoa_r+0x954>
 8006d9a:	4631      	mov	r1, r6
 8006d9c:	2205      	movs	r2, #5
 8006d9e:	4620      	mov	r0, r4
 8006da0:	f000 fab2 	bl	8007308 <__multadd>
 8006da4:	4601      	mov	r1, r0
 8006da6:	4606      	mov	r6, r0
 8006da8:	4650      	mov	r0, sl
 8006daa:	f000 fcc7 	bl	800773c <__mcmp>
 8006dae:	2800      	cmp	r0, #0
 8006db0:	f73f adbb 	bgt.w	800692a <_dtoa_r+0x4ca>
 8006db4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006db6:	9d00      	ldr	r5, [sp, #0]
 8006db8:	ea6f 0b03 	mvn.w	fp, r3
 8006dbc:	f04f 0800 	mov.w	r8, #0
 8006dc0:	4631      	mov	r1, r6
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f000 fa7e 	bl	80072c4 <_Bfree>
 8006dc8:	2f00      	cmp	r7, #0
 8006dca:	f43f aeab 	beq.w	8006b24 <_dtoa_r+0x6c4>
 8006dce:	f1b8 0f00 	cmp.w	r8, #0
 8006dd2:	d005      	beq.n	8006de0 <_dtoa_r+0x980>
 8006dd4:	45b8      	cmp	r8, r7
 8006dd6:	d003      	beq.n	8006de0 <_dtoa_r+0x980>
 8006dd8:	4641      	mov	r1, r8
 8006dda:	4620      	mov	r0, r4
 8006ddc:	f000 fa72 	bl	80072c4 <_Bfree>
 8006de0:	4639      	mov	r1, r7
 8006de2:	4620      	mov	r0, r4
 8006de4:	f000 fa6e 	bl	80072c4 <_Bfree>
 8006de8:	e69c      	b.n	8006b24 <_dtoa_r+0x6c4>
 8006dea:	2600      	movs	r6, #0
 8006dec:	4637      	mov	r7, r6
 8006dee:	e7e1      	b.n	8006db4 <_dtoa_r+0x954>
 8006df0:	46bb      	mov	fp, r7
 8006df2:	4637      	mov	r7, r6
 8006df4:	e599      	b.n	800692a <_dtoa_r+0x4ca>
 8006df6:	bf00      	nop
 8006df8:	40240000 	.word	0x40240000
 8006dfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	f000 80c8 	beq.w	8006f94 <_dtoa_r+0xb34>
 8006e04:	9b04      	ldr	r3, [sp, #16]
 8006e06:	9301      	str	r3, [sp, #4]
 8006e08:	2d00      	cmp	r5, #0
 8006e0a:	dd05      	ble.n	8006e18 <_dtoa_r+0x9b8>
 8006e0c:	4639      	mov	r1, r7
 8006e0e:	462a      	mov	r2, r5
 8006e10:	4620      	mov	r0, r4
 8006e12:	f000 fc27 	bl	8007664 <__lshift>
 8006e16:	4607      	mov	r7, r0
 8006e18:	f1b8 0f00 	cmp.w	r8, #0
 8006e1c:	d05b      	beq.n	8006ed6 <_dtoa_r+0xa76>
 8006e1e:	6879      	ldr	r1, [r7, #4]
 8006e20:	4620      	mov	r0, r4
 8006e22:	f000 fa0f 	bl	8007244 <_Balloc>
 8006e26:	4605      	mov	r5, r0
 8006e28:	b928      	cbnz	r0, 8006e36 <_dtoa_r+0x9d6>
 8006e2a:	4b83      	ldr	r3, [pc, #524]	; (8007038 <_dtoa_r+0xbd8>)
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006e32:	f7ff bb2e 	b.w	8006492 <_dtoa_r+0x32>
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	3202      	adds	r2, #2
 8006e3a:	0092      	lsls	r2, r2, #2
 8006e3c:	f107 010c 	add.w	r1, r7, #12
 8006e40:	300c      	adds	r0, #12
 8006e42:	f001 f801 	bl	8007e48 <memcpy>
 8006e46:	2201      	movs	r2, #1
 8006e48:	4629      	mov	r1, r5
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	f000 fc0a 	bl	8007664 <__lshift>
 8006e50:	9b00      	ldr	r3, [sp, #0]
 8006e52:	3301      	adds	r3, #1
 8006e54:	9304      	str	r3, [sp, #16]
 8006e56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	9308      	str	r3, [sp, #32]
 8006e5e:	9b02      	ldr	r3, [sp, #8]
 8006e60:	f003 0301 	and.w	r3, r3, #1
 8006e64:	46b8      	mov	r8, r7
 8006e66:	9306      	str	r3, [sp, #24]
 8006e68:	4607      	mov	r7, r0
 8006e6a:	9b04      	ldr	r3, [sp, #16]
 8006e6c:	4631      	mov	r1, r6
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	4650      	mov	r0, sl
 8006e72:	9301      	str	r3, [sp, #4]
 8006e74:	f7ff fa69 	bl	800634a <quorem>
 8006e78:	4641      	mov	r1, r8
 8006e7a:	9002      	str	r0, [sp, #8]
 8006e7c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006e80:	4650      	mov	r0, sl
 8006e82:	f000 fc5b 	bl	800773c <__mcmp>
 8006e86:	463a      	mov	r2, r7
 8006e88:	9005      	str	r0, [sp, #20]
 8006e8a:	4631      	mov	r1, r6
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	f000 fc71 	bl	8007774 <__mdiff>
 8006e92:	68c2      	ldr	r2, [r0, #12]
 8006e94:	4605      	mov	r5, r0
 8006e96:	bb02      	cbnz	r2, 8006eda <_dtoa_r+0xa7a>
 8006e98:	4601      	mov	r1, r0
 8006e9a:	4650      	mov	r0, sl
 8006e9c:	f000 fc4e 	bl	800773c <__mcmp>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	4629      	mov	r1, r5
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	9209      	str	r2, [sp, #36]	; 0x24
 8006ea8:	f000 fa0c 	bl	80072c4 <_Bfree>
 8006eac:	9b07      	ldr	r3, [sp, #28]
 8006eae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006eb0:	9d04      	ldr	r5, [sp, #16]
 8006eb2:	ea43 0102 	orr.w	r1, r3, r2
 8006eb6:	9b06      	ldr	r3, [sp, #24]
 8006eb8:	4319      	orrs	r1, r3
 8006eba:	d110      	bne.n	8006ede <_dtoa_r+0xa7e>
 8006ebc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006ec0:	d029      	beq.n	8006f16 <_dtoa_r+0xab6>
 8006ec2:	9b05      	ldr	r3, [sp, #20]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	dd02      	ble.n	8006ece <_dtoa_r+0xa6e>
 8006ec8:	9b02      	ldr	r3, [sp, #8]
 8006eca:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006ece:	9b01      	ldr	r3, [sp, #4]
 8006ed0:	f883 9000 	strb.w	r9, [r3]
 8006ed4:	e774      	b.n	8006dc0 <_dtoa_r+0x960>
 8006ed6:	4638      	mov	r0, r7
 8006ed8:	e7ba      	b.n	8006e50 <_dtoa_r+0x9f0>
 8006eda:	2201      	movs	r2, #1
 8006edc:	e7e1      	b.n	8006ea2 <_dtoa_r+0xa42>
 8006ede:	9b05      	ldr	r3, [sp, #20]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	db04      	blt.n	8006eee <_dtoa_r+0xa8e>
 8006ee4:	9907      	ldr	r1, [sp, #28]
 8006ee6:	430b      	orrs	r3, r1
 8006ee8:	9906      	ldr	r1, [sp, #24]
 8006eea:	430b      	orrs	r3, r1
 8006eec:	d120      	bne.n	8006f30 <_dtoa_r+0xad0>
 8006eee:	2a00      	cmp	r2, #0
 8006ef0:	dded      	ble.n	8006ece <_dtoa_r+0xa6e>
 8006ef2:	4651      	mov	r1, sl
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	4620      	mov	r0, r4
 8006ef8:	f000 fbb4 	bl	8007664 <__lshift>
 8006efc:	4631      	mov	r1, r6
 8006efe:	4682      	mov	sl, r0
 8006f00:	f000 fc1c 	bl	800773c <__mcmp>
 8006f04:	2800      	cmp	r0, #0
 8006f06:	dc03      	bgt.n	8006f10 <_dtoa_r+0xab0>
 8006f08:	d1e1      	bne.n	8006ece <_dtoa_r+0xa6e>
 8006f0a:	f019 0f01 	tst.w	r9, #1
 8006f0e:	d0de      	beq.n	8006ece <_dtoa_r+0xa6e>
 8006f10:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006f14:	d1d8      	bne.n	8006ec8 <_dtoa_r+0xa68>
 8006f16:	9a01      	ldr	r2, [sp, #4]
 8006f18:	2339      	movs	r3, #57	; 0x39
 8006f1a:	7013      	strb	r3, [r2, #0]
 8006f1c:	462b      	mov	r3, r5
 8006f1e:	461d      	mov	r5, r3
 8006f20:	3b01      	subs	r3, #1
 8006f22:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006f26:	2a39      	cmp	r2, #57	; 0x39
 8006f28:	d06c      	beq.n	8007004 <_dtoa_r+0xba4>
 8006f2a:	3201      	adds	r2, #1
 8006f2c:	701a      	strb	r2, [r3, #0]
 8006f2e:	e747      	b.n	8006dc0 <_dtoa_r+0x960>
 8006f30:	2a00      	cmp	r2, #0
 8006f32:	dd07      	ble.n	8006f44 <_dtoa_r+0xae4>
 8006f34:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006f38:	d0ed      	beq.n	8006f16 <_dtoa_r+0xab6>
 8006f3a:	9a01      	ldr	r2, [sp, #4]
 8006f3c:	f109 0301 	add.w	r3, r9, #1
 8006f40:	7013      	strb	r3, [r2, #0]
 8006f42:	e73d      	b.n	8006dc0 <_dtoa_r+0x960>
 8006f44:	9b04      	ldr	r3, [sp, #16]
 8006f46:	9a08      	ldr	r2, [sp, #32]
 8006f48:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d043      	beq.n	8006fd8 <_dtoa_r+0xb78>
 8006f50:	4651      	mov	r1, sl
 8006f52:	2300      	movs	r3, #0
 8006f54:	220a      	movs	r2, #10
 8006f56:	4620      	mov	r0, r4
 8006f58:	f000 f9d6 	bl	8007308 <__multadd>
 8006f5c:	45b8      	cmp	r8, r7
 8006f5e:	4682      	mov	sl, r0
 8006f60:	f04f 0300 	mov.w	r3, #0
 8006f64:	f04f 020a 	mov.w	r2, #10
 8006f68:	4641      	mov	r1, r8
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	d107      	bne.n	8006f7e <_dtoa_r+0xb1e>
 8006f6e:	f000 f9cb 	bl	8007308 <__multadd>
 8006f72:	4680      	mov	r8, r0
 8006f74:	4607      	mov	r7, r0
 8006f76:	9b04      	ldr	r3, [sp, #16]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	9304      	str	r3, [sp, #16]
 8006f7c:	e775      	b.n	8006e6a <_dtoa_r+0xa0a>
 8006f7e:	f000 f9c3 	bl	8007308 <__multadd>
 8006f82:	4639      	mov	r1, r7
 8006f84:	4680      	mov	r8, r0
 8006f86:	2300      	movs	r3, #0
 8006f88:	220a      	movs	r2, #10
 8006f8a:	4620      	mov	r0, r4
 8006f8c:	f000 f9bc 	bl	8007308 <__multadd>
 8006f90:	4607      	mov	r7, r0
 8006f92:	e7f0      	b.n	8006f76 <_dtoa_r+0xb16>
 8006f94:	9b04      	ldr	r3, [sp, #16]
 8006f96:	9301      	str	r3, [sp, #4]
 8006f98:	9d00      	ldr	r5, [sp, #0]
 8006f9a:	4631      	mov	r1, r6
 8006f9c:	4650      	mov	r0, sl
 8006f9e:	f7ff f9d4 	bl	800634a <quorem>
 8006fa2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006fa6:	9b00      	ldr	r3, [sp, #0]
 8006fa8:	f805 9b01 	strb.w	r9, [r5], #1
 8006fac:	1aea      	subs	r2, r5, r3
 8006fae:	9b01      	ldr	r3, [sp, #4]
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	dd07      	ble.n	8006fc4 <_dtoa_r+0xb64>
 8006fb4:	4651      	mov	r1, sl
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	220a      	movs	r2, #10
 8006fba:	4620      	mov	r0, r4
 8006fbc:	f000 f9a4 	bl	8007308 <__multadd>
 8006fc0:	4682      	mov	sl, r0
 8006fc2:	e7ea      	b.n	8006f9a <_dtoa_r+0xb3a>
 8006fc4:	9b01      	ldr	r3, [sp, #4]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	bfc8      	it	gt
 8006fca:	461d      	movgt	r5, r3
 8006fcc:	9b00      	ldr	r3, [sp, #0]
 8006fce:	bfd8      	it	le
 8006fd0:	2501      	movle	r5, #1
 8006fd2:	441d      	add	r5, r3
 8006fd4:	f04f 0800 	mov.w	r8, #0
 8006fd8:	4651      	mov	r1, sl
 8006fda:	2201      	movs	r2, #1
 8006fdc:	4620      	mov	r0, r4
 8006fde:	f000 fb41 	bl	8007664 <__lshift>
 8006fe2:	4631      	mov	r1, r6
 8006fe4:	4682      	mov	sl, r0
 8006fe6:	f000 fba9 	bl	800773c <__mcmp>
 8006fea:	2800      	cmp	r0, #0
 8006fec:	dc96      	bgt.n	8006f1c <_dtoa_r+0xabc>
 8006fee:	d102      	bne.n	8006ff6 <_dtoa_r+0xb96>
 8006ff0:	f019 0f01 	tst.w	r9, #1
 8006ff4:	d192      	bne.n	8006f1c <_dtoa_r+0xabc>
 8006ff6:	462b      	mov	r3, r5
 8006ff8:	461d      	mov	r5, r3
 8006ffa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ffe:	2a30      	cmp	r2, #48	; 0x30
 8007000:	d0fa      	beq.n	8006ff8 <_dtoa_r+0xb98>
 8007002:	e6dd      	b.n	8006dc0 <_dtoa_r+0x960>
 8007004:	9a00      	ldr	r2, [sp, #0]
 8007006:	429a      	cmp	r2, r3
 8007008:	d189      	bne.n	8006f1e <_dtoa_r+0xabe>
 800700a:	f10b 0b01 	add.w	fp, fp, #1
 800700e:	2331      	movs	r3, #49	; 0x31
 8007010:	e796      	b.n	8006f40 <_dtoa_r+0xae0>
 8007012:	4b0a      	ldr	r3, [pc, #40]	; (800703c <_dtoa_r+0xbdc>)
 8007014:	f7ff ba99 	b.w	800654a <_dtoa_r+0xea>
 8007018:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800701a:	2b00      	cmp	r3, #0
 800701c:	f47f aa6d 	bne.w	80064fa <_dtoa_r+0x9a>
 8007020:	4b07      	ldr	r3, [pc, #28]	; (8007040 <_dtoa_r+0xbe0>)
 8007022:	f7ff ba92 	b.w	800654a <_dtoa_r+0xea>
 8007026:	9b01      	ldr	r3, [sp, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	dcb5      	bgt.n	8006f98 <_dtoa_r+0xb38>
 800702c:	9b07      	ldr	r3, [sp, #28]
 800702e:	2b02      	cmp	r3, #2
 8007030:	f73f aeb1 	bgt.w	8006d96 <_dtoa_r+0x936>
 8007034:	e7b0      	b.n	8006f98 <_dtoa_r+0xb38>
 8007036:	bf00      	nop
 8007038:	08008160 	.word	0x08008160
 800703c:	080080c0 	.word	0x080080c0
 8007040:	080080e4 	.word	0x080080e4

08007044 <_free_r>:
 8007044:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007046:	2900      	cmp	r1, #0
 8007048:	d044      	beq.n	80070d4 <_free_r+0x90>
 800704a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800704e:	9001      	str	r0, [sp, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	f1a1 0404 	sub.w	r4, r1, #4
 8007056:	bfb8      	it	lt
 8007058:	18e4      	addlt	r4, r4, r3
 800705a:	f000 f8e7 	bl	800722c <__malloc_lock>
 800705e:	4a1e      	ldr	r2, [pc, #120]	; (80070d8 <_free_r+0x94>)
 8007060:	9801      	ldr	r0, [sp, #4]
 8007062:	6813      	ldr	r3, [r2, #0]
 8007064:	b933      	cbnz	r3, 8007074 <_free_r+0x30>
 8007066:	6063      	str	r3, [r4, #4]
 8007068:	6014      	str	r4, [r2, #0]
 800706a:	b003      	add	sp, #12
 800706c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007070:	f000 b8e2 	b.w	8007238 <__malloc_unlock>
 8007074:	42a3      	cmp	r3, r4
 8007076:	d908      	bls.n	800708a <_free_r+0x46>
 8007078:	6825      	ldr	r5, [r4, #0]
 800707a:	1961      	adds	r1, r4, r5
 800707c:	428b      	cmp	r3, r1
 800707e:	bf01      	itttt	eq
 8007080:	6819      	ldreq	r1, [r3, #0]
 8007082:	685b      	ldreq	r3, [r3, #4]
 8007084:	1949      	addeq	r1, r1, r5
 8007086:	6021      	streq	r1, [r4, #0]
 8007088:	e7ed      	b.n	8007066 <_free_r+0x22>
 800708a:	461a      	mov	r2, r3
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	b10b      	cbz	r3, 8007094 <_free_r+0x50>
 8007090:	42a3      	cmp	r3, r4
 8007092:	d9fa      	bls.n	800708a <_free_r+0x46>
 8007094:	6811      	ldr	r1, [r2, #0]
 8007096:	1855      	adds	r5, r2, r1
 8007098:	42a5      	cmp	r5, r4
 800709a:	d10b      	bne.n	80070b4 <_free_r+0x70>
 800709c:	6824      	ldr	r4, [r4, #0]
 800709e:	4421      	add	r1, r4
 80070a0:	1854      	adds	r4, r2, r1
 80070a2:	42a3      	cmp	r3, r4
 80070a4:	6011      	str	r1, [r2, #0]
 80070a6:	d1e0      	bne.n	800706a <_free_r+0x26>
 80070a8:	681c      	ldr	r4, [r3, #0]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	6053      	str	r3, [r2, #4]
 80070ae:	440c      	add	r4, r1
 80070b0:	6014      	str	r4, [r2, #0]
 80070b2:	e7da      	b.n	800706a <_free_r+0x26>
 80070b4:	d902      	bls.n	80070bc <_free_r+0x78>
 80070b6:	230c      	movs	r3, #12
 80070b8:	6003      	str	r3, [r0, #0]
 80070ba:	e7d6      	b.n	800706a <_free_r+0x26>
 80070bc:	6825      	ldr	r5, [r4, #0]
 80070be:	1961      	adds	r1, r4, r5
 80070c0:	428b      	cmp	r3, r1
 80070c2:	bf04      	itt	eq
 80070c4:	6819      	ldreq	r1, [r3, #0]
 80070c6:	685b      	ldreq	r3, [r3, #4]
 80070c8:	6063      	str	r3, [r4, #4]
 80070ca:	bf04      	itt	eq
 80070cc:	1949      	addeq	r1, r1, r5
 80070ce:	6021      	streq	r1, [r4, #0]
 80070d0:	6054      	str	r4, [r2, #4]
 80070d2:	e7ca      	b.n	800706a <_free_r+0x26>
 80070d4:	b003      	add	sp, #12
 80070d6:	bd30      	pop	{r4, r5, pc}
 80070d8:	20000844 	.word	0x20000844

080070dc <malloc>:
 80070dc:	4b02      	ldr	r3, [pc, #8]	; (80070e8 <malloc+0xc>)
 80070de:	4601      	mov	r1, r0
 80070e0:	6818      	ldr	r0, [r3, #0]
 80070e2:	f000 b823 	b.w	800712c <_malloc_r>
 80070e6:	bf00      	nop
 80070e8:	20000064 	.word	0x20000064

080070ec <sbrk_aligned>:
 80070ec:	b570      	push	{r4, r5, r6, lr}
 80070ee:	4e0e      	ldr	r6, [pc, #56]	; (8007128 <sbrk_aligned+0x3c>)
 80070f0:	460c      	mov	r4, r1
 80070f2:	6831      	ldr	r1, [r6, #0]
 80070f4:	4605      	mov	r5, r0
 80070f6:	b911      	cbnz	r1, 80070fe <sbrk_aligned+0x12>
 80070f8:	f000 fe96 	bl	8007e28 <_sbrk_r>
 80070fc:	6030      	str	r0, [r6, #0]
 80070fe:	4621      	mov	r1, r4
 8007100:	4628      	mov	r0, r5
 8007102:	f000 fe91 	bl	8007e28 <_sbrk_r>
 8007106:	1c43      	adds	r3, r0, #1
 8007108:	d00a      	beq.n	8007120 <sbrk_aligned+0x34>
 800710a:	1cc4      	adds	r4, r0, #3
 800710c:	f024 0403 	bic.w	r4, r4, #3
 8007110:	42a0      	cmp	r0, r4
 8007112:	d007      	beq.n	8007124 <sbrk_aligned+0x38>
 8007114:	1a21      	subs	r1, r4, r0
 8007116:	4628      	mov	r0, r5
 8007118:	f000 fe86 	bl	8007e28 <_sbrk_r>
 800711c:	3001      	adds	r0, #1
 800711e:	d101      	bne.n	8007124 <sbrk_aligned+0x38>
 8007120:	f04f 34ff 	mov.w	r4, #4294967295
 8007124:	4620      	mov	r0, r4
 8007126:	bd70      	pop	{r4, r5, r6, pc}
 8007128:	20000848 	.word	0x20000848

0800712c <_malloc_r>:
 800712c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007130:	1ccd      	adds	r5, r1, #3
 8007132:	f025 0503 	bic.w	r5, r5, #3
 8007136:	3508      	adds	r5, #8
 8007138:	2d0c      	cmp	r5, #12
 800713a:	bf38      	it	cc
 800713c:	250c      	movcc	r5, #12
 800713e:	2d00      	cmp	r5, #0
 8007140:	4607      	mov	r7, r0
 8007142:	db01      	blt.n	8007148 <_malloc_r+0x1c>
 8007144:	42a9      	cmp	r1, r5
 8007146:	d905      	bls.n	8007154 <_malloc_r+0x28>
 8007148:	230c      	movs	r3, #12
 800714a:	603b      	str	r3, [r7, #0]
 800714c:	2600      	movs	r6, #0
 800714e:	4630      	mov	r0, r6
 8007150:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007154:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007228 <_malloc_r+0xfc>
 8007158:	f000 f868 	bl	800722c <__malloc_lock>
 800715c:	f8d8 3000 	ldr.w	r3, [r8]
 8007160:	461c      	mov	r4, r3
 8007162:	bb5c      	cbnz	r4, 80071bc <_malloc_r+0x90>
 8007164:	4629      	mov	r1, r5
 8007166:	4638      	mov	r0, r7
 8007168:	f7ff ffc0 	bl	80070ec <sbrk_aligned>
 800716c:	1c43      	adds	r3, r0, #1
 800716e:	4604      	mov	r4, r0
 8007170:	d155      	bne.n	800721e <_malloc_r+0xf2>
 8007172:	f8d8 4000 	ldr.w	r4, [r8]
 8007176:	4626      	mov	r6, r4
 8007178:	2e00      	cmp	r6, #0
 800717a:	d145      	bne.n	8007208 <_malloc_r+0xdc>
 800717c:	2c00      	cmp	r4, #0
 800717e:	d048      	beq.n	8007212 <_malloc_r+0xe6>
 8007180:	6823      	ldr	r3, [r4, #0]
 8007182:	4631      	mov	r1, r6
 8007184:	4638      	mov	r0, r7
 8007186:	eb04 0903 	add.w	r9, r4, r3
 800718a:	f000 fe4d 	bl	8007e28 <_sbrk_r>
 800718e:	4581      	cmp	r9, r0
 8007190:	d13f      	bne.n	8007212 <_malloc_r+0xe6>
 8007192:	6821      	ldr	r1, [r4, #0]
 8007194:	1a6d      	subs	r5, r5, r1
 8007196:	4629      	mov	r1, r5
 8007198:	4638      	mov	r0, r7
 800719a:	f7ff ffa7 	bl	80070ec <sbrk_aligned>
 800719e:	3001      	adds	r0, #1
 80071a0:	d037      	beq.n	8007212 <_malloc_r+0xe6>
 80071a2:	6823      	ldr	r3, [r4, #0]
 80071a4:	442b      	add	r3, r5
 80071a6:	6023      	str	r3, [r4, #0]
 80071a8:	f8d8 3000 	ldr.w	r3, [r8]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d038      	beq.n	8007222 <_malloc_r+0xf6>
 80071b0:	685a      	ldr	r2, [r3, #4]
 80071b2:	42a2      	cmp	r2, r4
 80071b4:	d12b      	bne.n	800720e <_malloc_r+0xe2>
 80071b6:	2200      	movs	r2, #0
 80071b8:	605a      	str	r2, [r3, #4]
 80071ba:	e00f      	b.n	80071dc <_malloc_r+0xb0>
 80071bc:	6822      	ldr	r2, [r4, #0]
 80071be:	1b52      	subs	r2, r2, r5
 80071c0:	d41f      	bmi.n	8007202 <_malloc_r+0xd6>
 80071c2:	2a0b      	cmp	r2, #11
 80071c4:	d917      	bls.n	80071f6 <_malloc_r+0xca>
 80071c6:	1961      	adds	r1, r4, r5
 80071c8:	42a3      	cmp	r3, r4
 80071ca:	6025      	str	r5, [r4, #0]
 80071cc:	bf18      	it	ne
 80071ce:	6059      	strne	r1, [r3, #4]
 80071d0:	6863      	ldr	r3, [r4, #4]
 80071d2:	bf08      	it	eq
 80071d4:	f8c8 1000 	streq.w	r1, [r8]
 80071d8:	5162      	str	r2, [r4, r5]
 80071da:	604b      	str	r3, [r1, #4]
 80071dc:	4638      	mov	r0, r7
 80071de:	f104 060b 	add.w	r6, r4, #11
 80071e2:	f000 f829 	bl	8007238 <__malloc_unlock>
 80071e6:	f026 0607 	bic.w	r6, r6, #7
 80071ea:	1d23      	adds	r3, r4, #4
 80071ec:	1af2      	subs	r2, r6, r3
 80071ee:	d0ae      	beq.n	800714e <_malloc_r+0x22>
 80071f0:	1b9b      	subs	r3, r3, r6
 80071f2:	50a3      	str	r3, [r4, r2]
 80071f4:	e7ab      	b.n	800714e <_malloc_r+0x22>
 80071f6:	42a3      	cmp	r3, r4
 80071f8:	6862      	ldr	r2, [r4, #4]
 80071fa:	d1dd      	bne.n	80071b8 <_malloc_r+0x8c>
 80071fc:	f8c8 2000 	str.w	r2, [r8]
 8007200:	e7ec      	b.n	80071dc <_malloc_r+0xb0>
 8007202:	4623      	mov	r3, r4
 8007204:	6864      	ldr	r4, [r4, #4]
 8007206:	e7ac      	b.n	8007162 <_malloc_r+0x36>
 8007208:	4634      	mov	r4, r6
 800720a:	6876      	ldr	r6, [r6, #4]
 800720c:	e7b4      	b.n	8007178 <_malloc_r+0x4c>
 800720e:	4613      	mov	r3, r2
 8007210:	e7cc      	b.n	80071ac <_malloc_r+0x80>
 8007212:	230c      	movs	r3, #12
 8007214:	603b      	str	r3, [r7, #0]
 8007216:	4638      	mov	r0, r7
 8007218:	f000 f80e 	bl	8007238 <__malloc_unlock>
 800721c:	e797      	b.n	800714e <_malloc_r+0x22>
 800721e:	6025      	str	r5, [r4, #0]
 8007220:	e7dc      	b.n	80071dc <_malloc_r+0xb0>
 8007222:	605b      	str	r3, [r3, #4]
 8007224:	deff      	udf	#255	; 0xff
 8007226:	bf00      	nop
 8007228:	20000844 	.word	0x20000844

0800722c <__malloc_lock>:
 800722c:	4801      	ldr	r0, [pc, #4]	; (8007234 <__malloc_lock+0x8>)
 800722e:	f7ff b88a 	b.w	8006346 <__retarget_lock_acquire_recursive>
 8007232:	bf00      	nop
 8007234:	20000840 	.word	0x20000840

08007238 <__malloc_unlock>:
 8007238:	4801      	ldr	r0, [pc, #4]	; (8007240 <__malloc_unlock+0x8>)
 800723a:	f7ff b885 	b.w	8006348 <__retarget_lock_release_recursive>
 800723e:	bf00      	nop
 8007240:	20000840 	.word	0x20000840

08007244 <_Balloc>:
 8007244:	b570      	push	{r4, r5, r6, lr}
 8007246:	69c6      	ldr	r6, [r0, #28]
 8007248:	4604      	mov	r4, r0
 800724a:	460d      	mov	r5, r1
 800724c:	b976      	cbnz	r6, 800726c <_Balloc+0x28>
 800724e:	2010      	movs	r0, #16
 8007250:	f7ff ff44 	bl	80070dc <malloc>
 8007254:	4602      	mov	r2, r0
 8007256:	61e0      	str	r0, [r4, #28]
 8007258:	b920      	cbnz	r0, 8007264 <_Balloc+0x20>
 800725a:	4b18      	ldr	r3, [pc, #96]	; (80072bc <_Balloc+0x78>)
 800725c:	4818      	ldr	r0, [pc, #96]	; (80072c0 <_Balloc+0x7c>)
 800725e:	216b      	movs	r1, #107	; 0x6b
 8007260:	f000 fe00 	bl	8007e64 <__assert_func>
 8007264:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007268:	6006      	str	r6, [r0, #0]
 800726a:	60c6      	str	r6, [r0, #12]
 800726c:	69e6      	ldr	r6, [r4, #28]
 800726e:	68f3      	ldr	r3, [r6, #12]
 8007270:	b183      	cbz	r3, 8007294 <_Balloc+0x50>
 8007272:	69e3      	ldr	r3, [r4, #28]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800727a:	b9b8      	cbnz	r0, 80072ac <_Balloc+0x68>
 800727c:	2101      	movs	r1, #1
 800727e:	fa01 f605 	lsl.w	r6, r1, r5
 8007282:	1d72      	adds	r2, r6, #5
 8007284:	0092      	lsls	r2, r2, #2
 8007286:	4620      	mov	r0, r4
 8007288:	f000 fe0a 	bl	8007ea0 <_calloc_r>
 800728c:	b160      	cbz	r0, 80072a8 <_Balloc+0x64>
 800728e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007292:	e00e      	b.n	80072b2 <_Balloc+0x6e>
 8007294:	2221      	movs	r2, #33	; 0x21
 8007296:	2104      	movs	r1, #4
 8007298:	4620      	mov	r0, r4
 800729a:	f000 fe01 	bl	8007ea0 <_calloc_r>
 800729e:	69e3      	ldr	r3, [r4, #28]
 80072a0:	60f0      	str	r0, [r6, #12]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d1e4      	bne.n	8007272 <_Balloc+0x2e>
 80072a8:	2000      	movs	r0, #0
 80072aa:	bd70      	pop	{r4, r5, r6, pc}
 80072ac:	6802      	ldr	r2, [r0, #0]
 80072ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80072b2:	2300      	movs	r3, #0
 80072b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80072b8:	e7f7      	b.n	80072aa <_Balloc+0x66>
 80072ba:	bf00      	nop
 80072bc:	080080f1 	.word	0x080080f1
 80072c0:	08008171 	.word	0x08008171

080072c4 <_Bfree>:
 80072c4:	b570      	push	{r4, r5, r6, lr}
 80072c6:	69c6      	ldr	r6, [r0, #28]
 80072c8:	4605      	mov	r5, r0
 80072ca:	460c      	mov	r4, r1
 80072cc:	b976      	cbnz	r6, 80072ec <_Bfree+0x28>
 80072ce:	2010      	movs	r0, #16
 80072d0:	f7ff ff04 	bl	80070dc <malloc>
 80072d4:	4602      	mov	r2, r0
 80072d6:	61e8      	str	r0, [r5, #28]
 80072d8:	b920      	cbnz	r0, 80072e4 <_Bfree+0x20>
 80072da:	4b09      	ldr	r3, [pc, #36]	; (8007300 <_Bfree+0x3c>)
 80072dc:	4809      	ldr	r0, [pc, #36]	; (8007304 <_Bfree+0x40>)
 80072de:	218f      	movs	r1, #143	; 0x8f
 80072e0:	f000 fdc0 	bl	8007e64 <__assert_func>
 80072e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072e8:	6006      	str	r6, [r0, #0]
 80072ea:	60c6      	str	r6, [r0, #12]
 80072ec:	b13c      	cbz	r4, 80072fe <_Bfree+0x3a>
 80072ee:	69eb      	ldr	r3, [r5, #28]
 80072f0:	6862      	ldr	r2, [r4, #4]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072f8:	6021      	str	r1, [r4, #0]
 80072fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80072fe:	bd70      	pop	{r4, r5, r6, pc}
 8007300:	080080f1 	.word	0x080080f1
 8007304:	08008171 	.word	0x08008171

08007308 <__multadd>:
 8007308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800730c:	690d      	ldr	r5, [r1, #16]
 800730e:	4607      	mov	r7, r0
 8007310:	460c      	mov	r4, r1
 8007312:	461e      	mov	r6, r3
 8007314:	f101 0c14 	add.w	ip, r1, #20
 8007318:	2000      	movs	r0, #0
 800731a:	f8dc 3000 	ldr.w	r3, [ip]
 800731e:	b299      	uxth	r1, r3
 8007320:	fb02 6101 	mla	r1, r2, r1, r6
 8007324:	0c1e      	lsrs	r6, r3, #16
 8007326:	0c0b      	lsrs	r3, r1, #16
 8007328:	fb02 3306 	mla	r3, r2, r6, r3
 800732c:	b289      	uxth	r1, r1
 800732e:	3001      	adds	r0, #1
 8007330:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007334:	4285      	cmp	r5, r0
 8007336:	f84c 1b04 	str.w	r1, [ip], #4
 800733a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800733e:	dcec      	bgt.n	800731a <__multadd+0x12>
 8007340:	b30e      	cbz	r6, 8007386 <__multadd+0x7e>
 8007342:	68a3      	ldr	r3, [r4, #8]
 8007344:	42ab      	cmp	r3, r5
 8007346:	dc19      	bgt.n	800737c <__multadd+0x74>
 8007348:	6861      	ldr	r1, [r4, #4]
 800734a:	4638      	mov	r0, r7
 800734c:	3101      	adds	r1, #1
 800734e:	f7ff ff79 	bl	8007244 <_Balloc>
 8007352:	4680      	mov	r8, r0
 8007354:	b928      	cbnz	r0, 8007362 <__multadd+0x5a>
 8007356:	4602      	mov	r2, r0
 8007358:	4b0c      	ldr	r3, [pc, #48]	; (800738c <__multadd+0x84>)
 800735a:	480d      	ldr	r0, [pc, #52]	; (8007390 <__multadd+0x88>)
 800735c:	21ba      	movs	r1, #186	; 0xba
 800735e:	f000 fd81 	bl	8007e64 <__assert_func>
 8007362:	6922      	ldr	r2, [r4, #16]
 8007364:	3202      	adds	r2, #2
 8007366:	f104 010c 	add.w	r1, r4, #12
 800736a:	0092      	lsls	r2, r2, #2
 800736c:	300c      	adds	r0, #12
 800736e:	f000 fd6b 	bl	8007e48 <memcpy>
 8007372:	4621      	mov	r1, r4
 8007374:	4638      	mov	r0, r7
 8007376:	f7ff ffa5 	bl	80072c4 <_Bfree>
 800737a:	4644      	mov	r4, r8
 800737c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007380:	3501      	adds	r5, #1
 8007382:	615e      	str	r6, [r3, #20]
 8007384:	6125      	str	r5, [r4, #16]
 8007386:	4620      	mov	r0, r4
 8007388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800738c:	08008160 	.word	0x08008160
 8007390:	08008171 	.word	0x08008171

08007394 <__hi0bits>:
 8007394:	0c03      	lsrs	r3, r0, #16
 8007396:	041b      	lsls	r3, r3, #16
 8007398:	b9d3      	cbnz	r3, 80073d0 <__hi0bits+0x3c>
 800739a:	0400      	lsls	r0, r0, #16
 800739c:	2310      	movs	r3, #16
 800739e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80073a2:	bf04      	itt	eq
 80073a4:	0200      	lsleq	r0, r0, #8
 80073a6:	3308      	addeq	r3, #8
 80073a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80073ac:	bf04      	itt	eq
 80073ae:	0100      	lsleq	r0, r0, #4
 80073b0:	3304      	addeq	r3, #4
 80073b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80073b6:	bf04      	itt	eq
 80073b8:	0080      	lsleq	r0, r0, #2
 80073ba:	3302      	addeq	r3, #2
 80073bc:	2800      	cmp	r0, #0
 80073be:	db05      	blt.n	80073cc <__hi0bits+0x38>
 80073c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80073c4:	f103 0301 	add.w	r3, r3, #1
 80073c8:	bf08      	it	eq
 80073ca:	2320      	moveq	r3, #32
 80073cc:	4618      	mov	r0, r3
 80073ce:	4770      	bx	lr
 80073d0:	2300      	movs	r3, #0
 80073d2:	e7e4      	b.n	800739e <__hi0bits+0xa>

080073d4 <__lo0bits>:
 80073d4:	6803      	ldr	r3, [r0, #0]
 80073d6:	f013 0207 	ands.w	r2, r3, #7
 80073da:	d00c      	beq.n	80073f6 <__lo0bits+0x22>
 80073dc:	07d9      	lsls	r1, r3, #31
 80073de:	d422      	bmi.n	8007426 <__lo0bits+0x52>
 80073e0:	079a      	lsls	r2, r3, #30
 80073e2:	bf49      	itett	mi
 80073e4:	085b      	lsrmi	r3, r3, #1
 80073e6:	089b      	lsrpl	r3, r3, #2
 80073e8:	6003      	strmi	r3, [r0, #0]
 80073ea:	2201      	movmi	r2, #1
 80073ec:	bf5c      	itt	pl
 80073ee:	6003      	strpl	r3, [r0, #0]
 80073f0:	2202      	movpl	r2, #2
 80073f2:	4610      	mov	r0, r2
 80073f4:	4770      	bx	lr
 80073f6:	b299      	uxth	r1, r3
 80073f8:	b909      	cbnz	r1, 80073fe <__lo0bits+0x2a>
 80073fa:	0c1b      	lsrs	r3, r3, #16
 80073fc:	2210      	movs	r2, #16
 80073fe:	b2d9      	uxtb	r1, r3
 8007400:	b909      	cbnz	r1, 8007406 <__lo0bits+0x32>
 8007402:	3208      	adds	r2, #8
 8007404:	0a1b      	lsrs	r3, r3, #8
 8007406:	0719      	lsls	r1, r3, #28
 8007408:	bf04      	itt	eq
 800740a:	091b      	lsreq	r3, r3, #4
 800740c:	3204      	addeq	r2, #4
 800740e:	0799      	lsls	r1, r3, #30
 8007410:	bf04      	itt	eq
 8007412:	089b      	lsreq	r3, r3, #2
 8007414:	3202      	addeq	r2, #2
 8007416:	07d9      	lsls	r1, r3, #31
 8007418:	d403      	bmi.n	8007422 <__lo0bits+0x4e>
 800741a:	085b      	lsrs	r3, r3, #1
 800741c:	f102 0201 	add.w	r2, r2, #1
 8007420:	d003      	beq.n	800742a <__lo0bits+0x56>
 8007422:	6003      	str	r3, [r0, #0]
 8007424:	e7e5      	b.n	80073f2 <__lo0bits+0x1e>
 8007426:	2200      	movs	r2, #0
 8007428:	e7e3      	b.n	80073f2 <__lo0bits+0x1e>
 800742a:	2220      	movs	r2, #32
 800742c:	e7e1      	b.n	80073f2 <__lo0bits+0x1e>
	...

08007430 <__i2b>:
 8007430:	b510      	push	{r4, lr}
 8007432:	460c      	mov	r4, r1
 8007434:	2101      	movs	r1, #1
 8007436:	f7ff ff05 	bl	8007244 <_Balloc>
 800743a:	4602      	mov	r2, r0
 800743c:	b928      	cbnz	r0, 800744a <__i2b+0x1a>
 800743e:	4b05      	ldr	r3, [pc, #20]	; (8007454 <__i2b+0x24>)
 8007440:	4805      	ldr	r0, [pc, #20]	; (8007458 <__i2b+0x28>)
 8007442:	f240 1145 	movw	r1, #325	; 0x145
 8007446:	f000 fd0d 	bl	8007e64 <__assert_func>
 800744a:	2301      	movs	r3, #1
 800744c:	6144      	str	r4, [r0, #20]
 800744e:	6103      	str	r3, [r0, #16]
 8007450:	bd10      	pop	{r4, pc}
 8007452:	bf00      	nop
 8007454:	08008160 	.word	0x08008160
 8007458:	08008171 	.word	0x08008171

0800745c <__multiply>:
 800745c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007460:	4691      	mov	r9, r2
 8007462:	690a      	ldr	r2, [r1, #16]
 8007464:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007468:	429a      	cmp	r2, r3
 800746a:	bfb8      	it	lt
 800746c:	460b      	movlt	r3, r1
 800746e:	460c      	mov	r4, r1
 8007470:	bfbc      	itt	lt
 8007472:	464c      	movlt	r4, r9
 8007474:	4699      	movlt	r9, r3
 8007476:	6927      	ldr	r7, [r4, #16]
 8007478:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800747c:	68a3      	ldr	r3, [r4, #8]
 800747e:	6861      	ldr	r1, [r4, #4]
 8007480:	eb07 060a 	add.w	r6, r7, sl
 8007484:	42b3      	cmp	r3, r6
 8007486:	b085      	sub	sp, #20
 8007488:	bfb8      	it	lt
 800748a:	3101      	addlt	r1, #1
 800748c:	f7ff feda 	bl	8007244 <_Balloc>
 8007490:	b930      	cbnz	r0, 80074a0 <__multiply+0x44>
 8007492:	4602      	mov	r2, r0
 8007494:	4b44      	ldr	r3, [pc, #272]	; (80075a8 <__multiply+0x14c>)
 8007496:	4845      	ldr	r0, [pc, #276]	; (80075ac <__multiply+0x150>)
 8007498:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800749c:	f000 fce2 	bl	8007e64 <__assert_func>
 80074a0:	f100 0514 	add.w	r5, r0, #20
 80074a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80074a8:	462b      	mov	r3, r5
 80074aa:	2200      	movs	r2, #0
 80074ac:	4543      	cmp	r3, r8
 80074ae:	d321      	bcc.n	80074f4 <__multiply+0x98>
 80074b0:	f104 0314 	add.w	r3, r4, #20
 80074b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80074b8:	f109 0314 	add.w	r3, r9, #20
 80074bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80074c0:	9202      	str	r2, [sp, #8]
 80074c2:	1b3a      	subs	r2, r7, r4
 80074c4:	3a15      	subs	r2, #21
 80074c6:	f022 0203 	bic.w	r2, r2, #3
 80074ca:	3204      	adds	r2, #4
 80074cc:	f104 0115 	add.w	r1, r4, #21
 80074d0:	428f      	cmp	r7, r1
 80074d2:	bf38      	it	cc
 80074d4:	2204      	movcc	r2, #4
 80074d6:	9201      	str	r2, [sp, #4]
 80074d8:	9a02      	ldr	r2, [sp, #8]
 80074da:	9303      	str	r3, [sp, #12]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d80c      	bhi.n	80074fa <__multiply+0x9e>
 80074e0:	2e00      	cmp	r6, #0
 80074e2:	dd03      	ble.n	80074ec <__multiply+0x90>
 80074e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d05b      	beq.n	80075a4 <__multiply+0x148>
 80074ec:	6106      	str	r6, [r0, #16]
 80074ee:	b005      	add	sp, #20
 80074f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074f4:	f843 2b04 	str.w	r2, [r3], #4
 80074f8:	e7d8      	b.n	80074ac <__multiply+0x50>
 80074fa:	f8b3 a000 	ldrh.w	sl, [r3]
 80074fe:	f1ba 0f00 	cmp.w	sl, #0
 8007502:	d024      	beq.n	800754e <__multiply+0xf2>
 8007504:	f104 0e14 	add.w	lr, r4, #20
 8007508:	46a9      	mov	r9, r5
 800750a:	f04f 0c00 	mov.w	ip, #0
 800750e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007512:	f8d9 1000 	ldr.w	r1, [r9]
 8007516:	fa1f fb82 	uxth.w	fp, r2
 800751a:	b289      	uxth	r1, r1
 800751c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007520:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007524:	f8d9 2000 	ldr.w	r2, [r9]
 8007528:	4461      	add	r1, ip
 800752a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800752e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007532:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007536:	b289      	uxth	r1, r1
 8007538:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800753c:	4577      	cmp	r7, lr
 800753e:	f849 1b04 	str.w	r1, [r9], #4
 8007542:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007546:	d8e2      	bhi.n	800750e <__multiply+0xb2>
 8007548:	9a01      	ldr	r2, [sp, #4]
 800754a:	f845 c002 	str.w	ip, [r5, r2]
 800754e:	9a03      	ldr	r2, [sp, #12]
 8007550:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007554:	3304      	adds	r3, #4
 8007556:	f1b9 0f00 	cmp.w	r9, #0
 800755a:	d021      	beq.n	80075a0 <__multiply+0x144>
 800755c:	6829      	ldr	r1, [r5, #0]
 800755e:	f104 0c14 	add.w	ip, r4, #20
 8007562:	46ae      	mov	lr, r5
 8007564:	f04f 0a00 	mov.w	sl, #0
 8007568:	f8bc b000 	ldrh.w	fp, [ip]
 800756c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007570:	fb09 220b 	mla	r2, r9, fp, r2
 8007574:	4452      	add	r2, sl
 8007576:	b289      	uxth	r1, r1
 8007578:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800757c:	f84e 1b04 	str.w	r1, [lr], #4
 8007580:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007584:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007588:	f8be 1000 	ldrh.w	r1, [lr]
 800758c:	fb09 110a 	mla	r1, r9, sl, r1
 8007590:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007594:	4567      	cmp	r7, ip
 8007596:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800759a:	d8e5      	bhi.n	8007568 <__multiply+0x10c>
 800759c:	9a01      	ldr	r2, [sp, #4]
 800759e:	50a9      	str	r1, [r5, r2]
 80075a0:	3504      	adds	r5, #4
 80075a2:	e799      	b.n	80074d8 <__multiply+0x7c>
 80075a4:	3e01      	subs	r6, #1
 80075a6:	e79b      	b.n	80074e0 <__multiply+0x84>
 80075a8:	08008160 	.word	0x08008160
 80075ac:	08008171 	.word	0x08008171

080075b0 <__pow5mult>:
 80075b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075b4:	4615      	mov	r5, r2
 80075b6:	f012 0203 	ands.w	r2, r2, #3
 80075ba:	4606      	mov	r6, r0
 80075bc:	460f      	mov	r7, r1
 80075be:	d007      	beq.n	80075d0 <__pow5mult+0x20>
 80075c0:	4c25      	ldr	r4, [pc, #148]	; (8007658 <__pow5mult+0xa8>)
 80075c2:	3a01      	subs	r2, #1
 80075c4:	2300      	movs	r3, #0
 80075c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80075ca:	f7ff fe9d 	bl	8007308 <__multadd>
 80075ce:	4607      	mov	r7, r0
 80075d0:	10ad      	asrs	r5, r5, #2
 80075d2:	d03d      	beq.n	8007650 <__pow5mult+0xa0>
 80075d4:	69f4      	ldr	r4, [r6, #28]
 80075d6:	b97c      	cbnz	r4, 80075f8 <__pow5mult+0x48>
 80075d8:	2010      	movs	r0, #16
 80075da:	f7ff fd7f 	bl	80070dc <malloc>
 80075de:	4602      	mov	r2, r0
 80075e0:	61f0      	str	r0, [r6, #28]
 80075e2:	b928      	cbnz	r0, 80075f0 <__pow5mult+0x40>
 80075e4:	4b1d      	ldr	r3, [pc, #116]	; (800765c <__pow5mult+0xac>)
 80075e6:	481e      	ldr	r0, [pc, #120]	; (8007660 <__pow5mult+0xb0>)
 80075e8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80075ec:	f000 fc3a 	bl	8007e64 <__assert_func>
 80075f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80075f4:	6004      	str	r4, [r0, #0]
 80075f6:	60c4      	str	r4, [r0, #12]
 80075f8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80075fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007600:	b94c      	cbnz	r4, 8007616 <__pow5mult+0x66>
 8007602:	f240 2171 	movw	r1, #625	; 0x271
 8007606:	4630      	mov	r0, r6
 8007608:	f7ff ff12 	bl	8007430 <__i2b>
 800760c:	2300      	movs	r3, #0
 800760e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007612:	4604      	mov	r4, r0
 8007614:	6003      	str	r3, [r0, #0]
 8007616:	f04f 0900 	mov.w	r9, #0
 800761a:	07eb      	lsls	r3, r5, #31
 800761c:	d50a      	bpl.n	8007634 <__pow5mult+0x84>
 800761e:	4639      	mov	r1, r7
 8007620:	4622      	mov	r2, r4
 8007622:	4630      	mov	r0, r6
 8007624:	f7ff ff1a 	bl	800745c <__multiply>
 8007628:	4639      	mov	r1, r7
 800762a:	4680      	mov	r8, r0
 800762c:	4630      	mov	r0, r6
 800762e:	f7ff fe49 	bl	80072c4 <_Bfree>
 8007632:	4647      	mov	r7, r8
 8007634:	106d      	asrs	r5, r5, #1
 8007636:	d00b      	beq.n	8007650 <__pow5mult+0xa0>
 8007638:	6820      	ldr	r0, [r4, #0]
 800763a:	b938      	cbnz	r0, 800764c <__pow5mult+0x9c>
 800763c:	4622      	mov	r2, r4
 800763e:	4621      	mov	r1, r4
 8007640:	4630      	mov	r0, r6
 8007642:	f7ff ff0b 	bl	800745c <__multiply>
 8007646:	6020      	str	r0, [r4, #0]
 8007648:	f8c0 9000 	str.w	r9, [r0]
 800764c:	4604      	mov	r4, r0
 800764e:	e7e4      	b.n	800761a <__pow5mult+0x6a>
 8007650:	4638      	mov	r0, r7
 8007652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007656:	bf00      	nop
 8007658:	080082c0 	.word	0x080082c0
 800765c:	080080f1 	.word	0x080080f1
 8007660:	08008171 	.word	0x08008171

08007664 <__lshift>:
 8007664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007668:	460c      	mov	r4, r1
 800766a:	6849      	ldr	r1, [r1, #4]
 800766c:	6923      	ldr	r3, [r4, #16]
 800766e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007672:	68a3      	ldr	r3, [r4, #8]
 8007674:	4607      	mov	r7, r0
 8007676:	4691      	mov	r9, r2
 8007678:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800767c:	f108 0601 	add.w	r6, r8, #1
 8007680:	42b3      	cmp	r3, r6
 8007682:	db0b      	blt.n	800769c <__lshift+0x38>
 8007684:	4638      	mov	r0, r7
 8007686:	f7ff fddd 	bl	8007244 <_Balloc>
 800768a:	4605      	mov	r5, r0
 800768c:	b948      	cbnz	r0, 80076a2 <__lshift+0x3e>
 800768e:	4602      	mov	r2, r0
 8007690:	4b28      	ldr	r3, [pc, #160]	; (8007734 <__lshift+0xd0>)
 8007692:	4829      	ldr	r0, [pc, #164]	; (8007738 <__lshift+0xd4>)
 8007694:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007698:	f000 fbe4 	bl	8007e64 <__assert_func>
 800769c:	3101      	adds	r1, #1
 800769e:	005b      	lsls	r3, r3, #1
 80076a0:	e7ee      	b.n	8007680 <__lshift+0x1c>
 80076a2:	2300      	movs	r3, #0
 80076a4:	f100 0114 	add.w	r1, r0, #20
 80076a8:	f100 0210 	add.w	r2, r0, #16
 80076ac:	4618      	mov	r0, r3
 80076ae:	4553      	cmp	r3, sl
 80076b0:	db33      	blt.n	800771a <__lshift+0xb6>
 80076b2:	6920      	ldr	r0, [r4, #16]
 80076b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80076b8:	f104 0314 	add.w	r3, r4, #20
 80076bc:	f019 091f 	ands.w	r9, r9, #31
 80076c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80076c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80076c8:	d02b      	beq.n	8007722 <__lshift+0xbe>
 80076ca:	f1c9 0e20 	rsb	lr, r9, #32
 80076ce:	468a      	mov	sl, r1
 80076d0:	2200      	movs	r2, #0
 80076d2:	6818      	ldr	r0, [r3, #0]
 80076d4:	fa00 f009 	lsl.w	r0, r0, r9
 80076d8:	4310      	orrs	r0, r2
 80076da:	f84a 0b04 	str.w	r0, [sl], #4
 80076de:	f853 2b04 	ldr.w	r2, [r3], #4
 80076e2:	459c      	cmp	ip, r3
 80076e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80076e8:	d8f3      	bhi.n	80076d2 <__lshift+0x6e>
 80076ea:	ebac 0304 	sub.w	r3, ip, r4
 80076ee:	3b15      	subs	r3, #21
 80076f0:	f023 0303 	bic.w	r3, r3, #3
 80076f4:	3304      	adds	r3, #4
 80076f6:	f104 0015 	add.w	r0, r4, #21
 80076fa:	4584      	cmp	ip, r0
 80076fc:	bf38      	it	cc
 80076fe:	2304      	movcc	r3, #4
 8007700:	50ca      	str	r2, [r1, r3]
 8007702:	b10a      	cbz	r2, 8007708 <__lshift+0xa4>
 8007704:	f108 0602 	add.w	r6, r8, #2
 8007708:	3e01      	subs	r6, #1
 800770a:	4638      	mov	r0, r7
 800770c:	612e      	str	r6, [r5, #16]
 800770e:	4621      	mov	r1, r4
 8007710:	f7ff fdd8 	bl	80072c4 <_Bfree>
 8007714:	4628      	mov	r0, r5
 8007716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800771a:	f842 0f04 	str.w	r0, [r2, #4]!
 800771e:	3301      	adds	r3, #1
 8007720:	e7c5      	b.n	80076ae <__lshift+0x4a>
 8007722:	3904      	subs	r1, #4
 8007724:	f853 2b04 	ldr.w	r2, [r3], #4
 8007728:	f841 2f04 	str.w	r2, [r1, #4]!
 800772c:	459c      	cmp	ip, r3
 800772e:	d8f9      	bhi.n	8007724 <__lshift+0xc0>
 8007730:	e7ea      	b.n	8007708 <__lshift+0xa4>
 8007732:	bf00      	nop
 8007734:	08008160 	.word	0x08008160
 8007738:	08008171 	.word	0x08008171

0800773c <__mcmp>:
 800773c:	b530      	push	{r4, r5, lr}
 800773e:	6902      	ldr	r2, [r0, #16]
 8007740:	690c      	ldr	r4, [r1, #16]
 8007742:	1b12      	subs	r2, r2, r4
 8007744:	d10e      	bne.n	8007764 <__mcmp+0x28>
 8007746:	f100 0314 	add.w	r3, r0, #20
 800774a:	3114      	adds	r1, #20
 800774c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007750:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007754:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007758:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800775c:	42a5      	cmp	r5, r4
 800775e:	d003      	beq.n	8007768 <__mcmp+0x2c>
 8007760:	d305      	bcc.n	800776e <__mcmp+0x32>
 8007762:	2201      	movs	r2, #1
 8007764:	4610      	mov	r0, r2
 8007766:	bd30      	pop	{r4, r5, pc}
 8007768:	4283      	cmp	r3, r0
 800776a:	d3f3      	bcc.n	8007754 <__mcmp+0x18>
 800776c:	e7fa      	b.n	8007764 <__mcmp+0x28>
 800776e:	f04f 32ff 	mov.w	r2, #4294967295
 8007772:	e7f7      	b.n	8007764 <__mcmp+0x28>

08007774 <__mdiff>:
 8007774:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007778:	460c      	mov	r4, r1
 800777a:	4606      	mov	r6, r0
 800777c:	4611      	mov	r1, r2
 800777e:	4620      	mov	r0, r4
 8007780:	4690      	mov	r8, r2
 8007782:	f7ff ffdb 	bl	800773c <__mcmp>
 8007786:	1e05      	subs	r5, r0, #0
 8007788:	d110      	bne.n	80077ac <__mdiff+0x38>
 800778a:	4629      	mov	r1, r5
 800778c:	4630      	mov	r0, r6
 800778e:	f7ff fd59 	bl	8007244 <_Balloc>
 8007792:	b930      	cbnz	r0, 80077a2 <__mdiff+0x2e>
 8007794:	4b3a      	ldr	r3, [pc, #232]	; (8007880 <__mdiff+0x10c>)
 8007796:	4602      	mov	r2, r0
 8007798:	f240 2137 	movw	r1, #567	; 0x237
 800779c:	4839      	ldr	r0, [pc, #228]	; (8007884 <__mdiff+0x110>)
 800779e:	f000 fb61 	bl	8007e64 <__assert_func>
 80077a2:	2301      	movs	r3, #1
 80077a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80077a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ac:	bfa4      	itt	ge
 80077ae:	4643      	movge	r3, r8
 80077b0:	46a0      	movge	r8, r4
 80077b2:	4630      	mov	r0, r6
 80077b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80077b8:	bfa6      	itte	ge
 80077ba:	461c      	movge	r4, r3
 80077bc:	2500      	movge	r5, #0
 80077be:	2501      	movlt	r5, #1
 80077c0:	f7ff fd40 	bl	8007244 <_Balloc>
 80077c4:	b920      	cbnz	r0, 80077d0 <__mdiff+0x5c>
 80077c6:	4b2e      	ldr	r3, [pc, #184]	; (8007880 <__mdiff+0x10c>)
 80077c8:	4602      	mov	r2, r0
 80077ca:	f240 2145 	movw	r1, #581	; 0x245
 80077ce:	e7e5      	b.n	800779c <__mdiff+0x28>
 80077d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80077d4:	6926      	ldr	r6, [r4, #16]
 80077d6:	60c5      	str	r5, [r0, #12]
 80077d8:	f104 0914 	add.w	r9, r4, #20
 80077dc:	f108 0514 	add.w	r5, r8, #20
 80077e0:	f100 0e14 	add.w	lr, r0, #20
 80077e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80077e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80077ec:	f108 0210 	add.w	r2, r8, #16
 80077f0:	46f2      	mov	sl, lr
 80077f2:	2100      	movs	r1, #0
 80077f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80077f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80077fc:	fa11 f88b 	uxtah	r8, r1, fp
 8007800:	b299      	uxth	r1, r3
 8007802:	0c1b      	lsrs	r3, r3, #16
 8007804:	eba8 0801 	sub.w	r8, r8, r1
 8007808:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800780c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007810:	fa1f f888 	uxth.w	r8, r8
 8007814:	1419      	asrs	r1, r3, #16
 8007816:	454e      	cmp	r6, r9
 8007818:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800781c:	f84a 3b04 	str.w	r3, [sl], #4
 8007820:	d8e8      	bhi.n	80077f4 <__mdiff+0x80>
 8007822:	1b33      	subs	r3, r6, r4
 8007824:	3b15      	subs	r3, #21
 8007826:	f023 0303 	bic.w	r3, r3, #3
 800782a:	3304      	adds	r3, #4
 800782c:	3415      	adds	r4, #21
 800782e:	42a6      	cmp	r6, r4
 8007830:	bf38      	it	cc
 8007832:	2304      	movcc	r3, #4
 8007834:	441d      	add	r5, r3
 8007836:	4473      	add	r3, lr
 8007838:	469e      	mov	lr, r3
 800783a:	462e      	mov	r6, r5
 800783c:	4566      	cmp	r6, ip
 800783e:	d30e      	bcc.n	800785e <__mdiff+0xea>
 8007840:	f10c 0203 	add.w	r2, ip, #3
 8007844:	1b52      	subs	r2, r2, r5
 8007846:	f022 0203 	bic.w	r2, r2, #3
 800784a:	3d03      	subs	r5, #3
 800784c:	45ac      	cmp	ip, r5
 800784e:	bf38      	it	cc
 8007850:	2200      	movcc	r2, #0
 8007852:	4413      	add	r3, r2
 8007854:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007858:	b17a      	cbz	r2, 800787a <__mdiff+0x106>
 800785a:	6107      	str	r7, [r0, #16]
 800785c:	e7a4      	b.n	80077a8 <__mdiff+0x34>
 800785e:	f856 8b04 	ldr.w	r8, [r6], #4
 8007862:	fa11 f288 	uxtah	r2, r1, r8
 8007866:	1414      	asrs	r4, r2, #16
 8007868:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800786c:	b292      	uxth	r2, r2
 800786e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007872:	f84e 2b04 	str.w	r2, [lr], #4
 8007876:	1421      	asrs	r1, r4, #16
 8007878:	e7e0      	b.n	800783c <__mdiff+0xc8>
 800787a:	3f01      	subs	r7, #1
 800787c:	e7ea      	b.n	8007854 <__mdiff+0xe0>
 800787e:	bf00      	nop
 8007880:	08008160 	.word	0x08008160
 8007884:	08008171 	.word	0x08008171

08007888 <__d2b>:
 8007888:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800788c:	460f      	mov	r7, r1
 800788e:	2101      	movs	r1, #1
 8007890:	ec59 8b10 	vmov	r8, r9, d0
 8007894:	4616      	mov	r6, r2
 8007896:	f7ff fcd5 	bl	8007244 <_Balloc>
 800789a:	4604      	mov	r4, r0
 800789c:	b930      	cbnz	r0, 80078ac <__d2b+0x24>
 800789e:	4602      	mov	r2, r0
 80078a0:	4b24      	ldr	r3, [pc, #144]	; (8007934 <__d2b+0xac>)
 80078a2:	4825      	ldr	r0, [pc, #148]	; (8007938 <__d2b+0xb0>)
 80078a4:	f240 310f 	movw	r1, #783	; 0x30f
 80078a8:	f000 fadc 	bl	8007e64 <__assert_func>
 80078ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80078b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80078b4:	bb2d      	cbnz	r5, 8007902 <__d2b+0x7a>
 80078b6:	9301      	str	r3, [sp, #4]
 80078b8:	f1b8 0300 	subs.w	r3, r8, #0
 80078bc:	d026      	beq.n	800790c <__d2b+0x84>
 80078be:	4668      	mov	r0, sp
 80078c0:	9300      	str	r3, [sp, #0]
 80078c2:	f7ff fd87 	bl	80073d4 <__lo0bits>
 80078c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80078ca:	b1e8      	cbz	r0, 8007908 <__d2b+0x80>
 80078cc:	f1c0 0320 	rsb	r3, r0, #32
 80078d0:	fa02 f303 	lsl.w	r3, r2, r3
 80078d4:	430b      	orrs	r3, r1
 80078d6:	40c2      	lsrs	r2, r0
 80078d8:	6163      	str	r3, [r4, #20]
 80078da:	9201      	str	r2, [sp, #4]
 80078dc:	9b01      	ldr	r3, [sp, #4]
 80078de:	61a3      	str	r3, [r4, #24]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	bf14      	ite	ne
 80078e4:	2202      	movne	r2, #2
 80078e6:	2201      	moveq	r2, #1
 80078e8:	6122      	str	r2, [r4, #16]
 80078ea:	b1bd      	cbz	r5, 800791c <__d2b+0x94>
 80078ec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80078f0:	4405      	add	r5, r0
 80078f2:	603d      	str	r5, [r7, #0]
 80078f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80078f8:	6030      	str	r0, [r6, #0]
 80078fa:	4620      	mov	r0, r4
 80078fc:	b003      	add	sp, #12
 80078fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007902:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007906:	e7d6      	b.n	80078b6 <__d2b+0x2e>
 8007908:	6161      	str	r1, [r4, #20]
 800790a:	e7e7      	b.n	80078dc <__d2b+0x54>
 800790c:	a801      	add	r0, sp, #4
 800790e:	f7ff fd61 	bl	80073d4 <__lo0bits>
 8007912:	9b01      	ldr	r3, [sp, #4]
 8007914:	6163      	str	r3, [r4, #20]
 8007916:	3020      	adds	r0, #32
 8007918:	2201      	movs	r2, #1
 800791a:	e7e5      	b.n	80078e8 <__d2b+0x60>
 800791c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007920:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007924:	6038      	str	r0, [r7, #0]
 8007926:	6918      	ldr	r0, [r3, #16]
 8007928:	f7ff fd34 	bl	8007394 <__hi0bits>
 800792c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007930:	e7e2      	b.n	80078f8 <__d2b+0x70>
 8007932:	bf00      	nop
 8007934:	08008160 	.word	0x08008160
 8007938:	08008171 	.word	0x08008171

0800793c <__sfputc_r>:
 800793c:	6893      	ldr	r3, [r2, #8]
 800793e:	3b01      	subs	r3, #1
 8007940:	2b00      	cmp	r3, #0
 8007942:	b410      	push	{r4}
 8007944:	6093      	str	r3, [r2, #8]
 8007946:	da08      	bge.n	800795a <__sfputc_r+0x1e>
 8007948:	6994      	ldr	r4, [r2, #24]
 800794a:	42a3      	cmp	r3, r4
 800794c:	db01      	blt.n	8007952 <__sfputc_r+0x16>
 800794e:	290a      	cmp	r1, #10
 8007950:	d103      	bne.n	800795a <__sfputc_r+0x1e>
 8007952:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007956:	f7fe bbe4 	b.w	8006122 <__swbuf_r>
 800795a:	6813      	ldr	r3, [r2, #0]
 800795c:	1c58      	adds	r0, r3, #1
 800795e:	6010      	str	r0, [r2, #0]
 8007960:	7019      	strb	r1, [r3, #0]
 8007962:	4608      	mov	r0, r1
 8007964:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007968:	4770      	bx	lr

0800796a <__sfputs_r>:
 800796a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800796c:	4606      	mov	r6, r0
 800796e:	460f      	mov	r7, r1
 8007970:	4614      	mov	r4, r2
 8007972:	18d5      	adds	r5, r2, r3
 8007974:	42ac      	cmp	r4, r5
 8007976:	d101      	bne.n	800797c <__sfputs_r+0x12>
 8007978:	2000      	movs	r0, #0
 800797a:	e007      	b.n	800798c <__sfputs_r+0x22>
 800797c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007980:	463a      	mov	r2, r7
 8007982:	4630      	mov	r0, r6
 8007984:	f7ff ffda 	bl	800793c <__sfputc_r>
 8007988:	1c43      	adds	r3, r0, #1
 800798a:	d1f3      	bne.n	8007974 <__sfputs_r+0xa>
 800798c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007990 <_vfiprintf_r>:
 8007990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007994:	460d      	mov	r5, r1
 8007996:	b09d      	sub	sp, #116	; 0x74
 8007998:	4614      	mov	r4, r2
 800799a:	4698      	mov	r8, r3
 800799c:	4606      	mov	r6, r0
 800799e:	b118      	cbz	r0, 80079a8 <_vfiprintf_r+0x18>
 80079a0:	6a03      	ldr	r3, [r0, #32]
 80079a2:	b90b      	cbnz	r3, 80079a8 <_vfiprintf_r+0x18>
 80079a4:	f7fe fad6 	bl	8005f54 <__sinit>
 80079a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079aa:	07d9      	lsls	r1, r3, #31
 80079ac:	d405      	bmi.n	80079ba <_vfiprintf_r+0x2a>
 80079ae:	89ab      	ldrh	r3, [r5, #12]
 80079b0:	059a      	lsls	r2, r3, #22
 80079b2:	d402      	bmi.n	80079ba <_vfiprintf_r+0x2a>
 80079b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079b6:	f7fe fcc6 	bl	8006346 <__retarget_lock_acquire_recursive>
 80079ba:	89ab      	ldrh	r3, [r5, #12]
 80079bc:	071b      	lsls	r3, r3, #28
 80079be:	d501      	bpl.n	80079c4 <_vfiprintf_r+0x34>
 80079c0:	692b      	ldr	r3, [r5, #16]
 80079c2:	b99b      	cbnz	r3, 80079ec <_vfiprintf_r+0x5c>
 80079c4:	4629      	mov	r1, r5
 80079c6:	4630      	mov	r0, r6
 80079c8:	f7fe fbe8 	bl	800619c <__swsetup_r>
 80079cc:	b170      	cbz	r0, 80079ec <_vfiprintf_r+0x5c>
 80079ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079d0:	07dc      	lsls	r4, r3, #31
 80079d2:	d504      	bpl.n	80079de <_vfiprintf_r+0x4e>
 80079d4:	f04f 30ff 	mov.w	r0, #4294967295
 80079d8:	b01d      	add	sp, #116	; 0x74
 80079da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079de:	89ab      	ldrh	r3, [r5, #12]
 80079e0:	0598      	lsls	r0, r3, #22
 80079e2:	d4f7      	bmi.n	80079d4 <_vfiprintf_r+0x44>
 80079e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079e6:	f7fe fcaf 	bl	8006348 <__retarget_lock_release_recursive>
 80079ea:	e7f3      	b.n	80079d4 <_vfiprintf_r+0x44>
 80079ec:	2300      	movs	r3, #0
 80079ee:	9309      	str	r3, [sp, #36]	; 0x24
 80079f0:	2320      	movs	r3, #32
 80079f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80079fa:	2330      	movs	r3, #48	; 0x30
 80079fc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007bb0 <_vfiprintf_r+0x220>
 8007a00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a04:	f04f 0901 	mov.w	r9, #1
 8007a08:	4623      	mov	r3, r4
 8007a0a:	469a      	mov	sl, r3
 8007a0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a10:	b10a      	cbz	r2, 8007a16 <_vfiprintf_r+0x86>
 8007a12:	2a25      	cmp	r2, #37	; 0x25
 8007a14:	d1f9      	bne.n	8007a0a <_vfiprintf_r+0x7a>
 8007a16:	ebba 0b04 	subs.w	fp, sl, r4
 8007a1a:	d00b      	beq.n	8007a34 <_vfiprintf_r+0xa4>
 8007a1c:	465b      	mov	r3, fp
 8007a1e:	4622      	mov	r2, r4
 8007a20:	4629      	mov	r1, r5
 8007a22:	4630      	mov	r0, r6
 8007a24:	f7ff ffa1 	bl	800796a <__sfputs_r>
 8007a28:	3001      	adds	r0, #1
 8007a2a:	f000 80a9 	beq.w	8007b80 <_vfiprintf_r+0x1f0>
 8007a2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a30:	445a      	add	r2, fp
 8007a32:	9209      	str	r2, [sp, #36]	; 0x24
 8007a34:	f89a 3000 	ldrb.w	r3, [sl]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	f000 80a1 	beq.w	8007b80 <_vfiprintf_r+0x1f0>
 8007a3e:	2300      	movs	r3, #0
 8007a40:	f04f 32ff 	mov.w	r2, #4294967295
 8007a44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a48:	f10a 0a01 	add.w	sl, sl, #1
 8007a4c:	9304      	str	r3, [sp, #16]
 8007a4e:	9307      	str	r3, [sp, #28]
 8007a50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a54:	931a      	str	r3, [sp, #104]	; 0x68
 8007a56:	4654      	mov	r4, sl
 8007a58:	2205      	movs	r2, #5
 8007a5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a5e:	4854      	ldr	r0, [pc, #336]	; (8007bb0 <_vfiprintf_r+0x220>)
 8007a60:	f7f8 fbb6 	bl	80001d0 <memchr>
 8007a64:	9a04      	ldr	r2, [sp, #16]
 8007a66:	b9d8      	cbnz	r0, 8007aa0 <_vfiprintf_r+0x110>
 8007a68:	06d1      	lsls	r1, r2, #27
 8007a6a:	bf44      	itt	mi
 8007a6c:	2320      	movmi	r3, #32
 8007a6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a72:	0713      	lsls	r3, r2, #28
 8007a74:	bf44      	itt	mi
 8007a76:	232b      	movmi	r3, #43	; 0x2b
 8007a78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a7c:	f89a 3000 	ldrb.w	r3, [sl]
 8007a80:	2b2a      	cmp	r3, #42	; 0x2a
 8007a82:	d015      	beq.n	8007ab0 <_vfiprintf_r+0x120>
 8007a84:	9a07      	ldr	r2, [sp, #28]
 8007a86:	4654      	mov	r4, sl
 8007a88:	2000      	movs	r0, #0
 8007a8a:	f04f 0c0a 	mov.w	ip, #10
 8007a8e:	4621      	mov	r1, r4
 8007a90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a94:	3b30      	subs	r3, #48	; 0x30
 8007a96:	2b09      	cmp	r3, #9
 8007a98:	d94d      	bls.n	8007b36 <_vfiprintf_r+0x1a6>
 8007a9a:	b1b0      	cbz	r0, 8007aca <_vfiprintf_r+0x13a>
 8007a9c:	9207      	str	r2, [sp, #28]
 8007a9e:	e014      	b.n	8007aca <_vfiprintf_r+0x13a>
 8007aa0:	eba0 0308 	sub.w	r3, r0, r8
 8007aa4:	fa09 f303 	lsl.w	r3, r9, r3
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	9304      	str	r3, [sp, #16]
 8007aac:	46a2      	mov	sl, r4
 8007aae:	e7d2      	b.n	8007a56 <_vfiprintf_r+0xc6>
 8007ab0:	9b03      	ldr	r3, [sp, #12]
 8007ab2:	1d19      	adds	r1, r3, #4
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	9103      	str	r1, [sp, #12]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	bfbb      	ittet	lt
 8007abc:	425b      	neglt	r3, r3
 8007abe:	f042 0202 	orrlt.w	r2, r2, #2
 8007ac2:	9307      	strge	r3, [sp, #28]
 8007ac4:	9307      	strlt	r3, [sp, #28]
 8007ac6:	bfb8      	it	lt
 8007ac8:	9204      	strlt	r2, [sp, #16]
 8007aca:	7823      	ldrb	r3, [r4, #0]
 8007acc:	2b2e      	cmp	r3, #46	; 0x2e
 8007ace:	d10c      	bne.n	8007aea <_vfiprintf_r+0x15a>
 8007ad0:	7863      	ldrb	r3, [r4, #1]
 8007ad2:	2b2a      	cmp	r3, #42	; 0x2a
 8007ad4:	d134      	bne.n	8007b40 <_vfiprintf_r+0x1b0>
 8007ad6:	9b03      	ldr	r3, [sp, #12]
 8007ad8:	1d1a      	adds	r2, r3, #4
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	9203      	str	r2, [sp, #12]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	bfb8      	it	lt
 8007ae2:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ae6:	3402      	adds	r4, #2
 8007ae8:	9305      	str	r3, [sp, #20]
 8007aea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007bc0 <_vfiprintf_r+0x230>
 8007aee:	7821      	ldrb	r1, [r4, #0]
 8007af0:	2203      	movs	r2, #3
 8007af2:	4650      	mov	r0, sl
 8007af4:	f7f8 fb6c 	bl	80001d0 <memchr>
 8007af8:	b138      	cbz	r0, 8007b0a <_vfiprintf_r+0x17a>
 8007afa:	9b04      	ldr	r3, [sp, #16]
 8007afc:	eba0 000a 	sub.w	r0, r0, sl
 8007b00:	2240      	movs	r2, #64	; 0x40
 8007b02:	4082      	lsls	r2, r0
 8007b04:	4313      	orrs	r3, r2
 8007b06:	3401      	adds	r4, #1
 8007b08:	9304      	str	r3, [sp, #16]
 8007b0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b0e:	4829      	ldr	r0, [pc, #164]	; (8007bb4 <_vfiprintf_r+0x224>)
 8007b10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b14:	2206      	movs	r2, #6
 8007b16:	f7f8 fb5b 	bl	80001d0 <memchr>
 8007b1a:	2800      	cmp	r0, #0
 8007b1c:	d03f      	beq.n	8007b9e <_vfiprintf_r+0x20e>
 8007b1e:	4b26      	ldr	r3, [pc, #152]	; (8007bb8 <_vfiprintf_r+0x228>)
 8007b20:	bb1b      	cbnz	r3, 8007b6a <_vfiprintf_r+0x1da>
 8007b22:	9b03      	ldr	r3, [sp, #12]
 8007b24:	3307      	adds	r3, #7
 8007b26:	f023 0307 	bic.w	r3, r3, #7
 8007b2a:	3308      	adds	r3, #8
 8007b2c:	9303      	str	r3, [sp, #12]
 8007b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b30:	443b      	add	r3, r7
 8007b32:	9309      	str	r3, [sp, #36]	; 0x24
 8007b34:	e768      	b.n	8007a08 <_vfiprintf_r+0x78>
 8007b36:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b3a:	460c      	mov	r4, r1
 8007b3c:	2001      	movs	r0, #1
 8007b3e:	e7a6      	b.n	8007a8e <_vfiprintf_r+0xfe>
 8007b40:	2300      	movs	r3, #0
 8007b42:	3401      	adds	r4, #1
 8007b44:	9305      	str	r3, [sp, #20]
 8007b46:	4619      	mov	r1, r3
 8007b48:	f04f 0c0a 	mov.w	ip, #10
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b52:	3a30      	subs	r2, #48	; 0x30
 8007b54:	2a09      	cmp	r2, #9
 8007b56:	d903      	bls.n	8007b60 <_vfiprintf_r+0x1d0>
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d0c6      	beq.n	8007aea <_vfiprintf_r+0x15a>
 8007b5c:	9105      	str	r1, [sp, #20]
 8007b5e:	e7c4      	b.n	8007aea <_vfiprintf_r+0x15a>
 8007b60:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b64:	4604      	mov	r4, r0
 8007b66:	2301      	movs	r3, #1
 8007b68:	e7f0      	b.n	8007b4c <_vfiprintf_r+0x1bc>
 8007b6a:	ab03      	add	r3, sp, #12
 8007b6c:	9300      	str	r3, [sp, #0]
 8007b6e:	462a      	mov	r2, r5
 8007b70:	4b12      	ldr	r3, [pc, #72]	; (8007bbc <_vfiprintf_r+0x22c>)
 8007b72:	a904      	add	r1, sp, #16
 8007b74:	4630      	mov	r0, r6
 8007b76:	f7fd fd9b 	bl	80056b0 <_printf_float>
 8007b7a:	4607      	mov	r7, r0
 8007b7c:	1c78      	adds	r0, r7, #1
 8007b7e:	d1d6      	bne.n	8007b2e <_vfiprintf_r+0x19e>
 8007b80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b82:	07d9      	lsls	r1, r3, #31
 8007b84:	d405      	bmi.n	8007b92 <_vfiprintf_r+0x202>
 8007b86:	89ab      	ldrh	r3, [r5, #12]
 8007b88:	059a      	lsls	r2, r3, #22
 8007b8a:	d402      	bmi.n	8007b92 <_vfiprintf_r+0x202>
 8007b8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b8e:	f7fe fbdb 	bl	8006348 <__retarget_lock_release_recursive>
 8007b92:	89ab      	ldrh	r3, [r5, #12]
 8007b94:	065b      	lsls	r3, r3, #25
 8007b96:	f53f af1d 	bmi.w	80079d4 <_vfiprintf_r+0x44>
 8007b9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b9c:	e71c      	b.n	80079d8 <_vfiprintf_r+0x48>
 8007b9e:	ab03      	add	r3, sp, #12
 8007ba0:	9300      	str	r3, [sp, #0]
 8007ba2:	462a      	mov	r2, r5
 8007ba4:	4b05      	ldr	r3, [pc, #20]	; (8007bbc <_vfiprintf_r+0x22c>)
 8007ba6:	a904      	add	r1, sp, #16
 8007ba8:	4630      	mov	r0, r6
 8007baa:	f7fe f825 	bl	8005bf8 <_printf_i>
 8007bae:	e7e4      	b.n	8007b7a <_vfiprintf_r+0x1ea>
 8007bb0:	080082cc 	.word	0x080082cc
 8007bb4:	080082d6 	.word	0x080082d6
 8007bb8:	080056b1 	.word	0x080056b1
 8007bbc:	0800796b 	.word	0x0800796b
 8007bc0:	080082d2 	.word	0x080082d2

08007bc4 <__sflush_r>:
 8007bc4:	898a      	ldrh	r2, [r1, #12]
 8007bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bca:	4605      	mov	r5, r0
 8007bcc:	0710      	lsls	r0, r2, #28
 8007bce:	460c      	mov	r4, r1
 8007bd0:	d458      	bmi.n	8007c84 <__sflush_r+0xc0>
 8007bd2:	684b      	ldr	r3, [r1, #4]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	dc05      	bgt.n	8007be4 <__sflush_r+0x20>
 8007bd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	dc02      	bgt.n	8007be4 <__sflush_r+0x20>
 8007bde:	2000      	movs	r0, #0
 8007be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007be4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007be6:	2e00      	cmp	r6, #0
 8007be8:	d0f9      	beq.n	8007bde <__sflush_r+0x1a>
 8007bea:	2300      	movs	r3, #0
 8007bec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007bf0:	682f      	ldr	r7, [r5, #0]
 8007bf2:	6a21      	ldr	r1, [r4, #32]
 8007bf4:	602b      	str	r3, [r5, #0]
 8007bf6:	d032      	beq.n	8007c5e <__sflush_r+0x9a>
 8007bf8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007bfa:	89a3      	ldrh	r3, [r4, #12]
 8007bfc:	075a      	lsls	r2, r3, #29
 8007bfe:	d505      	bpl.n	8007c0c <__sflush_r+0x48>
 8007c00:	6863      	ldr	r3, [r4, #4]
 8007c02:	1ac0      	subs	r0, r0, r3
 8007c04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c06:	b10b      	cbz	r3, 8007c0c <__sflush_r+0x48>
 8007c08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c0a:	1ac0      	subs	r0, r0, r3
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	4602      	mov	r2, r0
 8007c10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c12:	6a21      	ldr	r1, [r4, #32]
 8007c14:	4628      	mov	r0, r5
 8007c16:	47b0      	blx	r6
 8007c18:	1c43      	adds	r3, r0, #1
 8007c1a:	89a3      	ldrh	r3, [r4, #12]
 8007c1c:	d106      	bne.n	8007c2c <__sflush_r+0x68>
 8007c1e:	6829      	ldr	r1, [r5, #0]
 8007c20:	291d      	cmp	r1, #29
 8007c22:	d82b      	bhi.n	8007c7c <__sflush_r+0xb8>
 8007c24:	4a29      	ldr	r2, [pc, #164]	; (8007ccc <__sflush_r+0x108>)
 8007c26:	410a      	asrs	r2, r1
 8007c28:	07d6      	lsls	r6, r2, #31
 8007c2a:	d427      	bmi.n	8007c7c <__sflush_r+0xb8>
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	6062      	str	r2, [r4, #4]
 8007c30:	04d9      	lsls	r1, r3, #19
 8007c32:	6922      	ldr	r2, [r4, #16]
 8007c34:	6022      	str	r2, [r4, #0]
 8007c36:	d504      	bpl.n	8007c42 <__sflush_r+0x7e>
 8007c38:	1c42      	adds	r2, r0, #1
 8007c3a:	d101      	bne.n	8007c40 <__sflush_r+0x7c>
 8007c3c:	682b      	ldr	r3, [r5, #0]
 8007c3e:	b903      	cbnz	r3, 8007c42 <__sflush_r+0x7e>
 8007c40:	6560      	str	r0, [r4, #84]	; 0x54
 8007c42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c44:	602f      	str	r7, [r5, #0]
 8007c46:	2900      	cmp	r1, #0
 8007c48:	d0c9      	beq.n	8007bde <__sflush_r+0x1a>
 8007c4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c4e:	4299      	cmp	r1, r3
 8007c50:	d002      	beq.n	8007c58 <__sflush_r+0x94>
 8007c52:	4628      	mov	r0, r5
 8007c54:	f7ff f9f6 	bl	8007044 <_free_r>
 8007c58:	2000      	movs	r0, #0
 8007c5a:	6360      	str	r0, [r4, #52]	; 0x34
 8007c5c:	e7c0      	b.n	8007be0 <__sflush_r+0x1c>
 8007c5e:	2301      	movs	r3, #1
 8007c60:	4628      	mov	r0, r5
 8007c62:	47b0      	blx	r6
 8007c64:	1c41      	adds	r1, r0, #1
 8007c66:	d1c8      	bne.n	8007bfa <__sflush_r+0x36>
 8007c68:	682b      	ldr	r3, [r5, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d0c5      	beq.n	8007bfa <__sflush_r+0x36>
 8007c6e:	2b1d      	cmp	r3, #29
 8007c70:	d001      	beq.n	8007c76 <__sflush_r+0xb2>
 8007c72:	2b16      	cmp	r3, #22
 8007c74:	d101      	bne.n	8007c7a <__sflush_r+0xb6>
 8007c76:	602f      	str	r7, [r5, #0]
 8007c78:	e7b1      	b.n	8007bde <__sflush_r+0x1a>
 8007c7a:	89a3      	ldrh	r3, [r4, #12]
 8007c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c80:	81a3      	strh	r3, [r4, #12]
 8007c82:	e7ad      	b.n	8007be0 <__sflush_r+0x1c>
 8007c84:	690f      	ldr	r7, [r1, #16]
 8007c86:	2f00      	cmp	r7, #0
 8007c88:	d0a9      	beq.n	8007bde <__sflush_r+0x1a>
 8007c8a:	0793      	lsls	r3, r2, #30
 8007c8c:	680e      	ldr	r6, [r1, #0]
 8007c8e:	bf08      	it	eq
 8007c90:	694b      	ldreq	r3, [r1, #20]
 8007c92:	600f      	str	r7, [r1, #0]
 8007c94:	bf18      	it	ne
 8007c96:	2300      	movne	r3, #0
 8007c98:	eba6 0807 	sub.w	r8, r6, r7
 8007c9c:	608b      	str	r3, [r1, #8]
 8007c9e:	f1b8 0f00 	cmp.w	r8, #0
 8007ca2:	dd9c      	ble.n	8007bde <__sflush_r+0x1a>
 8007ca4:	6a21      	ldr	r1, [r4, #32]
 8007ca6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ca8:	4643      	mov	r3, r8
 8007caa:	463a      	mov	r2, r7
 8007cac:	4628      	mov	r0, r5
 8007cae:	47b0      	blx	r6
 8007cb0:	2800      	cmp	r0, #0
 8007cb2:	dc06      	bgt.n	8007cc2 <__sflush_r+0xfe>
 8007cb4:	89a3      	ldrh	r3, [r4, #12]
 8007cb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cba:	81a3      	strh	r3, [r4, #12]
 8007cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc0:	e78e      	b.n	8007be0 <__sflush_r+0x1c>
 8007cc2:	4407      	add	r7, r0
 8007cc4:	eba8 0800 	sub.w	r8, r8, r0
 8007cc8:	e7e9      	b.n	8007c9e <__sflush_r+0xda>
 8007cca:	bf00      	nop
 8007ccc:	dfbffffe 	.word	0xdfbffffe

08007cd0 <_fflush_r>:
 8007cd0:	b538      	push	{r3, r4, r5, lr}
 8007cd2:	690b      	ldr	r3, [r1, #16]
 8007cd4:	4605      	mov	r5, r0
 8007cd6:	460c      	mov	r4, r1
 8007cd8:	b913      	cbnz	r3, 8007ce0 <_fflush_r+0x10>
 8007cda:	2500      	movs	r5, #0
 8007cdc:	4628      	mov	r0, r5
 8007cde:	bd38      	pop	{r3, r4, r5, pc}
 8007ce0:	b118      	cbz	r0, 8007cea <_fflush_r+0x1a>
 8007ce2:	6a03      	ldr	r3, [r0, #32]
 8007ce4:	b90b      	cbnz	r3, 8007cea <_fflush_r+0x1a>
 8007ce6:	f7fe f935 	bl	8005f54 <__sinit>
 8007cea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d0f3      	beq.n	8007cda <_fflush_r+0xa>
 8007cf2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007cf4:	07d0      	lsls	r0, r2, #31
 8007cf6:	d404      	bmi.n	8007d02 <_fflush_r+0x32>
 8007cf8:	0599      	lsls	r1, r3, #22
 8007cfa:	d402      	bmi.n	8007d02 <_fflush_r+0x32>
 8007cfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cfe:	f7fe fb22 	bl	8006346 <__retarget_lock_acquire_recursive>
 8007d02:	4628      	mov	r0, r5
 8007d04:	4621      	mov	r1, r4
 8007d06:	f7ff ff5d 	bl	8007bc4 <__sflush_r>
 8007d0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d0c:	07da      	lsls	r2, r3, #31
 8007d0e:	4605      	mov	r5, r0
 8007d10:	d4e4      	bmi.n	8007cdc <_fflush_r+0xc>
 8007d12:	89a3      	ldrh	r3, [r4, #12]
 8007d14:	059b      	lsls	r3, r3, #22
 8007d16:	d4e1      	bmi.n	8007cdc <_fflush_r+0xc>
 8007d18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d1a:	f7fe fb15 	bl	8006348 <__retarget_lock_release_recursive>
 8007d1e:	e7dd      	b.n	8007cdc <_fflush_r+0xc>

08007d20 <__swhatbuf_r>:
 8007d20:	b570      	push	{r4, r5, r6, lr}
 8007d22:	460c      	mov	r4, r1
 8007d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d28:	2900      	cmp	r1, #0
 8007d2a:	b096      	sub	sp, #88	; 0x58
 8007d2c:	4615      	mov	r5, r2
 8007d2e:	461e      	mov	r6, r3
 8007d30:	da0d      	bge.n	8007d4e <__swhatbuf_r+0x2e>
 8007d32:	89a3      	ldrh	r3, [r4, #12]
 8007d34:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007d38:	f04f 0100 	mov.w	r1, #0
 8007d3c:	bf0c      	ite	eq
 8007d3e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007d42:	2340      	movne	r3, #64	; 0x40
 8007d44:	2000      	movs	r0, #0
 8007d46:	6031      	str	r1, [r6, #0]
 8007d48:	602b      	str	r3, [r5, #0]
 8007d4a:	b016      	add	sp, #88	; 0x58
 8007d4c:	bd70      	pop	{r4, r5, r6, pc}
 8007d4e:	466a      	mov	r2, sp
 8007d50:	f000 f848 	bl	8007de4 <_fstat_r>
 8007d54:	2800      	cmp	r0, #0
 8007d56:	dbec      	blt.n	8007d32 <__swhatbuf_r+0x12>
 8007d58:	9901      	ldr	r1, [sp, #4]
 8007d5a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007d5e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007d62:	4259      	negs	r1, r3
 8007d64:	4159      	adcs	r1, r3
 8007d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d6a:	e7eb      	b.n	8007d44 <__swhatbuf_r+0x24>

08007d6c <__smakebuf_r>:
 8007d6c:	898b      	ldrh	r3, [r1, #12]
 8007d6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d70:	079d      	lsls	r5, r3, #30
 8007d72:	4606      	mov	r6, r0
 8007d74:	460c      	mov	r4, r1
 8007d76:	d507      	bpl.n	8007d88 <__smakebuf_r+0x1c>
 8007d78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d7c:	6023      	str	r3, [r4, #0]
 8007d7e:	6123      	str	r3, [r4, #16]
 8007d80:	2301      	movs	r3, #1
 8007d82:	6163      	str	r3, [r4, #20]
 8007d84:	b002      	add	sp, #8
 8007d86:	bd70      	pop	{r4, r5, r6, pc}
 8007d88:	ab01      	add	r3, sp, #4
 8007d8a:	466a      	mov	r2, sp
 8007d8c:	f7ff ffc8 	bl	8007d20 <__swhatbuf_r>
 8007d90:	9900      	ldr	r1, [sp, #0]
 8007d92:	4605      	mov	r5, r0
 8007d94:	4630      	mov	r0, r6
 8007d96:	f7ff f9c9 	bl	800712c <_malloc_r>
 8007d9a:	b948      	cbnz	r0, 8007db0 <__smakebuf_r+0x44>
 8007d9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007da0:	059a      	lsls	r2, r3, #22
 8007da2:	d4ef      	bmi.n	8007d84 <__smakebuf_r+0x18>
 8007da4:	f023 0303 	bic.w	r3, r3, #3
 8007da8:	f043 0302 	orr.w	r3, r3, #2
 8007dac:	81a3      	strh	r3, [r4, #12]
 8007dae:	e7e3      	b.n	8007d78 <__smakebuf_r+0xc>
 8007db0:	89a3      	ldrh	r3, [r4, #12]
 8007db2:	6020      	str	r0, [r4, #0]
 8007db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007db8:	81a3      	strh	r3, [r4, #12]
 8007dba:	9b00      	ldr	r3, [sp, #0]
 8007dbc:	6163      	str	r3, [r4, #20]
 8007dbe:	9b01      	ldr	r3, [sp, #4]
 8007dc0:	6120      	str	r0, [r4, #16]
 8007dc2:	b15b      	cbz	r3, 8007ddc <__smakebuf_r+0x70>
 8007dc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dc8:	4630      	mov	r0, r6
 8007dca:	f000 f81d 	bl	8007e08 <_isatty_r>
 8007dce:	b128      	cbz	r0, 8007ddc <__smakebuf_r+0x70>
 8007dd0:	89a3      	ldrh	r3, [r4, #12]
 8007dd2:	f023 0303 	bic.w	r3, r3, #3
 8007dd6:	f043 0301 	orr.w	r3, r3, #1
 8007dda:	81a3      	strh	r3, [r4, #12]
 8007ddc:	89a3      	ldrh	r3, [r4, #12]
 8007dde:	431d      	orrs	r5, r3
 8007de0:	81a5      	strh	r5, [r4, #12]
 8007de2:	e7cf      	b.n	8007d84 <__smakebuf_r+0x18>

08007de4 <_fstat_r>:
 8007de4:	b538      	push	{r3, r4, r5, lr}
 8007de6:	4d07      	ldr	r5, [pc, #28]	; (8007e04 <_fstat_r+0x20>)
 8007de8:	2300      	movs	r3, #0
 8007dea:	4604      	mov	r4, r0
 8007dec:	4608      	mov	r0, r1
 8007dee:	4611      	mov	r1, r2
 8007df0:	602b      	str	r3, [r5, #0]
 8007df2:	f7f9 fccc 	bl	800178e <_fstat>
 8007df6:	1c43      	adds	r3, r0, #1
 8007df8:	d102      	bne.n	8007e00 <_fstat_r+0x1c>
 8007dfa:	682b      	ldr	r3, [r5, #0]
 8007dfc:	b103      	cbz	r3, 8007e00 <_fstat_r+0x1c>
 8007dfe:	6023      	str	r3, [r4, #0]
 8007e00:	bd38      	pop	{r3, r4, r5, pc}
 8007e02:	bf00      	nop
 8007e04:	2000083c 	.word	0x2000083c

08007e08 <_isatty_r>:
 8007e08:	b538      	push	{r3, r4, r5, lr}
 8007e0a:	4d06      	ldr	r5, [pc, #24]	; (8007e24 <_isatty_r+0x1c>)
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	4604      	mov	r4, r0
 8007e10:	4608      	mov	r0, r1
 8007e12:	602b      	str	r3, [r5, #0]
 8007e14:	f7f9 fccb 	bl	80017ae <_isatty>
 8007e18:	1c43      	adds	r3, r0, #1
 8007e1a:	d102      	bne.n	8007e22 <_isatty_r+0x1a>
 8007e1c:	682b      	ldr	r3, [r5, #0]
 8007e1e:	b103      	cbz	r3, 8007e22 <_isatty_r+0x1a>
 8007e20:	6023      	str	r3, [r4, #0]
 8007e22:	bd38      	pop	{r3, r4, r5, pc}
 8007e24:	2000083c 	.word	0x2000083c

08007e28 <_sbrk_r>:
 8007e28:	b538      	push	{r3, r4, r5, lr}
 8007e2a:	4d06      	ldr	r5, [pc, #24]	; (8007e44 <_sbrk_r+0x1c>)
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	4604      	mov	r4, r0
 8007e30:	4608      	mov	r0, r1
 8007e32:	602b      	str	r3, [r5, #0]
 8007e34:	f7f9 fcd4 	bl	80017e0 <_sbrk>
 8007e38:	1c43      	adds	r3, r0, #1
 8007e3a:	d102      	bne.n	8007e42 <_sbrk_r+0x1a>
 8007e3c:	682b      	ldr	r3, [r5, #0]
 8007e3e:	b103      	cbz	r3, 8007e42 <_sbrk_r+0x1a>
 8007e40:	6023      	str	r3, [r4, #0]
 8007e42:	bd38      	pop	{r3, r4, r5, pc}
 8007e44:	2000083c 	.word	0x2000083c

08007e48 <memcpy>:
 8007e48:	440a      	add	r2, r1
 8007e4a:	4291      	cmp	r1, r2
 8007e4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e50:	d100      	bne.n	8007e54 <memcpy+0xc>
 8007e52:	4770      	bx	lr
 8007e54:	b510      	push	{r4, lr}
 8007e56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e5e:	4291      	cmp	r1, r2
 8007e60:	d1f9      	bne.n	8007e56 <memcpy+0xe>
 8007e62:	bd10      	pop	{r4, pc}

08007e64 <__assert_func>:
 8007e64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e66:	4614      	mov	r4, r2
 8007e68:	461a      	mov	r2, r3
 8007e6a:	4b09      	ldr	r3, [pc, #36]	; (8007e90 <__assert_func+0x2c>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4605      	mov	r5, r0
 8007e70:	68d8      	ldr	r0, [r3, #12]
 8007e72:	b14c      	cbz	r4, 8007e88 <__assert_func+0x24>
 8007e74:	4b07      	ldr	r3, [pc, #28]	; (8007e94 <__assert_func+0x30>)
 8007e76:	9100      	str	r1, [sp, #0]
 8007e78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e7c:	4906      	ldr	r1, [pc, #24]	; (8007e98 <__assert_func+0x34>)
 8007e7e:	462b      	mov	r3, r5
 8007e80:	f000 f844 	bl	8007f0c <fiprintf>
 8007e84:	f000 f854 	bl	8007f30 <abort>
 8007e88:	4b04      	ldr	r3, [pc, #16]	; (8007e9c <__assert_func+0x38>)
 8007e8a:	461c      	mov	r4, r3
 8007e8c:	e7f3      	b.n	8007e76 <__assert_func+0x12>
 8007e8e:	bf00      	nop
 8007e90:	20000064 	.word	0x20000064
 8007e94:	080082e7 	.word	0x080082e7
 8007e98:	080082f4 	.word	0x080082f4
 8007e9c:	08008322 	.word	0x08008322

08007ea0 <_calloc_r>:
 8007ea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ea2:	fba1 2402 	umull	r2, r4, r1, r2
 8007ea6:	b94c      	cbnz	r4, 8007ebc <_calloc_r+0x1c>
 8007ea8:	4611      	mov	r1, r2
 8007eaa:	9201      	str	r2, [sp, #4]
 8007eac:	f7ff f93e 	bl	800712c <_malloc_r>
 8007eb0:	9a01      	ldr	r2, [sp, #4]
 8007eb2:	4605      	mov	r5, r0
 8007eb4:	b930      	cbnz	r0, 8007ec4 <_calloc_r+0x24>
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	b003      	add	sp, #12
 8007eba:	bd30      	pop	{r4, r5, pc}
 8007ebc:	220c      	movs	r2, #12
 8007ebe:	6002      	str	r2, [r0, #0]
 8007ec0:	2500      	movs	r5, #0
 8007ec2:	e7f8      	b.n	8007eb6 <_calloc_r+0x16>
 8007ec4:	4621      	mov	r1, r4
 8007ec6:	f7fe f9c1 	bl	800624c <memset>
 8007eca:	e7f4      	b.n	8007eb6 <_calloc_r+0x16>

08007ecc <__ascii_mbtowc>:
 8007ecc:	b082      	sub	sp, #8
 8007ece:	b901      	cbnz	r1, 8007ed2 <__ascii_mbtowc+0x6>
 8007ed0:	a901      	add	r1, sp, #4
 8007ed2:	b142      	cbz	r2, 8007ee6 <__ascii_mbtowc+0x1a>
 8007ed4:	b14b      	cbz	r3, 8007eea <__ascii_mbtowc+0x1e>
 8007ed6:	7813      	ldrb	r3, [r2, #0]
 8007ed8:	600b      	str	r3, [r1, #0]
 8007eda:	7812      	ldrb	r2, [r2, #0]
 8007edc:	1e10      	subs	r0, r2, #0
 8007ede:	bf18      	it	ne
 8007ee0:	2001      	movne	r0, #1
 8007ee2:	b002      	add	sp, #8
 8007ee4:	4770      	bx	lr
 8007ee6:	4610      	mov	r0, r2
 8007ee8:	e7fb      	b.n	8007ee2 <__ascii_mbtowc+0x16>
 8007eea:	f06f 0001 	mvn.w	r0, #1
 8007eee:	e7f8      	b.n	8007ee2 <__ascii_mbtowc+0x16>

08007ef0 <__ascii_wctomb>:
 8007ef0:	b149      	cbz	r1, 8007f06 <__ascii_wctomb+0x16>
 8007ef2:	2aff      	cmp	r2, #255	; 0xff
 8007ef4:	bf85      	ittet	hi
 8007ef6:	238a      	movhi	r3, #138	; 0x8a
 8007ef8:	6003      	strhi	r3, [r0, #0]
 8007efa:	700a      	strbls	r2, [r1, #0]
 8007efc:	f04f 30ff 	movhi.w	r0, #4294967295
 8007f00:	bf98      	it	ls
 8007f02:	2001      	movls	r0, #1
 8007f04:	4770      	bx	lr
 8007f06:	4608      	mov	r0, r1
 8007f08:	4770      	bx	lr
	...

08007f0c <fiprintf>:
 8007f0c:	b40e      	push	{r1, r2, r3}
 8007f0e:	b503      	push	{r0, r1, lr}
 8007f10:	4601      	mov	r1, r0
 8007f12:	ab03      	add	r3, sp, #12
 8007f14:	4805      	ldr	r0, [pc, #20]	; (8007f2c <fiprintf+0x20>)
 8007f16:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f1a:	6800      	ldr	r0, [r0, #0]
 8007f1c:	9301      	str	r3, [sp, #4]
 8007f1e:	f7ff fd37 	bl	8007990 <_vfiprintf_r>
 8007f22:	b002      	add	sp, #8
 8007f24:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f28:	b003      	add	sp, #12
 8007f2a:	4770      	bx	lr
 8007f2c:	20000064 	.word	0x20000064

08007f30 <abort>:
 8007f30:	b508      	push	{r3, lr}
 8007f32:	2006      	movs	r0, #6
 8007f34:	f000 f82c 	bl	8007f90 <raise>
 8007f38:	2001      	movs	r0, #1
 8007f3a:	f7f9 fbd9 	bl	80016f0 <_exit>

08007f3e <_raise_r>:
 8007f3e:	291f      	cmp	r1, #31
 8007f40:	b538      	push	{r3, r4, r5, lr}
 8007f42:	4604      	mov	r4, r0
 8007f44:	460d      	mov	r5, r1
 8007f46:	d904      	bls.n	8007f52 <_raise_r+0x14>
 8007f48:	2316      	movs	r3, #22
 8007f4a:	6003      	str	r3, [r0, #0]
 8007f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f50:	bd38      	pop	{r3, r4, r5, pc}
 8007f52:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007f54:	b112      	cbz	r2, 8007f5c <_raise_r+0x1e>
 8007f56:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f5a:	b94b      	cbnz	r3, 8007f70 <_raise_r+0x32>
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	f000 f831 	bl	8007fc4 <_getpid_r>
 8007f62:	462a      	mov	r2, r5
 8007f64:	4601      	mov	r1, r0
 8007f66:	4620      	mov	r0, r4
 8007f68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f6c:	f000 b818 	b.w	8007fa0 <_kill_r>
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d00a      	beq.n	8007f8a <_raise_r+0x4c>
 8007f74:	1c59      	adds	r1, r3, #1
 8007f76:	d103      	bne.n	8007f80 <_raise_r+0x42>
 8007f78:	2316      	movs	r3, #22
 8007f7a:	6003      	str	r3, [r0, #0]
 8007f7c:	2001      	movs	r0, #1
 8007f7e:	e7e7      	b.n	8007f50 <_raise_r+0x12>
 8007f80:	2400      	movs	r4, #0
 8007f82:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007f86:	4628      	mov	r0, r5
 8007f88:	4798      	blx	r3
 8007f8a:	2000      	movs	r0, #0
 8007f8c:	e7e0      	b.n	8007f50 <_raise_r+0x12>
	...

08007f90 <raise>:
 8007f90:	4b02      	ldr	r3, [pc, #8]	; (8007f9c <raise+0xc>)
 8007f92:	4601      	mov	r1, r0
 8007f94:	6818      	ldr	r0, [r3, #0]
 8007f96:	f7ff bfd2 	b.w	8007f3e <_raise_r>
 8007f9a:	bf00      	nop
 8007f9c:	20000064 	.word	0x20000064

08007fa0 <_kill_r>:
 8007fa0:	b538      	push	{r3, r4, r5, lr}
 8007fa2:	4d07      	ldr	r5, [pc, #28]	; (8007fc0 <_kill_r+0x20>)
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	4604      	mov	r4, r0
 8007fa8:	4608      	mov	r0, r1
 8007faa:	4611      	mov	r1, r2
 8007fac:	602b      	str	r3, [r5, #0]
 8007fae:	f7f9 fb8f 	bl	80016d0 <_kill>
 8007fb2:	1c43      	adds	r3, r0, #1
 8007fb4:	d102      	bne.n	8007fbc <_kill_r+0x1c>
 8007fb6:	682b      	ldr	r3, [r5, #0]
 8007fb8:	b103      	cbz	r3, 8007fbc <_kill_r+0x1c>
 8007fba:	6023      	str	r3, [r4, #0]
 8007fbc:	bd38      	pop	{r3, r4, r5, pc}
 8007fbe:	bf00      	nop
 8007fc0:	2000083c 	.word	0x2000083c

08007fc4 <_getpid_r>:
 8007fc4:	f7f9 bb7c 	b.w	80016c0 <_getpid>

08007fc8 <_init>:
 8007fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fca:	bf00      	nop
 8007fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fce:	bc08      	pop	{r3}
 8007fd0:	469e      	mov	lr, r3
 8007fd2:	4770      	bx	lr

08007fd4 <_fini>:
 8007fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fd6:	bf00      	nop
 8007fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fda:	bc08      	pop	{r3}
 8007fdc:	469e      	mov	lr, r3
 8007fde:	4770      	bx	lr
